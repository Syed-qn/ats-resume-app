

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/render.yaml =====

services:
  - type: web
    name: ats-resume-app
    env: docker
    plan: free
    region: oregon
    envVars:
      # ───── Required for Django itself ─────
      - key: DJANGO_SETTINGS_MODULE
        value: ats_resume_app.settings
      - key: SECRET_KEY
        value: ${SECRET_KEY}            # e.g. define SECRET_KEY in Render’s “Environment” tab
      - key: DEBUG
        value: "False"                   # ensure DEBUG is false in production
      - key: ALLOWED_HOSTS
        value: ${ALLOWED_HOSTS}          # e.g. "atsresumeapp.onrender.com"

      # ───── Port and Optional Business Logic ─────
      - key: PORT
        value: "8000"
      - key: OPENAI_API_KEY
        value: ${OPENAI_API_KEY}
      - key: DEEPSEEK_API_KEY
        value: ${DEEPSEEK_API_KEY}

      # ───── Database ─────
      - key: DATABASE_URL
        value: ${DATABASE_URL}           # e.g. "postgres://user:pass@host:5432/dbname"

      # ───── Email Configuration ─────
      - key: EMAIL_HOST
        value: ${EMAIL_HOST}             # e.g. "smtp.gmail.com"
      - key: EMAIL_PORT
        value: ${EMAIL_PORT}             # e.g. "587"
      - key: EMAIL_USE_TLS
        value: ${EMAIL_USE_TLS}          # e.g. "True"
      - key: EMAIL_HOST_USER
        value: ${EMAIL_HOST_USER}        # e.g. "your_email@gmail.com"
      - key: EMAIL_HOST_PASSWORD
        value: ${EMAIL_HOST_PASSWORD}    # e.g. your app password
      - key: DEFAULT_FROM_EMAIL
        value: ${DEFAULT_FROM_EMAIL}     # e.g. "noreply@atsresume.com"
      - key: ADMIN_EMAIL
        value: ${ADMIN_EMAIL}            # e.g. "admin@yourdomain.com"

      # ───── File‐upload / S3 (if used) ─────
      - key: AWS_ACCESS_KEY_ID
        value: ${AWS_ACCESS_KEY_ID}
      - key: AWS_SECRET_ACCESS_KEY
        value: ${AWS_SECRET_ACCESS_KEY}
      - key: AWS_STORAGE_BUCKET_NAME
        value: ${AWS_STORAGE_BUCKET_NAME}
      - key: AWS_S3_REGION_NAME
        value: ${AWS_S3_REGION_NAME}

      # ───── Redis (if used) ─────
      - key: REDIS_URL
        value: ${REDIS_URL}              # e.g. "redis://:password@redis:6379/0"

      # ───── Session / Security ─────
      - key: SESSION_COOKIE_AGE
        value: "3600"
      - key: SESSION_EXPIRE_AT_BROWSER_CLOSE
        value: "True"
      - key: SENTRY_DSN
        value: ${SENTRY_DSN}             # if you use Sentry

      # ───── PDF Generation Settings ─────
      - key: PDF_PAGE_SIZE
        value: "A4"
      - key: PDF_MARGIN
        value: "0.5in"
      - key: PDF_DPI
        value: "300"
      - key: PDF_QUALITY
        value: "high"

      # ───── Downloads / Notifications ─────
      - key: DOWNLOADS_PER_15_DAYS
        value: "3"
      - key: DOWNLOADS_PER_MONTH
        value: "6"
      - key: SEND_WELCOME_EMAIL
        value: "True"
      - key: SEND_RESUME_NOTIFICATION
        value: "True"
      - key: NOTIFY_ADMIN_NEW_USER
        value: "True"

      # ───── SEO / Analytics (optional) ─────
      - key: GOOGLE_ANALYTICS_ID
        value: ${GOOGLE_ANALYTICS_ID}    # if set
      - key: MIXPANEL_TOKEN
        value: ${MIXPANEL_TOKEN}

      # ───── Other Optional Keys ─────
      - key: WHATSAPP_PHONE_NUMBER
        value: ${WHATSAPP_PHONE_NUMBER}
      - key: WHATSAPP_DEFAULT_MESSAGE
        value: ${WHATSAPP_DEFAULT_MESSAGE}

# ─────────────────────────────────────────────────────────────────────────────
# Below section is unchanged: build, collectstatic, migrations, and start up
# ─────────────────────────────────────────────────────────────────────────────
buildCommand: |
  pip install --upgrade pip
  pip install -r requirements.txt
  mkdir -p /app/staticfiles
  python manage.py collectstatic --noinput

startCommand: |
  python manage.py migrate
  gunicorn ats_resume_app.wsgi:application --bind 0.0.0.0:$PORT --timeout 120 --workers 1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/requirements.txt =====

# Core Django and Web Framework
Django==4.2.7
djangorestframework==3.14.0

# File Processing
PyPDF2==3.0.1
docx2txt==0.8
python-docx==0.8.11

# PDF Generation
WeasyPrint==60.2
html5lib==1.1

# AI/LLM Integration
openai>=1.3.7
tiktoken==0.5.1

# Data Processing
pandas==2.1.3
numpy==1.24.3

# Image Processing
Pillow==10.1.0

# Database (optional for basic usage)
# psycopg2-binary==2.9.9

# Caching and Background Tasks (optional)
# redis==5.0.1
# celery==5.3.4

# HTTP Requests
requests==2.31.0
urllib3==2.1.0

# Environment and Configuration
python-decouple==3.8
python-dotenv==1.0.0

# Security - use latest compatible version
cryptography>=3.4.8

# CORS Headers
django-cors-headers==4.3.1

# Web Server
gunicorn==21.2.0
whitenoise==6.6.0

# Utilities
chardet==5.2.0
python-slugify==8.0.1
beautifulsoup4
django-countries>=7.5.1                                           
django-phonenumber-field>=7.1.0
phonenumbers>=8.13.0


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/combined_output.txt =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/Dockerfile =====

FROM python:3.11-bullseye

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Install system dependencies required by WeasyPrint
RUN apt-get update && apt-get install -y \
    build-essential \
    libffi-dev \
    libcairo2 \
    libcairo2-dev \
    libpango-1.0-0 \
    libpangoft2-1.0-0 \
    libharfbuzz0b \
    libgdk-pixbuf2.0-0 \
    libgdk-pixbuf2.0-dev \
    libxml2 \
    libxslt1.1 \
    libglib2.0-0 \
    shared-mime-info \
    fonts-liberation \
    fonts-dejavu \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Set environment variable for Django
ENV DJANGO_SETTINGS_MODULE=ats_resume_app.settings

# Collect static files and run migrations before starting server
RUN mkdir -p /app/staticfiles
RUN python manage.py collectstatic --noinput

# Final entrypoint to apply migrations and start gunicorn
CMD ["sh", "-c", "python manage.py migrate && gunicorn ats_resume_app.wsgi:application --bind 0.0.0.0:$PORT --timeout 120 --workers 1"]

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/README.md =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.dockerignore =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.gitignore =====

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Django specific
media/resumes/*
!media/resumes/.gitkeep
staticfiles/
logs/*.log
.DS_Store

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
Thumbs.db.env
*.sqlite3
__pycache__/


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.env =====

# ====== BASIC CONFIGURATION ======
SECRET_KEY=django-insecure-your-secret-key-here-change-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,yourdomain.com

# ====== DATABASE CONFIGURATION ======
DATABASE_URL=sqlite:///db.sqlite3
# For production, use:
# DATABASE_URL=postgresql://username:password@localhost:5432/database_name

# ====== EMAIL CONFIGURATION ======
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=True
EMAIL_HOST_USER=your_email@gmail.com
EMAIL_HOST_PASSWORD=your_app_password
DEFAULT_FROM_EMAIL=noreply@atsresume.com

# ====== ADMIN CONFIGURATION ======
ADMIN_USERNAME=syed1
ADMIN_EMAIL=syed000211@gmail.com
ADMIN_PASSWORD=Khaja@2000

# ====== AI/LLM CONFIGURATION ======
OPENAI_API_KEY=sk-your-openai-api-key-here
DEEPSEEK_API_KEY=your-deepseek-api-key-here

LLM_MODEL=gpt-3.5-turbo
LLM_MAX_TOKENS=4096
LLM_TEMPERATURE=0.2
LLM_TIMEOUT=60
LLM_MAX_RETRIES=3
LLM_MAX_ITERATIONS=3

TARGET_ATS_SCORE=92
TARGET_JOB_SCORE=92

# ====== FILE UPLOAD SETTINGS ======
MAX_FILE_SIZE_MB=10
ALLOWED_FILE_EXTENSIONS=.pdf,.doc,.docx

# ====== DOWNLOAD LIMITS ======
DOWNLOADS_PER_15_DAYS=3
DOWNLOADS_PER_MONTH=6

# ====== WHATSAPP CONFIGURATION ======
WHATSAPP_PHONE_NUMBER=916303858671
WHATSAPP_DEFAULT_MESSAGE=Hi! I am interested in your job application service. Can you provide more details about pricing and process?

# ====== SESSION & SECURITY SETTINGS ======
SESSION_COOKIE_AGE=3600
SESSION_EXPIRE_AT_BROWSER_CLOSE=True

# ====== REDIS CONFIGURATION ======
REDIS_URL=redis://localhost:6379/0

# ====== AWS S3 CONFIGURATION ======
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_STORAGE_BUCKET_NAME=your_bucket_name
AWS_S3_REGION_NAME=us-east-1

# ====== SENTRY CONFIGURATION ======
SENTRY_DSN=your_sentry_dsn_here

# ====== LOGGING CONFIGURATION ======
LOG_LEVEL=INFO
LOG_TO_FILE=True

# ====== PDF GENERATION SETTINGS ======
PDF_PAGE_SIZE=A4
PDF_MARGIN=0.5in
PDF_DPI=300
PDF_QUALITY=high

# ====== NOTIFICATION SETTINGS ======
SEND_WELCOME_EMAIL=True
SEND_RESUME_NOTIFICATION=True
NOTIFY_ADMIN_NEW_USER=True

# ====== MANUAL RESUME FORM SETTINGS ======
MANUAL_RESUME_VALIDATION_STRICT=True
FORM_ERROR_DISPLAY_TOP=True
OPTIONAL_SECTIONS_COLLAPSED=True

# ====== DEVELOPMENT SETTINGS ======
USE_DEBUG_TOOLBAR=False
ENVIRONMENT=development

# ====== OPTIONAL BACKUP SETTINGS ======
# BACKUP_ENABLED=True
# BACKUP_SCHEDULE=daily
# BACKUP_RETENTION_DAYS=30

# ====== OPTIONAL ANALYTICS & SOCIAL ======
# GOOGLE_ANALYTICS_ID=GA-XXXXXXXXX
# MIXPANEL_TOKEN=your-mixpanel-token
# LINKEDIN_API_KEY=your-linkedin-api-key
# FACEBOOK_APP_ID=your-facebook-app-id


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/create_logos.py =====

# Create this file: create_logos.py (run once to generate placeholder logos)

from PIL import Image, ImageDraw, ImageFont
import os

def create_university_logo(text, color, filename, size=(100, 100)):
    """Create a simple text-based logo"""
    # Create image with transparent background
    img = Image.new('RGBA', size, (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    # Try to use a nice font, fall back to default
    try:
        font = ImageFont.truetype("Arial.ttf", 36)
    except:
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 36)  # macOS
        except:
            font = ImageFont.load_default()
    
    # Calculate text position to center it
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    x = (size[0] - text_width) // 2
    y = (size[1] - text_height) // 2
    
    # Draw background circle
    margin = 10
    draw.ellipse([margin, margin, size[0]-margin, size[1]-margin], fill=color)
    
    # Draw text
    draw.text((x, y), text, fill='white', font=font)
    
    return img

def main():
    # Create directory
    logo_dir = "static/resume/logos"
    os.makedirs(logo_dir, exist_ok=True)
    
    # University logos data
    universities = [
        ("Harvard", "H", "#A41E22"),
        ("MIT", "MIT", "#8A8B8C"), 
        ("Cambridge", "CAM", "#003B5C"),
        ("Stanford", "S", "#8C1515"),
        ("Wharton", "W", "#011F5B"),
        ("Berkeley", "UC", "#003262")
    ]
    
    for name, text, color in universities:
        img = create_university_logo(text, color, f"{name}.png")
        img.save(f"{logo_dir}/{name}.png", "PNG")
        print(f"Created {name}.png")

if __name__ == "__main__":
    main()

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/manage.py =====

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ats_resume_app.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/Procfile =====

web: gunicorn ats_resume_app.wsgi:application --log-file -



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/models.py =====

from django.conf import settings
from django.db import models
from django.utils import timezone
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth import get_user_model
from django.core.validators import RegexValidator, URLValidator

User = get_user_model()

class Resume(models.Model):
    """
    Stores an uploaded résumé.  'user' can be NULL for old legacy rows,
    but new entries created via the app always set it.
    """
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        null=True,          # <-- keep nullable to pass migration
        blank=True,
        related_name="resumes",
    )
    file = models.FileField(upload_to="resumes/")
    extracted_text = models.TextField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    file_size_bytes = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ["-created_at"]

    def __str__(self):
        who = self.user.username if self.user else "Orphan"
        return f"{who}'s résumé #{self.id}"

    # human-readable size
    @property
    def file_size(self):
        size = self.file_size_bytes or (self.file.size if self.file else 0)
        for unit in ("B", "KB", "MB", "GB", "TB"):
            if size < 1024:
                return f"{size:.1f} {unit}"
            size /= 1024
        return f"{size:.1f} PB"


class Template(models.Model):
    name        = models.CharField(max_length=255, unique=True)
    content     = models.TextField()
    description = models.TextField(blank=True, null=True)
    is_active   = models.BooleanField(default=True)
    created_at  = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["name"]

    def __str__(self):
        return self.name


class DownloadLog(models.Model):
    """Each PDF download → one entry, so we can enforce quotas."""
    user       = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="downloads",
    )
    downloaded = models.DateTimeField(auto_now_add=True)

    class Meta:
        indexes  = [models.Index(fields=["user", "downloaded"])]
        ordering = ["-downloaded"]

    def __str__(self):
        return f"{self.user.username} @ {timezone.localtime(self.downloaded):%Y-%m-%d %H:%M}"

class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL,
                                on_delete=models.CASCADE,
                                related_name="profile")
    country_code = models.CharField(max_length=5, blank=True)
    phone_number = models.CharField(max_length=20, blank=True)
    city = models.CharField(max_length=100, blank=True)
    country = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"Profile({self.user.username})"

@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
    else:
        instance.profile.save()
@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_or_update_user_profile(sender, instance, **kwargs):
    """
    Ensure every User has a matching Profile.
    We **never** touch instance.profile directly, because that attribute
    triggers a query and raises RelatedObjectDoesNotExist when no row exists.
    """
    # get_or_create returns (object, created_boolean)
    Profile.objects.get_or_create(user=instance)

# ADD THESE TO YOUR EXISTING resume/models.py file

class ManualResume(models.Model):
    """Manual resume entry with structured data"""
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="manual_resumes"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_complete = models.BooleanField(default=False)
    
    # Personal Information
    full_name = models.CharField(max_length=100)
    professional_title = models.CharField(max_length=100)
    email = models.EmailField()
    phone = models.CharField(max_length=20)
    city = models.CharField(max_length=100)
    state_province = models.CharField(max_length=100, blank=True)
    country = models.CharField(max_length=100)
    linkedin_url = models.URLField(blank=True, null=True)
    portfolio_url = models.URLField(blank=True, null=True)
    
    # Professional Summary
    professional_summary = models.TextField(
        help_text="2-3 sentences summarizing your career goals and key strengths"
    )
    
    class Meta:
        ordering = ['-updated_at']
    
    def __str__(self):
        return f"{self.full_name}'s Manual Resume"

class Education(models.Model):
    """Education entries for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='education_entries')
    degree_name = models.CharField(max_length=200)
    institution_name = models.CharField(max_length=200)
    institution_city = models.CharField(max_length=100)
    institution_country = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)  # null means "Present"
    is_current = models.BooleanField(default=False)
    gpa = models.DecimalField(max_digits=3, decimal_places=2, null=True, blank=True)
    relevant_coursework = models.TextField(blank=True, null=True)
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-start_date']

class WorkExperience(models.Model):
    """Work experience entries for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='work_experiences')
    job_title = models.CharField(max_length=200)
    company_name = models.CharField(max_length=200)
    company_city = models.CharField(max_length=100)
    company_country = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    is_current = models.BooleanField(default=False)
    responsibilities = models.TextField(
        help_text="Enter 3-5 bullet points describing key accomplishments, technologies used, and metrics"
    )
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-start_date']

class Project(models.Model):
    """Project entries for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='projects')
    title = models.CharField(max_length=200)
    role = models.CharField(max_length=100, help_text="e.g., Team Lead, Contributor")
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    is_ongoing = models.BooleanField(default=False)
    description = models.TextField(
        help_text="2-4 sentences detailing objectives, technologies/frameworks used, and outcome"
    )
    demo_url = models.URLField(blank=True, null=True)
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-start_date']

class Skill(models.Model):
    """Skills for manual resume"""
    SKILL_TYPES = [
        ('technical', 'Technical Skills'),
        ('soft', 'Soft Skills'),
        ('tools', 'Tools & Platforms'),
    ]
    
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='skills')
    skill_type = models.CharField(max_length=20, choices=SKILL_TYPES)
    name = models.CharField(max_length=100)
    proficiency = models.CharField(
        max_length=20, 
        choices=[
            ('beginner', 'Beginner'),
            ('intermediate', 'Intermediate'),
            ('advanced', 'Advanced'),
            ('expert', 'Expert'),
        ],
        default='intermediate'
    )
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['skill_type', 'order', 'name']
        unique_together = ['resume', 'name']

class Certification(models.Model):
    """Certifications for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='certifications')
    name = models.CharField(max_length=200)
    issuing_organization = models.CharField(max_length=200)
    date_obtained = models.DateField()
    expiration_date = models.DateField(null=True, blank=True)
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-date_obtained']

class Award(models.Model):
    """Awards and honors for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='awards')
    name = models.CharField(max_length=200)
    issuing_organization = models.CharField(max_length=200)
    date_received = models.DateField()
    description = models.TextField(blank=True, null=True)
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-date_received']

class Language(models.Model):
    """Language proficiencies for manual resume"""
    PROFICIENCY_LEVELS = [
        ('native', 'Native'),
        ('fluent', 'Fluent'),
        ('professional', 'Professional'),
        ('intermediate', 'Intermediate'),
        ('beginner', 'Beginner'),
    ]
    
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='languages')
    name = models.CharField(max_length=100)
    proficiency = models.CharField(max_length=20, choices=PROFICIENCY_LEVELS)
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', 'name']

class VolunteerExperience(models.Model):
    """Volunteer experience for manual resume"""
    resume = models.ForeignKey(ManualResume, on_delete=models.CASCADE, related_name='volunteer_experiences')
    role_title = models.CharField(max_length=200)
    organization_name = models.CharField(max_length=200)
    city = models.CharField(max_length=100)
    country = models.CharField(max_length=100)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    is_current = models.BooleanField(default=False)
    responsibilities = models.TextField()
    order = models.PositiveIntegerField(default=0)
    
    class Meta:
        ordering = ['order', '-start_date']

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__init__.py =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/apps.py =====

from django.apps import AppConfig


class ResumeConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "resume"

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/deepseek_client.py =====

# # resume/deepseek_client.py
# from openai import OpenAI
# from django.conf import settings

# client = OpenAI(
#     api_key=settings.DEEPSEEK_API_KEY,
#     base_url=settings.LLM_CONFIG["BASE_URL"],
#     timeout=settings.LLM_CONFIG["TIMEOUT"],
# )
# resume/deepseek_client.py
from openai import OpenAI
from django.conf import settings

client = OpenAI(
    api_key=settings.DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com/v1",  # Updated endpoint
    timeout=30  # Increased timeout
)

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/forms.py =====

# resume/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import AuthenticationForm
from django_countries.fields import CountryField
import phonenumbers
from django.forms import modelformset_factory, inlineformset_factory
from .models import (
    ManualResume, Education, WorkExperience, Project, 
    Skill, Certification, Award, Language, VolunteerExperience
)

from .models import Resume, Profile

User = get_user_model()

# Build a dropdown of all country dialing codes with a sample region label
COUNTRY_CODE_CHOICES = []
for code, regions in phonenumbers.COUNTRY_CODE_TO_REGION_CODE.items():
    if not regions:
        continue
    # Use the first region code for display (e.g. "US (+1)")
    label = f"{regions[0]} (+{code})"
    COUNTRY_CODE_CHOICES.append((str(code), label))
COUNTRY_CODE_CHOICES.sort(key=lambda x: int(x[0]))


class ResumeUploadForm(forms.ModelForm):
    class Meta:
        model = Resume
        fields = ["file"]

    def clean_file(self):
        file = self.cleaned_data.get("file")
        if file:
            if file.size > 10 * 1024 * 1024:
                raise forms.ValidationError("File size must be less than 10 MB.")
            ext = "." + file.name.split(".")[-1].lower()
            if ext not in [".pdf", ".doc", ".docx"]:
                raise forms.ValidationError("Only PDF, DOC, and DOCX files are allowed.")
        return file


class JobDescriptionForm(forms.Form):
    job_description = forms.CharField(
        widget=forms.Textarea(
            attrs={
                "placeholder": "Paste the complete job description here…",
                "rows": 10,
                "class": "form-control",
            }
        ),
        label="Job Description",
        min_length=50,
        help_text="Include requirements, responsibilities, must-have skills…",
    )


class CustomSignupForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        widget=forms.EmailInput(attrs={
            'class': 'form-control',
            'placeholder': 'your.email@example.com'
        }),
        error_messages={
            'required': 'Email address is required.',
            'invalid': 'Please enter a valid email address.'
        }
    )
    
    country_code = forms.ChoiceField(
        choices=COUNTRY_CODE_CHOICES,
        label="Country code",
        widget=forms.Select(attrs={'class': 'form-control'}),
        error_messages={
            'required': 'Please select your country code.',
            'invalid_choice': 'Please select a valid country code.'
        }
    )
    
    phone_number = forms.CharField(
        max_length=20,
        label="Phone number",
        widget=forms.TextInput(attrs={
            "placeholder": "e.g. 5551234567",
            'class': 'form-control'
        }),
        error_messages={
            'required': 'Phone number is required.',
            'max_length': 'Phone number is too long.'
        }
    )
    
    city = forms.CharField(
        max_length=100,
        widget=forms.TextInput(attrs={
            "placeholder": "Your city",
            'class': 'form-control'
        }),
        error_messages={
            'required': 'City is required.',
            'max_length': 'City name is too long.'
        }
    )
    
    country = CountryField().formfield(
        required=True,
        widget=forms.Select(attrs={"class": "form-control"}),
        error_messages={
            'required': 'Please select your country.',
            'invalid_choice': 'Please select a valid country.'
        }
    )

    class Meta:
        model = User
        fields = (
            "username",
            "email",
            "country_code",
            "phone_number",
            "city",
            "country",
            "password1",
            "password2",
        )
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Add CSS classes and improve widgets
        self.fields['username'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Choose a username'
        })
        self.fields['password1'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Create a strong password'
        })
        self.fields['password2'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'Confirm your password'
        })
        
        # Update error messages
        self.fields['username'].error_messages.update({
            'required': 'Username is required.',
            'unique': 'This username is already taken.',
            'invalid': 'Username contains invalid characters.'
        })
        
        self.fields['password1'].error_messages.update({
            'required': 'Password is required.',
        })
        
        self.fields['password2'].error_messages.update({
            'required': 'Please confirm your password.',
        })

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if email and User.objects.filter(email=email).exists():
            raise forms.ValidationError('This email address is already registered.')
        return email

    def clean_username(self):
        username = self.cleaned_data.get('username')
        if username and len(username) < 3:
            raise forms.ValidationError('Username must be at least 3 characters long.')
        if username and User.objects.filter(username=username).exists():
            raise forms.ValidationError('This username is already taken.')
        return username

    def clean_phone_number(self):
        phone = self.cleaned_data.get('phone_number')
        if phone and len(phone) < 7:
            raise forms.ValidationError('Please enter a valid phone number.')
        return phone

    def save(self, commit=True):
        # Create User then Profile
        user = super().save(commit=False)
        user.email = self.cleaned_data["email"]
        if commit:
            user.save()
            profile, _ = Profile.objects.get_or_create(user=user)
            profile.country_code = self.cleaned_data["country_code"]
            profile.phone_number = self.cleaned_data["phone_number"]
            profile.city = self.cleaned_data["city"]
            profile.country = self.cleaned_data["country"]
            profile.save()
        return user


class EmailAuthenticationForm(AuthenticationForm):
    """
    Enhanced authentication form with better error handling and styling
    """
    username = forms.CharField(
        label="Username",
        widget=forms.TextInput(attrs={
            "autofocus": True, 
            "class": "form-control",
            "placeholder": "Enter your username"
        }),
        error_messages={
            'required': 'Username is required.',
        }
    )
    
    password = forms.CharField(
        label="Password",
        widget=forms.PasswordInput(attrs={
            "class": "form-control",
            "placeholder": "Enter your password"
        }),
        error_messages={
            'required': 'Password is required.',
        }
    )

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        if username and password:
            self.user_cache = authenticate(
                self.request,
                username=username,
                password=password
            )
            if self.user_cache is None:
                raise forms.ValidationError(
                    "Invalid username or password. Please try again.",
                    code='invalid_login',
                )
            else:
                self.confirm_login_allowed(self.user_cache)

        return self.cleaned_data


class ManualResumeForm(forms.ModelForm):
    """Main form for personal information and professional summary"""
    
    class Meta:
        model = ManualResume
        fields = [
            'full_name', 'professional_title', 'email', 'phone',
            'city', 'state_province', 'country', 'linkedin_url', 
            'portfolio_url', 'professional_summary'
        ]
        widgets = {
            'full_name': forms.TextInput(attrs={
                'class': 'form-control', 
                'placeholder': 'e.g., John Smith',
                'required': True
            }),
            'professional_title': forms.TextInput(attrs={
                'class': 'form-control', 
                'placeholder': 'e.g., Data Scientist, Software Engineer',
                'required': True
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control',
                'placeholder': 'your.email@example.com',
                'required': True
            }),
            'phone': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '+1 (555) 123-4567',
                'required': True
            }),
            'city': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'New York',
                'required': True
            }),
            'state_province': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'NY (optional)'
            }),
            'country': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'United States',
                'required': True
            }),
            'linkedin_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://linkedin.com/in/yourprofile (optional)'
            }),
            'portfolio_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://github.com/yourusername (optional)'
            }),
            'professional_summary': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Write 2-3 sentences summarizing your career goals, core strengths, and key achievements...',
                'required': True
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # Add error messages for all fields
        for field_name, field in self.fields.items():
            field.error_messages.update({
                'required': f'{field.label} is required.',
                'invalid': f'Please enter a valid {field.label.lower()}.',
            })

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if email:
            # Basic email validation
            import re
            if not re.match(r'^[^@]+@[^@]+\.[^@]+$', email):
                raise forms.ValidationError('Please enter a valid email address.')
        return email

    def clean_professional_summary(self):
        summary = self.cleaned_data.get('professional_summary')
        if summary and len(summary.split()) < 10:
            raise forms.ValidationError('Professional summary should be at least 10 words.')
        return summary


class EducationForm(forms.ModelForm):
    """Form for education entries"""
    
    class Meta:
        model = Education
        fields = [
            'degree_name', 'institution_name', 'institution_city', 
            'institution_country', 'start_date', 'end_date', 
            'is_current', 'gpa', 'relevant_coursework'
        ]
        widgets = {
            'degree_name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Bachelor of Science in Computer Science',
                'required': True
            }),
            'institution_name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., University of Dubai',
                'required': True
            }),
            'institution_city': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Dubai',
                'required': True
            }),
            'institution_country': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'UAE',
                'required': True
            }),
            'start_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'placeholder': 'YYYY-MM',
                'required': True
            }),
            'end_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'placeholder': 'YYYY-MM'
            }),
            'is_current': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'gpa': forms.NumberInput(attrs={
                'class': 'form-control',
                'step': '0.01',
                'min': '0',
                'max': '4.0',
                'placeholder': '3.75 (optional)'
            }),
            'relevant_coursework': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'List relevant courses, honors, or achievements (optional)'
            }),
        }


class WorkExperienceForm(forms.ModelForm):
    """Form for work experience entries"""
    
    class Meta:
        model = WorkExperience
        fields = [
            'job_title', 'company_name', 'company_city', 'company_country',
            'start_date', 'end_date', 'is_current', 'responsibilities'
        ]
        widgets = {
            'job_title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., AI & Data Scientist',
                'required': True
            }),
            'company_name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Younoh Media',
                'required': True
            }),
            'company_city': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Dubai',
                'required': True
            }),
            'company_country': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'UAE',
                'required': True
            }),
            'start_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'required': True
            }),
            'end_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month'
            }),
            'is_current': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'responsibilities': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 6,
                'placeholder': '• Improved campaign CTR by 25% using predictive modeling\n• Developed machine learning pipelines using Python and TensorFlow\n• Led cross-functional team of 5 engineers\n• Managed $2M annual budget for data infrastructure\n• Published 3 research papers in top-tier conferences',
                'required': True
            }),
        }


class ProjectForm(forms.ModelForm):
    """Form for project entries"""
    
    class Meta:
        model = Project
        fields = [
            'title', 'role', 'start_date', 'end_date', 
            'is_ongoing', 'description', 'demo_url'
        ]
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Customer Churn Prediction System',
                'required': True
            }),
            'role': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Team Lead, Contributor, Solo Developer',
                'required': True
            }),
            'start_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'required': True
            }),
            'end_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month'
            }),
            'is_ongoing': forms.CheckboxInput(attrs={
                'class': 'form-check-input'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Describe the project objectives, technologies/frameworks used, and outcome or impact. Include metrics when possible.',
                'required': True
            }),
            'demo_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://github.com/username/project (optional)'
            }),
        }


class SkillForm(forms.ModelForm):
    """Form for individual skills"""
    
    class Meta:
        model = Skill
        fields = ['skill_type', 'name', 'proficiency']
        widgets = {
            'skill_type': forms.Select(attrs={'class': 'form-control', 'required': True}),
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Python, Leadership, Docker',
                'required': True
            }),
            'proficiency': forms.Select(attrs={'class': 'form-control', 'required': True}),
        }


class CertificationForm(forms.ModelForm):
    """Form for certifications"""
    
    class Meta:
        model = Certification
        fields = ['name', 'issuing_organization', 'date_obtained', 'expiration_date']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Google Cloud Professional Data Engineer',
                'required': True
            }),
            'issuing_organization': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., Google Cloud',
                'required': True
            }),
            'date_obtained': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'required': True
            }),
            'expiration_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'month',
                'placeholder': 'Leave blank if no expiration'
            }),
        }


class LanguageForm(forms.ModelForm):
    """Form for languages"""
    
    class Meta:
        model = Language
        fields = ['name', 'proficiency']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'e.g., English, Arabic, Spanish',
                'required': True
            }),
            'proficiency': forms.Select(attrs={'class': 'form-control', 'required': True}),
        }


# Create formsets for repeatable sections with improved validation
EducationFormSet = inlineformset_factory(
    ManualResume, Education, form=EducationForm, 
    extra=1, can_delete=True, min_num=1, validate_min=True
)

WorkExperienceFormSet = inlineformset_factory(
    ManualResume, WorkExperience, form=WorkExperienceForm,
    extra=0, can_delete=True, min_num=0, validate_min=False
)

ProjectFormSet = inlineformset_factory(
    ManualResume, Project, form=ProjectForm,
    extra=0, can_delete=True, min_num=0, validate_min=False
)

SkillFormSet = inlineformset_factory(
    ManualResume, Skill, form=SkillForm,
    extra=3, can_delete=True, min_num=1, validate_min=True
)

CertificationFormSet = inlineformset_factory(
    ManualResume, Certification, form=CertificationForm,
    extra=0, can_delete=True, min_num=0, validate_min=False
)

LanguageFormSet = inlineformset_factory(
    ManualResume, Language, form=LanguageForm,
    extra=0, can_delete=True, min_num=0, validate_min=False
)

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/admin.py =====

# resume/admin.py - Update your existing admin.py

from django.contrib import admin
from .models import (
    Resume, Template, ManualResume, Education, WorkExperience, 
    Project, Skill, Certification, Award, Language, VolunteerExperience
)

@admin.register(Resume)
class ResumeAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'file', 'created_at')
    list_filter = ('created_at', 'user')
    search_fields = ('user__username', 'file')
    readonly_fields = ('created_at', 'extracted_text')

@admin.register(Template)
class TemplateAdmin(admin.ModelAdmin):
    list_display = ('id', 'name')
    search_fields = ('name',)

# Inline admin classes for related models
class EducationInline(admin.TabularInline):
    model = Education
    extra = 1
    fields = ('degree_name', 'institution_name', 'start_date', 'end_date', 'is_current', 'order')
    ordering = ('order', '-start_date')

class WorkExperienceInline(admin.TabularInline):
    model = WorkExperience
    extra = 1
    fields = ('job_title', 'company_name', 'start_date', 'end_date', 'is_current', 'order')
    ordering = ('order', '-start_date')

class ProjectInline(admin.TabularInline):
    model = Project
    extra = 1
    fields = ('title', 'role', 'start_date', 'end_date', 'is_ongoing', 'order')
    ordering = ('order', '-start_date')

class SkillInline(admin.TabularInline):
    model = Skill
    extra = 3
    fields = ('skill_type', 'name', 'proficiency', 'order')
    ordering = ('skill_type', 'order')

class CertificationInline(admin.TabularInline):
    model = Certification
    extra = 1
    fields = ('name', 'issuing_organization', 'date_obtained', 'expiration_date', 'order')
    ordering = ('order', '-date_obtained')

class LanguageInline(admin.TabularInline):
    model = Language
    extra = 1
    fields = ('name', 'proficiency', 'order')
    ordering = ('order',)

@admin.register(ManualResume)
class ManualResumeAdmin(admin.ModelAdmin):
    list_display = ('id', 'full_name', 'user', 'professional_title', 'is_complete', 'updated_at')
    list_filter = ('is_complete', 'created_at', 'updated_at')
    search_fields = ('full_name', 'user__username', 'professional_title', 'email')
    readonly_fields = ('created_at', 'updated_at')
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('user', 'is_complete', 'created_at', 'updated_at')
        }),
        ('Personal Information', {
            'fields': (
                'full_name', 'professional_title', 'email', 'phone',
                'city', 'state_province', 'country', 'linkedin_url', 'portfolio_url'
            )
        }),
        ('Professional Summary', {
            'fields': ('professional_summary',)
        }),
    )
    
    inlines = [
        EducationInline,
        WorkExperienceInline,
        ProjectInline,
        SkillInline,
        CertificationInline,
        LanguageInline,
    ]
    
    def get_queryset(self, request):
        return super().get_queryset(request).select_related('user')

# Individual model admins for direct management
@admin.register(Education)
class EducationAdmin(admin.ModelAdmin):
    list_display = ('degree_name', 'institution_name', 'resume', 'start_date', 'end_date')
    list_filter = ('institution_country', 'start_date', 'is_current')
    search_fields = ('degree_name', 'institution_name', 'resume__full_name')

@admin.register(WorkExperience)
class WorkExperienceAdmin(admin.ModelAdmin):
    list_display = ('job_title', 'company_name', 'resume', 'start_date', 'end_date')
    list_filter = ('company_country', 'start_date', 'is_current')
    search_fields = ('job_title', 'company_name', 'resume__full_name')

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = ('title', 'role', 'resume', 'start_date', 'end_date')
    list_filter = ('start_date', 'is_ongoing')
    search_fields = ('title', 'role', 'resume__full_name')

@admin.register(Skill)
class SkillAdmin(admin.ModelAdmin):
    list_display = ('name', 'skill_type', 'proficiency', 'resume')
    list_filter = ('skill_type', 'proficiency')
    search_fields = ('name', 'resume__full_name')

@admin.register(Certification)
class CertificationAdmin(admin.ModelAdmin):
    list_display = ('name', 'issuing_organization', 'resume', 'date_obtained', 'expiration_date')
    list_filter = ('issuing_organization', 'date_obtained')
    search_fields = ('name', 'issuing_organization', 'resume__full_name')

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ('name', 'proficiency', 'resume')
    list_filter = ('proficiency',)
    search_fields = ('name', 'resume__full_name')

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/utils.py =====

import tempfile
import docx2txt
import PyPDF2
import os
import logging
from django.conf import settings

logger = logging.getLogger(__name__)

def extract_text_from_file(filepath):
    """
    Extract text from uploaded file based on extension
    """
    try:
        extension = filepath.split('.')[-1].lower()
        if extension == 'pdf':
            return extract_text_from_pdf(filepath)
        elif extension == 'docx':
            return extract_text_from_docx(filepath)
        elif extension == 'doc':
            # For .doc files, try to use python-docx first
            try:
                return extract_text_from_docx(filepath)
            except Exception:
                logger.warning(f"Failed to extract text from .doc file: {filepath}")
                return ""
        else:
            logger.warning(f"Unsupported file extension: {extension}")
            return ""
    except Exception as e:
        logger.error(f"Error extracting text from file {filepath}: {str(e)}")
        return ""

def extract_text_from_pdf(filepath):
    """
    Extract text from PDF file
    """
    text = ""
    try:
        with open(filepath, 'rb') as f:
            reader = PyPDF2.PdfReader(f)
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        return text.strip()
    except Exception as e:
        logger.error(f"Error extracting text from PDF {filepath}: {str(e)}")
        return ""

def extract_text_from_docx(filepath):
    """
    Extract text from DOCX file
    """
    try:
        text = docx2txt.process(filepath)
        return text.strip() if text else ""
    except Exception as e:
        logger.error(f"Error extracting text from DOCX {filepath}: {str(e)}")
        return ""

def validate_file(file):
    """
    Validate uploaded file
    """
    errors = []
    
    # Check file size
    max_size = getattr(settings, 'RESUME_PROCESSING', {}).get('MAX_FILE_SIZE', 10 * 1024 * 1024)
    if file.size > max_size:
        errors.append(f"File size must be less than {max_size // (1024*1024)}MB")
    
    # Check file extension
    allowed_extensions = getattr(settings, 'RESUME_PROCESSING', {}).get('ALLOWED_EXTENSIONS', ['.pdf', '.doc', '.docx'])
    file_extension = '.' + file.name.split('.')[-1].lower()
    if file_extension not in allowed_extensions:
        errors.append(f"Only {', '.join(allowed_extensions)} files are allowed")
    
    return errors

def format_file_size(bytes_size):
    """
    Convert bytes to human readable format
    """
    if bytes_size == 0:
        return "0 B"
    
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    
    return f"{bytes_size:.1f} PB"

def clean_extracted_text(text):
    """
    Clean and normalize extracted text
    """
    if not text:
        return ""
    
    # Remove excessive whitespace
    import re
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'\n\s*\n', '\n\n', text)
    
    # Remove common OCR artifacts
    text = text.replace('', '')  # Remove null characters
    text = text.replace('\x00', '')  # Remove null bytes
    
    return text.strip()


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates_config.py =====

# resume/templates_config.py  ← replace the existing list with this
TEMPLATES_LIST = [
    {
        "id": 1,
        "name": "Harvard Classic Chronological",
        "filename": "template1.html",        # ← harvard.html content saved as template1.html
        "description": "Clean Harvard style; reverse-chronological focus for early-career or recent grads",
        "logo": "static/resume/logos/Harvard.png"
    },
    {
        "id": 2,
        "name": "MIT Technical",
        "filename": "template2.html",        # ← mit.html content saved as template2.html
        "description": "ATS-friendly technical résumé layout recommended by MIT CAPD; ideal for STEM freshers",
        "logo": "static/MIT.png"
    },
    {
        "id": 3,
        "name": "Cambridge Global Graduate",
        "filename": "template3.html",        # ← cambridge.html content saved as template3.html
        "description": "International graduate template from Cambridge careers service; projects up-front",
        "logo": "static/Cambridge.png"
    },
    {
        "id": 4,
        "name": "Stanford Professional",
        "filename": "template4.html",        # ← stanford.html content saved as template4.html
        "description": "GSB-inspired professional format; highlights extensive work history and impact",
        "logo": "static/Stanford.png"
    },
    {
        "id": 5,
        "name": "Wharton Executive",
        "filename": "template5.html",        # ← wharton.html content saved as template5.html
        "description": "Executive-style résumé emphasising leadership and quantified achievements",
        "logo": "static/Wharton.png"
    },
    {
        "id": 6,
        "name": "Berkeley Modern Hybrid",
        "filename": "template6.html",        # ← berkeley.html content saved as template6.html
        "description": "Modern hybrid layout from UC Berkeley career centre; balances skills and projects",
        "logo": "static/Berkeley.png"
    },
]


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/tests.py =====

from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from django.core.files.uploadedfile import SimpleUploadedFile
from django.conf import settings
import json
import os
from .models import Resume
from .utils import extract_text_from_file, validate_file

class ResumeModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
    
    def test_resume_creation(self):
        resume = Resume.objects.create(
            user=self.user,
            extracted_text="Test resume content"
        )
        self.assertEqual(str(resume), "testuser's resume #1")
        self.assertEqual(resume.extracted_text, "Test resume content")

class ResumeViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username='testuser', password='testpass')
    
    def test_home_view(self):
        response = self.client.get(reverse('home'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'ATS Resume Optimizer')
    
    def test_get_templates_ajax(self):
        response = self.client.get(reverse('get_templates_ajax'))
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)
        self.assertIn('templates', data)
        self.assertGreater(len(data['templates']), 0)

class FileProcessingTest(TestCase):
    def test_validate_file_size(self):
        # Create a mock file that's too large
        large_content = b'x' * (11 * 1024 * 1024)  # 11MB
        large_file = SimpleUploadedFile("large.pdf", large_content, content_type="application/pdf")
        
        errors = validate_file(large_file)
        self.assertIn('File size must be less than 10MB', str(errors))
    
    def test_validate_file_extension(self):
        # Create a file with invalid extension
        invalid_file = SimpleUploadedFile("test.txt", b"content", content_type="text/plain")
        
        errors = validate_file(invalid_file)
        self.assertTrue(any('files are allowed' in error for error in errors))


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/urls.py =====

# resume/urls.py - Updated with Tasks 11, 13, 14

from django.urls import path, include
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    # ─────────────── Landing & Public Pages ───────────────
    path('', views.landing, name='landing'),
    
    # Task 13: New navigation pages
    path('ats-details/', views.ats_details, name='ats_details'),
    path('our-services/', views.our_services, name='our_services'),
    
    # ─────────────── Authentication URLs ───────────────
    # Task 11: Custom password reset views
    path('password-reset/', 
         views.CustomPasswordResetView.as_view(), 
         name='password_reset'),
    path('password-reset/done/', 
         views.CustomPasswordResetDoneView.as_view(), 
         name='password_reset_done'),
    path('reset/<uidb64>/<token>/', 
         views.CustomPasswordResetConfirmView.as_view(), 
         name='password_reset_confirm'),
    path('reset/done/', 
         views.CustomPasswordResetCompleteView.as_view(), 
         name='password_reset_complete'),
    
    # Task 11: Custom login view with admin redirect
    path('login/', views.CustomLoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('signup/', views.signup, name='signup'),
    
    # ─────────────── Protected Application URLs - Task 14 ───────────────
    # Task 14: All these require login
    path('app/', views.dashboard, name='dashboard'),  # Protected SPA entry
    
    # API endpoints - all protected
    path('api/upload/', views.upload_resume_ajax, name='upload_resume'),
    path('api/generate/<int:resume_id>/<int:template_id>/', views.generate_tailored_resume_ajax, name='generate_resume'),
    path('api/progress/<str:task_id>/', views.check_progress, name='check_progress'),
    path('api/download/<int:resume_id>/', views.download_pdf_ajax, name='download_pdf'),
    path('api/resumes/', views.ResumeAPIView.as_view(), name='resume_list'),
    path('api/resumes/<int:resume_id>/', views.ResumeAPIView.as_view(), name='resume_detail'),
    path('templates/', views.get_templates_ajax, name='get_templates'),
    path('api/analyze/', views.analyze_resume_ajax, name='analyze_resume'),
    
    # Manual resume entry - all protected
    path('manual-resume/create/', views.manual_resume_create, name='manual_resume_create'),
    path('manual-resume/edit/<int:resume_id>/', views.manual_resume_edit, name='manual_resume_edit'),
    path('manual-resume/preview/<int:resume_id>/', views.manual_resume_preview, name='manual_resume_preview'),
    path('manual-resume/list/', views.manual_resume_list, name='manual_resume_list'),
    path('manual-resume/delete/<int:resume_id>/', views.manual_resume_delete, name='manual_resume_delete'),
    path('manual-resume/convert/<int:resume_id>/', views.convert_manual_to_tailored, name='convert_manual_to_tailored'),
    
    # ─────────────── Admin Panel URLs ───────────────
    path('admin-panel/', views.admin_dashboard, name='admin_dashboard'),
    path('admin-panel/users/', views.admin_users, name='admin_users'),
    path('admin-panel/users/<int:user_id>/', views.admin_user_detail, name='admin_user_detail'),
    path('admin-panel/settings/', views.admin_settings, name='admin_settings'),
    path('admin-panel/create-user/', views.admin_create_user, name='admin_create_user'),
    path('admin-panel/analytics/', views.admin_analytics, name='admin_analytics'),
    path('admin-panel/logs/', views.admin_system_logs, name='admin_system_logs'),
    
    # Admin API endpoints
    path('admin-panel/api/stats/', views.admin_api_stats, name='admin_api_stats'),
    path('admin-panel/api/user/<int:user_id>/action/', views.admin_api_user_action, name='admin_api_user_action'),
]

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/middleware.py =====

# resume/middleware.py - Task 14: Authentication middleware

from django.shortcuts import redirect
from django.urls import reverse
from django.contrib import messages
from django.conf import settings

class SPAAuthenticationMiddleware:
    """
    Middleware to ensure only authenticated users can access the SPA dashboard
    Task 14: No one should be able to access spa.html or resume creating service without logging in
    """
    
    def __init__(self, get_response):
        self.get_response = get_response
        
        # URLs that require authentication
        self.protected_paths = [
            '/app/',  # SPA dashboard
            '/api/',  # All API endpoints
            '/templates/',  # Template endpoints
            '/manual-resume/',  # Manual resume creation
            '/admin-panel/',  # Admin panel
        ]
        
        # URLs that should be accessible without authentication
        self.public_paths = [
            '/',  # Landing page
            '/login/',
            '/signup/',
            '/password-reset/',
            '/ats-details/',
            '/our-services/',
            '/static/',
            '/media/',
            '/admin/',  # Django admin (has its own auth)
        ]

    def __call__(self, request):
        # Check if the request path requires authentication
        if self.requires_authentication(request.path):
            if not request.user.is_authenticated:
                # Store the original URL they were trying to access
                request.session['next_url'] = request.get_full_path()
                
                # Add an informative message
                messages.warning(
                    request, 
                    '🔒 Please log in to access the resume optimizer dashboard. '
                    'Create a free account if you don\'t have one yet!'
                )
                
                # Redirect to login page
                return redirect('login')
        
        response = self.get_response(request)
        return response

    def requires_authentication(self, path):
        """Check if a path requires authentication"""
        
        # Check if path is explicitly public
        for public_path in self.public_paths:
            if path.startswith(public_path):
                return False
        
        # Check if path requires authentication
        for protected_path in self.protected_paths:
            if path.startswith(protected_path):
                return True
        
        # Default to not requiring authentication for other paths
        return False


# Alternative function-based middleware (if you prefer)
def spa_authentication_middleware(get_response):
    """
    Alternative function-based middleware for SPA authentication
    """
    
    def middleware(request):
        protected_paths = ['/app/', '/api/', '/templates/', '/manual-resume/', '/admin-panel/']
        public_paths = ['/', '/login/', '/signup/', '/password-reset/', '/ats-details/', '/our-services/', '/static/', '/media/', '/admin/']
        
        # Check if path requires authentication
        requires_auth = False
        for protected_path in protected_paths:
            if request.path.startswith(protected_path):
                requires_auth = True
                break
        
        # Override if path is explicitly public
        for public_path in public_paths:
            if request.path.startswith(public_path):
                requires_auth = False
                break
        
        if requires_auth and not request.user.is_authenticated:
            request.session['next_url'] = request.get_full_path()
            messages.warning(
                request, 
                '🔒 Please log in to access the resume optimizer. Create a free account if you don\'t have one!'
            )
            return redirect('login')
        
        response = get_response(request)
        return response
    
    return middleware


# Custom decorator for view-based protection (alternative approach)
from functools import wraps
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator

def spa_login_required(view_func):
    """
    Custom decorator that adds a specific message for SPA access
    """
    @wraps(view_func)
    def wrapper(request, *args, **kwargs):
        if not request.user.is_authenticated:
            messages.warning(
                request,
                '🔒 Please log in to access the ATS Resume Optimizer dashboard. '
                'Your career optimization tools are waiting!'
            )
            return redirect('login')
        return view_func(request, *args, **kwargs)
    return wrapper



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/views.py =====

# resume/views.py - Updated with Task 10: Email notifications on first resume upload

from __future__ import annotations

import json
import logging
import os
import re
import uuid
from datetime import timedelta
from typing import Optional, Tuple
from django.core.cache import cache
import threading
import time
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib.auth.decorators import user_passes_test
from django.contrib.auth import get_user_model
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Count, Q
from django.utils import timezone
from django.conf import settings
from django.core.paginator import Paginator
from datetime import datetime, timedelta
from .models import Resume, DownloadLog, Profile, ManualResume
from .forms import CustomSignupForm
import json
import os
from django.urls import reverse_lazy
from bs4 import BeautifulSoup           # pip install beautifulsoup4
from django.conf import settings
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import HttpRequest, HttpResponse, JsonResponse, StreamingHttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.template.loader import render_to_string
from django.utils.timezone import now
from django.views import View
from django.views.decorators.http import require_http_methods
from django.db import transaction
from openai import OpenAI               # openai-python ≥ 1.3
from weasyprint import HTML

# Task 10: Import email functionality
from django.core.mail import EmailMessage
from django.template.loader import get_template
from django.contrib.auth.views import LoginView

from .forms import ResumeUploadForm, CustomSignupForm, ManualResumeForm
from .models import Resume, DownloadLog
from .templates_config import TEMPLATES_LIST
from .utils import clean_extracted_text, extract_text_from_file, validate_file

# Task 10: Enhanced email functionality
from django.core.mail import EmailMessage, send_mail
from django.template.loader import get_template
from django.contrib.auth.views import LoginView

# Task 11: Password reset functionality
from django.contrib.auth.views import (
    PasswordResetView, PasswordResetDoneView, 
    PasswordResetConfirmView, PasswordResetCompleteView
)


logger = logging.getLogger(__name__)
client = OpenAI(api_key=settings.OPENAI_API_KEY)

# Target scores - must achieve both
TARGET_ATS_SCORE = 92
TARGET_JOB_SCORE = 92

# ────────────────────  Landing & Signup  ────────────────────

def landing(request: HttpRequest) -> HttpResponse:
    """Public landing page explaining ATS importance."""
    return render(request, "landing.html")


def ats_details(request: HttpRequest) -> HttpResponse:
    """Detailed page explaining ATS systems - Task 13"""
    return render(request, "ats_details.html")


def our_services(request: HttpRequest) -> HttpResponse:
    """Detailed page explaining our services - Task 13"""
    return render(request, "our_services.html")


def signup(request: HttpRequest) -> HttpResponse:
    """
    Custom user signup with success message and redirect to login.
    Task 3: Show success prompt and redirect to login page.
    Task 10: Enhanced to store signup data for email notifications.
    """
    if request.method == "POST":
        form = CustomSignupForm(request.POST)
        if form.is_valid():
            user = form.save()
            
            # Task 10: Store signup form data in session for first resume email
            signup_data = {
                'username': form.cleaned_data.get('username'),
                'email': form.cleaned_data.get('email'),
                'phone_number': form.cleaned_data.get('phone_number'),
                'country_code': form.cleaned_data.get('country_code'),
                'city': form.cleaned_data.get('city'),
                'country': form.cleaned_data.get('country'),
                'signup_time': timezone.now().isoformat(),
            }
            
            # Store in cache with user ID as key for later retrieval
            cache.set(f"signup_data_{user.id}", signup_data, timeout=86400)  # 24 hours
            
            # Task 3: Add success message and redirect to login
            messages.success(
                request, 
                f'🎉 Success! Your account has been created successfully. '
                f'Welcome to ATS Resume Optimizer, {user.username}! '
                f'Please log in to access your dashboard.'
            )
            return redirect("login")
        else:
            # Add error message for form validation failures
            messages.error(
                request,
                'Please correct the errors below and try again.'
            )
    else:
        form = CustomSignupForm()
    return render(request, "registration/signup.html", {"form": form})


# ────────────────────────  SPA Dashboard  ───────────────────────

@login_required(login_url="login")
def dashboard(request: HttpRequest) -> HttpResponse:
    """Single-page application entry point; requires login - Task 14."""
    
    # Check if user is admin and redirect to admin panel
    if request.user.is_superuser or request.user.is_staff:
        messages.info(request, f'Welcome Admin {request.user.username}! Redirecting to Admin Panel...')
        return redirect('admin_dashboard')
    
    return render(request, "resume/spa.html")


# Task 10: Enhanced email notification function for first resume upload
def send_first_resume_notification(user, resume_file, signup_data=None):
    """Send comprehensive email notification when user uploads their first resume"""
    try:
        # Get user profile information
        profile = getattr(user, 'profile', None)
        
        # Get signup data from cache if not provided
        if not signup_data:
            signup_data = cache.get(f"signup_data_{user.id}", {})
        
        # Prepare comprehensive context for email template
        context = {
            'user': user,
            'profile': profile,
            'resume_filename': resume_file.name if resume_file else 'No file',
            'resume_file_size': resume_file.size if resume_file else 0,
            'upload_time': timezone.now(),
            'admin_email': getattr(settings, 'ADMIN_EMAIL', 'admin@example.com'),
            
            # Signup form details
            'signup_data': {
                'username': signup_data.get('username', user.username),
                'email': signup_data.get('email', user.email),
                'phone_number': signup_data.get('phone_number', 'Not provided'),
                'country_code': signup_data.get('country_code', 'Not provided'),
                'city': signup_data.get('city', 'Not provided'),
                'country': signup_data.get('country', 'Not provided'),
                'signup_time': signup_data.get('signup_time', 'Unknown'),
                'full_phone': f"{signup_data.get('country_code', '')}{signup_data.get('phone_number', '')}" if signup_data.get('phone_number') else 'Not provided'
            },
            
            # Additional user info
            'user_info': {
                'date_joined': user.date_joined,
                'last_login': user.last_login,
                'is_staff': user.is_staff,
                'is_active': user.is_active,
            }
        }
        
        # Load email template
        email_template = get_template('emails/first_resume_notification.html')
        email_content = email_template.render(context)
        
        # Create email message
        admin_email = getattr(settings, 'ADMIN_CONFIG', {}).get('EMAIL', 'admin@example.com')
        from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@atsresume.com')
        
        email = EmailMessage(
            subject=f'🎯 New User First Resume Upload - {user.username}',
            body=email_content,
            from_email=from_email,
            to=[admin_email],
            reply_to=[user.email],
        )
        
        # Set email as HTML
        email.content_subtype = 'html'
        
        # Attach the resume file if it exists
        if resume_file and hasattr(resume_file, 'path') and os.path.exists(resume_file.path):
            try:
                email.attach_file(resume_file.path)
                logger.info(f"Resume file attached: {resume_file.path}")
            except Exception as e:
                logger.warning(f"Failed to attach resume file: {e}")
        
        # Send email
        email.send(fail_silently=False)
        logger.info(f"First resume notification sent for user: {user.username}")
        
        # Clear signup data from cache after successful email
        cache.delete(f"signup_data_{user.id}")
        
    except Exception as e:
        logger.error(f"Failed to send first resume notification for user {user.username}: {e}")



# ────────────────────────  Resume Upload  ───────────────────────

@require_http_methods(["POST"])
@login_required(login_url="login")
def upload_resume_ajax(request: HttpRequest) -> JsonResponse:
    """Upload resume with login protection - Task 14"""
    try:
        if "file" not in request.FILES:
            return JsonResponse({"error": "No file provided"}, status=400)

        file_obj = request.FILES["file"]
        errs = validate_file(file_obj)
        if errs:
            return JsonResponse({"error": "; ".join(errs)}, status=400)

        form = ResumeUploadForm(request.POST, request.FILES)
        if not form.is_valid():
            return JsonResponse({"error": "Invalid file"}, status=400)

        # Task 10: Check if this is the user's first resume
        is_first_resume = not Resume.objects.filter(user=request.user).exists()

        resume = form.save(commit=False)
        resume.user = request.user
        resume.file_size_bytes = file_obj.size
        resume.save()

        text = extract_text_from_file(resume.file.path)
        resume.extracted_text = clean_extracted_text(text)
        resume.save()

        # Task 10: Send email notification for first resume upload
        if is_first_resume:
            try:
                # Get signup data from cache
                signup_data = cache.get(f"signup_data_{request.user.id}", {})
                
                # Send notification in background thread to avoid blocking the response
                threading.Thread(
                    target=send_first_resume_notification,
                    args=(request.user, resume.file, signup_data),
                    daemon=True
                ).start()
                logger.info(f"First resume upload notification queued for user: {request.user.username}")
            except Exception as e:
                logger.error(f"Failed to queue first resume notification: {e}")

        return JsonResponse({
            "success": True,
            "resume_id": resume.id,
            "file_size": resume.file_size,
            "text_length": len(resume.extracted_text),
            "is_first_resume": is_first_resume,
        })
    except Exception as exc:
        logger.exception("Upload failed: %s", exc)
        return JsonResponse({"error": f"Upload failed: {exc}"}, status=500)


# Task 11: Custom Password Reset Views
class CustomPasswordResetView(PasswordResetView):
    """Custom password reset view with enhanced template and messaging"""
    template_name = 'registration/password_reset_form.html'
    email_template_name = 'registration/password_reset_email.html'
    subject_template_name = 'registration/password_reset_subject.txt'
    success_url = reverse_lazy('password_reset_done')
    
    def form_valid(self, form):
        """Add success message and send email"""
        response = super().form_valid(form)
        
        email = form.cleaned_data['email']
        messages.success(
            self.request, 
            f'Password reset instructions have been sent to {email}. '
            f'Please check your email and follow the instructions to reset your password.'
        )
        
        return response


class CustomPasswordResetDoneView(PasswordResetDoneView):
    """Custom password reset done view"""
    template_name = 'registration/password_reset_done.html'


class CustomPasswordResetConfirmView(PasswordResetConfirmView):
    """Custom password reset confirm view"""
    template_name = 'registration/password_reset_confirm.html'
    success_url = reverse_lazy('password_reset_complete')
    
    def form_valid(self, form):
        """Add success message after password reset"""
        response = super().form_valid(form)
        
        messages.success(
            self.request,
            '🎉 Your password has been successfully reset! You can now log in with your new password.'
        )
        
        return response


class CustomPasswordResetCompleteView(PasswordResetCompleteView):
    """Custom password reset complete view"""
    template_name = 'registration/password_reset_complete.html'


# Task 11: Custom Login View with Admin Redirect
class CustomLoginView(LoginView):
    """Custom login view that redirects based on user type"""
    template_name = 'registration/login.html'
    
    def get_success_url(self):
        """Determine redirect URL based on user type"""
        user = self.request.user
        
        # Check if user is admin/staff
        if user.is_superuser or user.is_staff:
            return '/admin-panel/'
        else:
            return '/app/'
    
    def form_valid(self, form):
        """Add success message based on user type"""
        response = super().form_valid(form)
        user = form.get_user()
        
        if user.is_superuser or user.is_staff:
            messages.success(self.request, f'Welcome to Admin Panel, {user.username}!')
        else:
            messages.success(self.request, f'Welcome back, {user.username}!')
            
        return response


# ───────────────────  Generate Tailored Resume with Pure LLM Intelligence  ──────────────────

@require_http_methods(["POST"])
@login_required(login_url="login")
def generate_tailored_resume_ajax(
    request: HttpRequest,
    resume_id: int,
    template_id: int
) -> JsonResponse:
    """Start resume generation with login protection - Task 14"""
    try:
        resume = get_object_or_404(Resume, id=resume_id, user=request.user)
        payload = json.loads(request.body or "{}")
        job_desc = payload.get("job_description", "")
        num_pg = payload.get("num_pages", 1)

        if len(job_desc.strip()) < 50:
            return JsonResponse({
                "error": "Job description must be at least 50 characters"
            }, status=400)

        tpl_meta = next((t for t in TEMPLATES_LIST if t["id"] == template_id), None)
        if not tpl_meta:
            return JsonResponse({"error": "Template not found"}, status=400)

        tpl_path = os.path.join(
            settings.BASE_DIR, "resume", "templates", "resume",
            "templates_repo", tpl_meta["filename"]
        )
        if not os.path.exists(tpl_path):
            return JsonResponse({"error": "Template file missing"}, status=400)

        template_html = open(tpl_path, encoding="utf-8").read()
        
        # Generate unique task ID
        task_id = str(uuid.uuid4())
        
        # Initialize progress tracking
        progress_key = f"resume_progress_{task_id}"
        cache.set(progress_key, {
            "progress": 0,
            "status": "starting",
            "message": "Initializing intelligent LLM-driven optimization...",
            "completed": False,
            "error": None,
            "result": None,
            "iteration": 0,
            "current_scores": {"ats": 0, "job": 0},
            "analysis_phase": "starting"
        }, timeout=1800)
        
        # Start background task with pure LLM intelligence
        threading.Thread(
            target=process_intelligent_resume_generation,
            args=(task_id, resume.extracted_text, job_desc, template_html, num_pg, request.user.id, resume_id, template_id),
            daemon=True
        ).start()

        return JsonResponse({
            "success": True,
            "task_id": task_id,
            "message": "Intelligent LLM optimization started - analyzing job requirements first"
        })
        
    except Exception as exc:
        logger.exception("Generation failed: %s", exc)
        return JsonResponse({"error": f"Generation failed: {exc}"}, status=500)


@login_required(login_url="login")
def check_progress(request: HttpRequest, task_id: str) -> JsonResponse:
    """Check progress with login protection - Task 14"""
    progress_key = f"resume_progress_{task_id}"
    progress_data = cache.get(progress_key)
    
    if not progress_data:
        return JsonResponse({"error": "Task not found"}, status=404)
    
    return JsonResponse(progress_data)


def process_intelligent_resume_generation(task_id: str, resume_text: str, job_desc: str, template_html: str, num_pages: int, user_id: int, resume_id: int, template_id: int):
    """Background task with intelligent LLM-driven analysis and optimization"""
    progress_key = f"resume_progress_{task_id}"
    
    def update_progress(progress: int, status: str, message: str, iteration: int = 0, scores: dict = None, result: dict = None, error: str = None, analysis_phase: str = ""):
        cache.set(progress_key, {
            "progress": progress,
            "status": status,
            "message": message,
            "completed": progress >= 100,
            "error": error,
            "result": result,
            "iteration": iteration,
            "current_scores": scores or {"ats": 0, "job": 0},
            "analysis_phase": analysis_phase
        }, timeout=1800)
    
    try:
        # Phase 1: Intelligent job analysis by LLM
        update_progress(10, "analyzing", "🧠 LLM analyzing job description to extract all requirements...", 0, {"ats": 0, "job": 0}, analysis_phase="job_analysis")
        
        job_analysis = analyze_job_with_llm(job_desc)
        if not job_analysis:
            raise Exception("Failed to analyze job description")
        
        update_progress(20, "analyzing", f"✅ Job analysis complete: {len(job_analysis.get('keywords', []))} keywords, {len(job_analysis.get('skills', []))} skills identified", 0, {"ats": 0, "job": 0}, analysis_phase="resume_analysis")
        
        # Phase 2: Intelligent resume analysis
        update_progress(25, "analyzing", "🔍 LLM analyzing original resume structure and content...", 0, {"ats": 0, "job": 0}, analysis_phase="resume_analysis")
        
        resume_analysis = analyze_resume_with_llm(resume_text)
        if not resume_analysis:
            raise Exception("Failed to analyze resume")
        
        update_progress(35, "optimizing", f"📋 Resume analysis complete: Identified {len(resume_analysis.get('sections', []))} sections. Starting optimization...", 0, {"ats": 0, "job": 0}, analysis_phase="optimization")
        
        # Phase 3: Unlimited intelligent optimization
        html_resume, ats_score, job_score, final_iteration = intelligent_resume_optimization(
            resume_text, job_desc, template_html, num_pages, job_analysis, resume_analysis,
            lambda p, m, i, s, phase: update_progress(35 + int(p * 0.6), "optimizing", m, i, s, analysis_phase=phase)
        )
        
        # Phase 4: Final validation
        update_progress(95, "validating", f"🎯 Optimization complete! ATS: {ats_score}%, Job: {job_score}% (Iterations: {final_iteration})", final_iteration, {"ats": ats_score, "job": job_score}, analysis_phase="complete")
        
        # Store results
        session_key = f"tailored_resume_{user_id}_{resume_id}"
        cache.set(session_key, {
            "tailored_resume": html_resume,
            "ats_score": ats_score,
            "job_score": job_score,
            "resume_id": resume_id,
            "template_id": template_id,
            "iterations_used": final_iteration,
            "job_analysis": job_analysis,
            "resume_analysis": resume_analysis
        }, timeout=3600)
        
        # Phase 5: Complete
        update_progress(100, "completed", f"🎉 TARGET ACHIEVED! ATS: {ats_score}%, Job: {job_score}% (Iterations: {final_iteration})", final_iteration, {"ats": ats_score, "job": job_score}, {
            "final_resume": html_resume,
            "ats_score": ats_score,
            "job_score": job_score,
            "session_key": session_key,
            "iterations_used": final_iteration,
            "job_analysis": job_analysis
        }, analysis_phase="complete")
        
    except Exception as e:
        logger.exception(f"Intelligent resume generation failed for task {task_id}: {e}")
        update_progress(0, "error", f"Generation failed: {str(e)}", error=str(e), analysis_phase="error")


def analyze_job_with_llm(job_desc: str) -> dict:
    """Let LLM intelligently analyze job description and extract all requirements"""
    
    # Use string concatenation instead of f-string to avoid formatting issues
    analysis_prompt = """You are an expert job analysis AI. Your task is to comprehensively analyze the following job description and extract ALL important elements that a resume should match.

JOB DESCRIPTION TO ANALYZE:
""" + job_desc + """

ANALYSIS REQUIREMENTS:
1. Extract the exact job title and any alternative titles
2. Identify ALL technical skills mentioned (programming languages, tools, frameworks, platforms, etc.)
3. Identify ALL soft skills and interpersonal requirements
4. Extract required qualifications, education, and experience levels
5. Identify key industry keywords and domain-specific terminology
6. Extract action verbs and achievement-oriented language used
7. Identify company values, culture keywords, and working style preferences
8. Determine the seniority level and career stage this role targets
9. Extract any certifications, methodologies, or specialized knowledge required
10. Identify measurement criteria and KPI-related terms

EXTRACTION INSTRUCTIONS:
- Be comprehensive - extract every skill, keyword, and requirement mentioned
- Include variations and synonyms (e.g., if "AI" is mentioned, also note "Artificial Intelligence")
- Capture both explicit requirements and implied needs
- Note the frequency/importance of different terms based on repetition
- Identify the primary vs secondary skills based on emphasis in the job description

OUTPUT FORMAT:
Return a detailed JSON object with the following structure:
{
    "job_title": "Primary job title",
    "alternative_titles": ["list of alternative titles or related roles"],
    "technical_skills": ["comprehensive list of all technical skills"],
    "soft_skills": ["all soft skills and interpersonal requirements"], 
    "programming_languages": ["all programming languages mentioned"],
    "tools_platforms": ["all tools, platforms, software mentioned"],
    "frameworks_libraries": ["all frameworks, libraries, APIs mentioned"],
    "methodologies": ["agile, scrum, devops, etc."],
    "certifications": ["any certifications or credentials mentioned"],
    "education_requirements": ["degree requirements, field of study, etc."],
    "experience_level": "entry/mid/senior level description",
    "key_keywords": ["most important keywords for ATS"],
    "action_verbs": ["action verbs used in job description"],
    "industry_terms": ["domain-specific terminology"],
    "company_values": ["culture and value keywords"],
    "measurements_kpis": ["metrics, KPIs, measurement terms"],
    "priority_skills": ["top 10 most important skills based on emphasis"],
    "nice_to_have": ["preferred but not required skills"],
    "total_analysis": "Brief summary of the role and key requirements"
}

Be thorough and extract everything that could be relevant for resume optimization."""

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": analysis_prompt}],
            temperature=0.1,
            max_tokens=2048,
            response_format={"type": "json_object"}
        )
        
        analysis = json.loads(response.choices[0].message.content)
        logger.info(f"Job analysis extracted {len(analysis.get('key_keywords', []))} keywords and {len(analysis.get('technical_skills', []))} technical skills")
        return analysis
        
    except Exception as e:
        logger.error(f"Job analysis failed: {e}")
        return None


def analyze_resume_with_llm(resume_text: str) -> dict:
    """Let LLM intelligently analyze the original resume structure and content"""
    
    # Use string concatenation to avoid f-string formatting issues
    analysis_prompt = """You are an expert resume analysis AI. Analyze the following resume and extract its complete structure, content, and optimization opportunities.

RESUME TO ANALYZE:
""" + resume_text + """

ANALYSIS REQUIREMENTS:
1. Identify all sections present in the resume (summary, experience, education, skills, projects, etc.)
2. Extract all work experiences with companies, titles, dates, and descriptions
3. Extract all educational qualifications with institutions, degrees, and dates
4. Extract all projects with descriptions and technologies
5. Identify current skills mentioned and categorize them
6. Extract contact information and personal details
7. Identify the current professional level and career focus
8. Analyze the writing style and language used
9. Identify strengths and areas for improvement
10. Determine which sections exist vs which are missing

EXTRACTION INSTRUCTIONS:
- Preserve all factual information exactly (names, companies, dates, institutions)
- Identify which sections have substantial content vs minimal content
- Note the current tone and style of writing
- Identify gaps where content could be enhanced
- Categorize existing skills and experiences

OUTPUT FORMAT:
Return a detailed JSON object:
{
    "personal_info": {
        "name": "exact name",
        "email": "email address", 
        "phone": "phone number",
        "location": "location/address"
    },
    "sections_present": ["list of all sections that exist"],
    "sections_with_content": ["sections that have substantial content"],
    "sections_minimal": ["sections with minimal content"],
    "work_experiences": [
        {
            "title": "exact job title",
            "company": "exact company name", 
            "dates": "employment dates",
            "description": "current description",
            "achievements": ["extracted achievements"]
        }
    ],
    "education": [
        {
            "degree": "exact degree name",
            "institution": "exact institution name",
            "dates": "education dates",
            "details": "additional details if any"
        }
    ],
    "projects": [
        {
            "title": "project title",
            "description": "project description",
            "technologies": ["technologies used"]
        }
    ],
    "current_skills": {
        "technical": ["current technical skills"],
        "soft": ["current soft skills"],
        "tools": ["tools and platforms"]
    },
    "professional_summary": "current summary/objective if present",
    "career_level": "assessment of seniority level",
    "writing_style": "description of current tone and style",
    "strengths": ["current resume strengths"],
    "improvement_areas": ["areas that need enhancement"],
    "total_analysis": "Overall assessment of the resume"
}

Preserve all factual information exactly while identifying optimization opportunities."""

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": analysis_prompt}],
            temperature=0.1,
            max_tokens=2048,
            response_format={"type": "json_object"}
        )
        
        analysis = json.loads(response.choices[0].message.content)
        logger.info(f"Resume analysis identified {len(analysis.get('sections_present', []))} sections and {len(analysis.get('work_experiences', []))} work experiences")
        return analysis
        
    except Exception as e:
        logger.error(f"Resume analysis failed: {e}")
        return None


def intelligent_resume_optimization(
    resume_text: str,
    job_desc: str, 
    template_html: str,
    num_pages: Optional[int] = None,
    job_analysis: dict = None,
    resume_analysis: dict = None,
    progress_callback = None
) -> Tuple[str, int, int, int]:
    """Pure LLM-driven intelligent resume optimization with unlimited iterations"""
    
    if not settings.OPENAI_API_KEY:
        logger.error("OpenAI key missing – using fallback")
        if progress_callback:
            progress_callback(100, "Using fallback resume generation...", 1, {"ats": 70, "job": 50}, "fallback")
        return _create_fallback_resume(resume_text, template_html), 70, 50, 1

    if progress_callback:
        progress_callback(0, "Preparing intelligent optimization strategy...", 0, {"ats": 0, "job": 0}, "preparation")

    # Create the master optimization prompt - using string concatenation to avoid f-string issues
    system_prompt = """You are the world's most advanced ATS resume optimization AI. Your mission is to achieve MINIMUM """ + str(TARGET_ATS_SCORE) + """% ATS score and """ + str(TARGET_JOB_SCORE) + """% job match through intelligent, data-driven optimization with STRICT page count adherence.

CRITICAL SUCCESS CRITERIA:
- ATS Score: MUST be ≥ """ + str(TARGET_ATS_SCORE) + """%
- Job Match Score: MUST be ≥ """ + str(TARGET_JOB_SCORE) + """%
- Page Count: MUST be EXACTLY """ + str(num_pages or 1) + """ page(s) - NO MORE, NO LESS
- If scores below target, provide specific, actionable improvement suggestions

PAGE COUNT ENFORCEMENT RULES:
- TARGET PAGES: """ + str(num_pages or 1) + """ page(s) EXACTLY
- MUST fill entire page(s) with NO blank spaces at bottom
- If content doesn't fill completely, ADD "Why Should You Hire Me?" section at the end
- Content density should be optimized for the exact page count specified
- Use appropriate spacing, bullet points, and formatting to achieve target length

JOB ANALYSIS RESULTS:
""" + (json.dumps(job_analysis, indent=2) if job_analysis else "No job analysis available") + """

RESUME ANALYSIS RESULTS:
""" + (json.dumps(resume_analysis, indent=2) if resume_analysis else "No resume analysis available") + """

INTELLIGENT OPTIMIZATION STRATEGY:

1. PRESERVE FACTUAL ACCURACY:
   - Keep personal information EXACTLY as in original (name, phone, email, location)
   - Keep job titles, company names, and institution names EXACTLY as in original
   - Keep employment dates and education dates EXACTLY as in original
   - Preserve the factual foundation while transforming presentation

2. AGGRESSIVE CONTENT TRANSFORMATION:
   - COMPLETELY REWRITE professional summary using job analysis keywords and requirements
   - Transform job descriptions to highlight achievements that match job requirements
   - Rewrite project descriptions to emphasize relevance to target role
   - ADD missing skills identified in job analysis
   - Use job-specific action verbs and terminology throughout
   - Quantify achievements with metrics and impact statements

3. INTELLIGENT SKILLS OPTIMIZATION:
   - COMPLETELY REPLACE skills section with job-relevant skills from analysis
   - Prioritize technical skills, programming languages, and tools from job requirements
   - Include soft skills and methodologies mentioned in job description
   - Organize skills by relevance and importance to the role
   - Ensure comprehensive coverage of job requirements

4. STRICT PAGE COUNT MANAGEMENT:
   - Calculate content length to fill EXACTLY """ + str(num_pages or 1) + """ page(s)
   - Expand or condense content as needed to meet page target
   - If pages not completely filled, ADD "Why Should You Hire Me?" section:
     * Question: "Why Should You Hire Me?"
     * Answer: 3-5 compelling bullet points based on tailored resume content
     * Highlight unique value proposition for the specific role
     * Emphasize key achievements and skills that match job requirements
   - Use strategic spacing and formatting to optimize page utilization

5. DYNAMIC SECTION HANDLING:
   - Only include sections that exist in original resume (based on resume analysis)
   - Place sections in optimal order: Summary → Experience → Projects (if exists) → Education → Skills → Why Hire Me? (if needed)
   - Remove any template conditional syntax and return clean HTML
   - Ensure every included section is fully optimized for the target role

6. KEYWORD INTEGRATION MASTERY:
   - Naturally integrate ALL priority keywords from job analysis
   - Use industry terminology and domain-specific language
   - Include company values and culture keywords where appropriate
   - Ensure proper keyword density for ATS optimization
   - Match the tone and style of the job description

7. SCORING OPTIMIZATION:
   - If ATS score low: Focus on keyword integration, formatting, section structure
   - If Job score low: Focus on content relevance, role-specific achievements, terminology
   - Provide specific suggestions for reaching target scores
   - Identify exact gaps and how to address them

PAGE ESTIMATION GUIDELINES:
- 1 page ≈ 500-650 words (tight formatting)
- 2 pages ≈ 900-1200 words (balanced formatting)
- 3 pages ≈ 1300-1800 words (detailed formatting)
- Adjust content density, bullet points, and spacing to achieve exact page target

"WHY SHOULD YOU HIRE ME?" SECTION FORMAT:
If additional content needed to fill pages completely, add this section:

<h2>Why Should You Hire Me?</h2>
<div class="section-content">
<ul>
<li>[Compelling reason 1 based on job requirements and resume achievements]</li>
<li>[Compelling reason 2 highlighting unique skills and experience]</li>
<li>[Compelling reason 3 emphasizing quantified results and impact]</li>
<li>[Compelling reason 4 showing cultural fit and role-specific expertise]</li>
<li>[Compelling reason 5 demonstrating value proposition for the company]</li>
</ul>
</div>

OUTPUT REQUIREMENTS:
Return JSON with:
- html_resume: Complete optimized HTML (EXACTLY """ + str(num_pages or 1) + """ page(s))
- ats_score: ATS compatibility score (0-100)
- job_score: Job match percentage (0-100)
- page_count_achieved: Actual page count of final resume
- page_utilization: Percentage of page space utilized
- improvements_needed: Specific suggestions if scores below target
- optimization_applied: Description of optimizations made
- sections_included: List of sections included in final resume
- keywords_integrated: Number of job keywords successfully integrated
- why_hire_me_added: Boolean indicating if "Why Should You Hire Me?" section was added

CRITICAL INSTRUCTIONS:
- MUST achieve EXACTLY """ + str(num_pages or 1) + """ page(s) - no exceptions
- Fill entire page space with no blank areas at bottom
- Use job analysis and resume analysis to make intelligent decisions
- Be aggressive in optimization while maintaining factual accuracy
- Every section should be transformed to match job requirements
- Skills section must be completely rewritten based on job needs
- Professional summary must perfectly align with job requirements
- Remove ALL template syntax and return clean HTML
- If content insufficient for target pages, ADD "Why Should You Hire Me?" section"""

    user_prompt = """
ORIGINAL RESUME:
""" + resume_text + """

TARGET JOB DESCRIPTION:
""" + job_desc + """

HTML TEMPLATE:
""" + template_html + """

STRICT PAGE REQUIREMENT: """ + str(num_pages or 1) + """ page(s) EXACTLY

OPTIMIZATION MISSION:
Using the comprehensive job analysis and resume analysis provided, intelligently transform this resume to achieve """ + str(TARGET_ATS_SCORE) + """%+ ATS score and """ + str(TARGET_JOB_SCORE) + """%+ job match with STRICT adherence to """ + str(num_pages or 1) + """ page(s).

SPECIFIC REQUIREMENTS:
1. Use job analysis to completely rewrite professional summary
2. Transform work experience descriptions to highlight job-relevant achievements  
3. Rewrite skills section based on job requirements (technical skills, tools, etc.)
4. Integrate priority keywords naturally throughout all sections
5. Only include sections that exist in original resume
6. Return clean HTML without any template conditionals
7. Ensure every section is optimized for the target role
8. MUST fill EXACTLY """ + str(num_pages or 1) + """ page(s) with NO blank space at bottom
9. If content insufficient, ADD "Why Should You Hire Me?" section to fill remaining space

PAGE COUNT ENFORCEMENT:
- Target: """ + str(num_pages or 1) + """ page(s) EXACTLY
- Expand content with more detailed bullet points if too short
- Add "Why Should You Hire Me?" section if needed to fill remaining space
- Use appropriate formatting and spacing to achieve target length
- NO blank spaces allowed at bottom of final page

Transform aggressively while preserving factual accuracy and achieving exact page count.
"""

    # Initialize tracking
    iteration = 0
    best_resume, best_ats, best_job = "", 0, 0
    conversation_history = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]

    # Unlimited intelligent optimization loop
    while True:
        iteration += 1
        
        try:
            if progress_callback:
                progress_callback(
                    min(95, 10 + (iteration * 3)), 
                    f"Iteration {iteration}: Intelligent optimization in progress...",
                    iteration,
                    {"ats": best_ats, "job": best_job},
                    "optimization"
                )
            
            # Call LLM for intelligent optimization
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=conversation_history,
                temperature=0.1,
                max_tokens=4096,
                response_format={"type": "json_object"}
            )
            
            data = json.loads(response.choices[0].message.content)
            ats_score = int(data.get("ats_score", 0))
            job_score = int(data.get("job_score", 0))
            html_resume = data.get("html_resume", "")
            page_count_achieved = data.get("page_count_achieved", 0)
            page_utilization = data.get("page_utilization", 0)
            improvements_needed = data.get("improvements_needed", [])
            optimization_applied = data.get("optimization_applied", "")
            sections_included = data.get("sections_included", [])
            keywords_integrated = data.get("keywords_integrated", 0)
            why_hire_me_added = data.get("why_hire_me_added", False)

            # Clean up HTML
            html_resume = post_process_html(html_resume, template_html)

            # Update best scores
            if html_resume and (ats_score > best_ats or job_score > best_job):
                best_resume, best_ats, best_job = html_resume, ats_score, job_score

            logger.info(f"Iteration {iteration}: ATS={ats_score}%, Job={job_score}%, Pages={page_count_achieved}, Utilization={page_utilization}%, WhyHireMe={why_hire_me_added}")

            # Check if target scores achieved AND page count is correct
            target_pages = num_pages or 1
            page_count_ok = page_count_achieved == target_pages
            scores_ok = ats_score >= TARGET_ATS_SCORE and job_score >= TARGET_JOB_SCORE
            
            if scores_ok and page_count_ok:
                if progress_callback:
                    progress_callback(95, f"🎉 TARGET ACHIEVED! ATS: {ats_score}%, Job: {job_score}%, Pages: {page_count_achieved}", iteration, {"ats": ats_score, "job": job_score}, "success")
                logger.info(f"ALL TARGETS ACHIEVED in {iteration} iterations: ATS={ats_score}%, Job={job_score}%, Pages={page_count_achieved}")
                return html_resume, ats_score, job_score, iteration

            # Safety check
            if iteration >= 50:
                logger.warning(f"Reached 50 iterations. Best: ATS={best_ats}%, Job={best_job}%")
                return best_resume or html_resume, best_ats or ats_score, best_job or job_score, iteration

            # Generate intelligent improvement strategy including page count
            improvement_strategy = generate_improvement_strategy_with_pages(
                ats_score, job_score, page_count_achieved, target_pages, page_utilization,
                improvements_needed, job_analysis, resume_analysis, iteration, why_hire_me_added
            )

            # Add to conversation for next iteration
            conversation_history.extend([
                {"role": "assistant", "content": json.dumps(data)},
                {"role": "user", "content": improvement_strategy}
            ])

            # Continue optimization
            time.sleep(0.1)

        except Exception as e:
            logger.error(f"Iteration {iteration} failed: {e}")
            if iteration == 1:
                if progress_callback:
                    progress_callback(95, "Using intelligent fallback...", 1, {"ats": 70, "job": 50}, "fallback")
                return _create_intelligent_fallback(resume_text, template_html, job_analysis, resume_analysis), 70, 50, 1
            else:
                return best_resume, best_ats, best_job, iteration


def generate_improvement_strategy_with_pages(
    ats_score: int, 
    job_score: int, 
    page_count_achieved: int, 
    target_pages: int, 
    page_utilization: int,
    improvements_needed: list, 
    job_analysis: dict, 
    resume_analysis: dict, 
    iteration: int,
    why_hire_me_added: bool
) -> str:
    """Generate intelligent improvement strategy including page count enforcement"""
    
    strategy_parts = [
        f"ITERATION {iteration} ANALYSIS:",
        f"- ATS Score: {ats_score}% (Target: {TARGET_ATS_SCORE}%+)",
        f"- Job Score: {job_score}% (Target: {TARGET_JOB_SCORE}%+)",
        f"- Page Count: {page_count_achieved}/{target_pages} pages (Target: EXACTLY {target_pages})",
        f"- Page Utilization: {page_utilization}% (Target: 100%)",
        f"- Why Hire Me Added: {why_hire_me_added}",
        "",
        "INTELLIGENT IMPROVEMENT STRATEGY:"
    ]
    
    # Page count enforcement
    if page_count_achieved != target_pages:
        if page_count_achieved < target_pages:
            strategy_parts.extend([
                f"📄 PAGE COUNT CRITICAL (UNDER TARGET):",
                f"- Current: {page_count_achieved} pages, Need: {target_pages} pages",
                "- EXPAND content in all sections with more detailed bullet points",
                "- Add more comprehensive project descriptions",
                "- Include additional quantified achievements in work experience",
                "- Add more detailed skills explanations",
                "- MUST add 'Why Should You Hire Me?' section to fill remaining space",
                "- Use strategic spacing and formatting to reach target pages"
            ])
        else:
            strategy_parts.extend([
                f"📄 PAGE COUNT CRITICAL (OVER TARGET):",
                f"- Current: {page_count_achieved} pages, Need: {target_pages} pages",
                "- CONDENSE content while maintaining quality",
                "- Use more concise bullet points",
                "- Optimize spacing and formatting",
                "- Combine related bullet points",
                "- Remove less critical details while keeping core achievements"
            ])
    
    # Page utilization optimization
    if page_utilization < 95:
        strategy_parts.extend([
            f"",
            f"📊 PAGE UTILIZATION IMPROVEMENT (Current: {page_utilization}%):",
            "- Fill remaining white space at bottom of pages",
            "- Add 'Why Should You Hire Me?' section if not already present",
            "- Expand existing sections with more content",
            "- Use better spacing distribution",
            "- Add more bullet points to work experience and projects"
        ])
    
    # ATS-specific improvements
    if ats_score < TARGET_ATS_SCORE:
        ats_gap = TARGET_ATS_SCORE - ats_score
        strategy_parts.extend([
            f"",
            f"🎯 ATS OPTIMIZATION (Need {ats_gap}% improvement):",
            "- Integrate more technical keywords from job analysis",
            "- Ensure all priority skills are included in skills section",
            "- Use exact terminology from job description",
            "- Improve section formatting and structure"
        ])
        
        if job_analysis:
            priority_skills = job_analysis.get('priority_skills', [])[:5]
            strategy_parts.append(f"- MUST include these priority skills: {', '.join(priority_skills)}")
    
    # Job match improvements  
    if job_score < TARGET_JOB_SCORE:
        job_gap = TARGET_JOB_SCORE - job_score
        strategy_parts.extend([
            f"",
            f"🎯 JOB MATCH OPTIMIZATION (Need {job_gap}% improvement):",
            "- Rewrite professional summary to mirror job requirements more closely",
            "- Transform work experience to highlight job-relevant achievements",
            "- Add more role-specific action verbs and terminology",
            "- Emphasize qualifications and experience that match job needs"
        ])
        
        if job_analysis:
            job_title = job_analysis.get('job_title', '')
            action_verbs = job_analysis.get('action_verbs', [])[:5]
            strategy_parts.extend([
                f"- Include job title terminology: {job_title}",
                f"- Use these action verbs: {', '.join(action_verbs)}"
            ])
    
    # Why Should You Hire Me section guidance
    if not why_hire_me_added and (page_count_achieved < target_pages or page_utilization < 90):
        strategy_parts.extend([
            f"",
            "💡 'WHY SHOULD YOU HIRE ME?' SECTION REQUIRED:",
            "- Add this section to fill remaining page space",
            "- Include 3-5 compelling bullet points",
            "- Highlight unique value proposition for the role",
            "- Emphasize quantified achievements and impact",
            "- Connect directly to job requirements and company needs",
            "- Use this format:",
            "  <h2>Why Should You Hire Me?</h2>",
            "  <div class='section-content'>",
            "  <ul>",
            "  <li>[Compelling reason based on job match]</li>",
            "  <li>[Unique skill/experience highlight]</li>",
            "  <li>[Quantified achievement/impact]</li>",
            "  <li>[Cultural fit/expertise demonstration]</li>",
            "  <li>[Value proposition for company]</li>",
            "  </ul>",
            "  </div>"
        ])
    
    # Specific improvements from LLM
    if improvements_needed:
        strategy_parts.extend([
            "",
            "📋 SPECIFIC IMPROVEMENTS NEEDED:",
            *[f"- {improvement}" for improvement in improvements_needed[:5]]
        ])
    
    # Advanced optimization based on analysis
    strategy_parts.extend([
        "",
        "🚀 ADVANCED OPTIMIZATION:",
        f"- Target EXACTLY {target_pages} page(s) with 100% utilization",
        "- Ensure every section contributes to job match",
        "- Use quantified achievements with metrics",
        "- Include industry-specific terminology",
        "- Optimize keyword density naturally",
        "- Match the tone and style of job description",
        "- NO blank spaces allowed at bottom of pages"
    ])
    
    # Page-specific recommendations
    if target_pages == 1:
        strategy_parts.extend([
            "",
            "📄 ONE-PAGE OPTIMIZATION:",
            "- Tight, concise formatting with no wasted space",
            "- 4-6 bullet points per work experience",
            "- Compact but comprehensive skills section",
            "- Brief but impactful professional summary"
        ])
    elif target_pages == 2:
        strategy_parts.extend([
            "",
            "📄 TWO-PAGE OPTIMIZATION:",
            "- Balanced content distribution across both pages",
            "- Detailed work experience descriptions",
            "- Comprehensive skills and projects sections",
            "- Extended professional summary if needed"
        ])
    elif target_pages >= 3:
        strategy_parts.extend([
            "",
            "📄 THREE+ PAGE OPTIMIZATION:",
            "- Detailed descriptions for all sections",
            "- Multiple bullet points per achievement",
            "- Comprehensive project descriptions",
            "- Detailed skills categorization",
            "- Extended 'Why Should You Hire Me?' section"
        ])
    
    return "\n".join(strategy_parts)


def post_process_html(html_resume: str, original_template: str) -> str:
    """Clean and validate the generated HTML"""
    
    # Remove any remaining template conditionals
    html_resume = re.sub(r'\{\{#if_\w+\}\}', '', html_resume)
    html_resume = re.sub(r'\{\{/if_\w+\}\}', '', html_resume)
    html_resume = re.sub(r'\{\{\w+\}\}', '', html_resume)
    
    # Ensure proper HTML structure
    if not html_resume.startswith('<!DOCTYPE html>'):
        # Extract style from original template
        style_match = re.search(r'<style>(.*?)</style>', original_template, re.DOTALL)
        style_content = style_match.group(1) if style_match else ""
        
        html_resume = f"""<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Optimized Resume</title>
<style>
{style_content}
</style>
</head>
<body>
{html_resume}
</body>
</html>"""
    
    # Clean up extra whitespace
    html_resume = re.sub(r'\n\s*\n\s*\n', '\n\n', html_resume)
    
    return html_resume


def _create_intelligent_fallback(resume_text: str, template_html: str, job_analysis: dict, resume_analysis: dict) -> str:
    """Create intelligent fallback using LLM analysis"""
    try:
        # Extract key information
        contact_info = resume_analysis.get('personal_info', {}) if resume_analysis else {}
        work_experiences = resume_analysis.get('work_experiences', []) if resume_analysis else []
        education = resume_analysis.get('education', []) if resume_analysis else []
        projects = resume_analysis.get('projects', []) if resume_analysis else []
        
        # Generate intelligent professional summary
        job_title = job_analysis.get('job_title', 'Professional') if job_analysis else 'Professional'
        priority_skills = job_analysis.get('priority_skills', [])[:5] if job_analysis else []
        
        if priority_skills:
            summary = f"Results-driven {job_title} with expertise in {', '.join(priority_skills)}. Proven track record of delivering impactful solutions and driving business growth through innovative approaches and technical excellence."
        else:
            summary = f"Experienced {job_title} with proven expertise and strong track record of delivering innovative solutions and driving organizational success."
        
        # Build sections HTML
        sections_html = []
        
        # Header and contact
        sections_html.append(f"""
<h1>{contact_info.get('name', 'Professional Candidate')}</h1>
<p class="contact">{contact_info.get('email', 'email@example.com')} • {contact_info.get('phone', '(555) 123-4567')} • {contact_info.get('location', 'Location')}</p>

<h2>Professional Summary</h2>
<div class="section-content">{summary}</div>""")
        
        # Work Experience
        if work_experiences:
            work_html = ""
            for exp in work_experiences[:4]:
                work_html += f"""
<div class="job-entry">
    <h3>{exp.get('title', 'Professional Role')} — {exp.get('company', 'Company')}</h3>
    <p><em>{exp.get('dates', 'Date Range')}</em></p>
    <ul>
        <li>Led strategic initiatives resulting in measurable business impact and operational improvements</li>
        <li>Collaborated with cross-functional teams to deliver high-quality solutions and achieve organizational objectives</li>
        <li>Implemented innovative approaches that enhanced efficiency and drove continuous improvement</li>
    </ul>
</div>"""
        else:
            work_html = """
<div class="job-entry">
    <h3>Professional Experience</h3>
    <ul><li>Extensive professional background with relevant industry experience and proven results</li></ul>
</div>"""
        
        sections_html.append(f"""
<h2>Work Experience</h2>
<div class="section-content">{work_html}</div>""")
        
        # Projects (if they exist)
        if projects:
            projects_html = ""
            for project in projects[:3]:
                projects_html += f"""
<div class="job-entry">
    <h3>{project.get('title', 'Project Title')}</h3>
    <ul><li>{project.get('description', 'Developed comprehensive solution addressing key technical and business requirements')}</li></ul>
</div>"""
            sections_html.append(f"""
<h2>Projects</h2>
<div class="section-content">{projects_html}</div>""")
        
        # Education
        if education:
            edu_html = ""
            for edu in education[:2]:
                edu_html += f"<p><strong>{edu.get('degree', 'Degree')}, {edu.get('institution', 'Institution')} — {edu.get('dates', 'Year')}</strong></p>"
        else:
            edu_html = "<p><strong>Relevant Education and Training</strong></p>"
        
        sections_html.append(f"""
<h2>Education</h2>
<div class="section-content">{edu_html}</div>""")
        
        # Optimized Skills
        if job_analysis:
            all_skills = []
            for skill_category in ['technical_skills', 'programming_languages', 'tools_platforms', 'frameworks_libraries', 'soft_skills']:
                all_skills.extend(job_analysis.get(skill_category, [])[:5])
            skills_text = ", ".join(all_skills[:20]) if all_skills else "Technical Skills, Problem Solving, Leadership, Communication, Project Management"
        else:
            skills_text = "Technical Skills, Problem Solving, Leadership, Communication, Project Management"
        
        sections_html.append(f"""
<h2>Skills</h2>
<div class="section-content">{skills_text}</div>""")
        
        # Extract style from template
        style_match = re.search(r'<style>(.*?)</style>', template_html, re.DOTALL)
        style_content = style_match.group(1) if style_match else ""
        
        # Combine all sections
        final_html = f"""<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Optimized Resume</title>
<style>
{style_content}
</style>
</head>
<body>
{''.join(sections_html)}
</body>
</html>"""
        
        return final_html
        
    except Exception as e:
        logger.error(f"Intelligent fallback failed: {e}")
        return template_html


# ───────────────────────  PDF Download  ───────────────────────

@login_required(login_url="login")
def download_pdf_ajax(request: HttpRequest, resume_id: int) -> HttpResponse:
    """Send tailored resume PDF with login protection - Task 14"""
    # Check download limits for non-superusers
    if not request.user.is_superuser:
        past_15 = now() - timedelta(days=15)
        count_15 = DownloadLog.objects.filter(
            user=request.user, downloaded__gte=past_15
        ).count()
        start_month = now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        count_month = DownloadLog.objects.filter(
            user=request.user, downloaded__gte=start_month
        ).count()

        if count_15 >= 3 or count_month >= 6:
            return JsonResponse({
                "error": "Download limit reached: 3 per 15 days, 6 per month."
            }, status=429)

    # Try to get from cache first
    session_key = f"tailored_resume_{request.user.id}_{resume_id}"
    session_data = cache.get(session_key)
    
    if session_data:
        html_resume = session_data.get("tailored_resume")
        iterations_used = session_data.get("iterations_used", "unknown")
    else:
        # Fallback to session
        html_resume = request.session.get("tailored_resume")
        iterations_used = "unknown"
    
    if not html_resume:
        return JsonResponse({"error": "Generate resume first"}, status=400)

    # Ensure this resume belongs to the user
    resume = get_object_or_404(Resume, id=resume_id, user=request.user)

    # Build filename with optimization info
    applicant = resume.user.username
    tpl_meta = next(
        (t for t in TEMPLATES_LIST if t["id"] == (session_data or request.session).get("template_id")),
        None
    )
    style = (tpl_meta["name"].split()[0] + " style") if tpl_meta else "style"
    safe = lambda s: re.sub(r"[^A-Za-z0-9 _-]+", "", s).strip().lower()
    filename = f"{safe(applicant)} - {safe(style)} - llm-optimized.pdf"

    # Render to PDF
    pdf_html = render_to_string("resume/pdf_template.html", {"final_resume": html_resume})
    pdf_file = HTML(string=pdf_html).write_pdf()

    # Log download
    DownloadLog.objects.create(user=request.user)

    # Send as attachment
    response = HttpResponse(pdf_file, content_type="application/pdf")
    response["Content-Disposition"] = f'attachment; filename="{filename}"'
    return response


# ─────────────────────  Template List AJAX  ─────────────────────

@login_required(login_url="login")
def get_templates_ajax(request: HttpRequest) -> JsonResponse:
    """Get templates with login protection - Task 14"""
    return JsonResponse({"templates": TEMPLATES_LIST})

# ────────────────────────  Resume API  ────────────────────────

class ResumeAPIView(View):
    """Resume API with login protection - Task 14"""
    
    def dispatch(self, request, *args, **kwargs):
        # Ensure user is logged in
        if not request.user.is_authenticated:
            return JsonResponse({"error": "Authentication required"}, status=401)
        return super().dispatch(request, *args, **kwargs)
    
    def get(self, request, resume_id=None):
        """Get resume(s) for the current user"""
        try:
            if resume_id:
                r = get_object_or_404(Resume, id=resume_id, user=request.user)
                return JsonResponse({
                    "id": r.id,
                    "filename": r.file.name,
                    "created_at": r.created_at.isoformat(),
                    "file_size": r.file_size,
                    "extracted_text": (
                        (r.extracted_text[:500] + "…")
                        if r.extracted_text and len(r.extracted_text) > 500
                        else r.extracted_text
                    )
                })
            
            # Get all resumes for user
            qs = Resume.objects.filter(user=request.user).order_by('-created_at')
            return JsonResponse({
                "resumes": [
                    {
                        "id": r.id,
                        "filename": r.file.name,
                        "created_at": r.created_at.isoformat(),
                        "file_size": r.file_size
                    }
                    for r in qs
                ]
            })
        except Exception as exc:
            logger.exception("API GET error: %s", exc)
            return JsonResponse({"error": str(exc)}, status=500)
    
    def delete(self, request, resume_id):
        """Delete a specific resume"""
        try:
            if not resume_id:
                return JsonResponse({"error": "Resume ID required"}, status=400)
            
            resume = get_object_or_404(Resume, id=resume_id, user=request.user)
            
            # Store filename for response
            filename = resume.file.name
            
            # Delete the file from storage
            if resume.file:
                try:
                    resume.file.delete(save=False)
                except Exception as e:
                    logger.warning(f"Failed to delete file {resume.file.name}: {e}")
            
            # Delete the database record
            resume.delete()
            
            logger.info(f"Resume {resume_id} ({filename}) deleted by user {request.user.id}")
            
            return JsonResponse({
                "success": True,
                "message": f"Resume '{filename}' deleted successfully",
                "deleted_id": resume_id
            })
            
        except Resume.DoesNotExist:
            return JsonResponse({"error": "Resume not found"}, status=404)
        except Exception as exc:
            logger.exception("Resume deletion failed: %s", exc)
            return JsonResponse({"error": f"Failed to delete resume: {str(exc)}"}, status=500)
    
    # def put(self, request, resume_id):
    #     """Update resume metadata (optional enhancement)"""
    #     try:
    #         resume = get_object_or_404(Resume, id=resume_id, user=request.user)
            
    #         # Parse JSON data
    #         try:
    #             data = json.loads(request.body)
    #         except json.JSONDecodeError:
    #             return JsonResponse({"error": "Invalid JSON data"}, status=400)
            
    #         # Update allowed fields (you can extend this)
    #         updated_fields = []
            
    #         # Example: Allow updating a custom name/title
    #         if 'title' in data:
    #             # You'd need to add a title field to your Resume model first
    #             # resume.title = data['title']
    #             # updated_fields.append('title')
    #             pass
            
    #         if updated_fields:
    #             resume.save(update_fields=updated_fields)
    #             return JsonResponse({
    #                 "success": True,
    #                 "message": f"Resume updated: {', '.join(updated_fields)}",
    #                 "updated_fields": updated_fields
    #             })
    #         else:
    #             return JsonResponse({"message": "No fields to update"})
                
    #     except Resume.DoesNotExist:
    #         return JsonResponse({"error": "Resume not found"}, status=404)
    #     except Exception as exc:
    #         logger.exception("Resume update failed: %s", exc)
    #         return JsonResponse({"error": f"Failed to update resume: {str(exc)}"}, status=500)


# ─────────────────────  Initial Analysis AJAX  ─────────────────────

@require_http_methods(["POST"])
@login_required(login_url="login")
def analyze_resume_ajax(request: HttpRequest) -> JsonResponse:
    try:
        data = json.loads(request.body)
        job_desc = data.get("job_description", "")
        
        # Let LLM do the analysis
        job_analysis = analyze_job_with_llm(job_desc)
        
        if job_analysis:
            return JsonResponse({
                "missing_keywords": job_analysis.get('key_keywords', [])[:10],
                "action_items": [
                    f"Add {job_analysis.get('job_title', 'target role')} terminology",
                    f"Include {len(job_analysis.get('technical_skills', []))} technical skills",
                    f"Integrate {len(job_analysis.get('priority_skills', []))} priority requirements"
                ]
            })
        else:
            return JsonResponse({
                "missing_keywords": ["Analysis pending"],
                "action_items": [
                    "Comprehensive job analysis in progress",
                    "Technical skills extraction pending",
                    "Keywords identification in progress"
                ]
            })
    except Exception as e:
        logger.error(f"Analysis failed: {e}")
        return JsonResponse({"error": "Initial analysis failed"}, status=500)


# ─────────────────────  Manual Resume Entry Views  ─────────────────────

@login_required
def manual_resume_create(request):
    """Create a new manual resume with login protection - Task 14"""
    try:
        from .models import ManualResume
        
        if request.method == 'POST':
            form = ManualResumeForm(request.POST)
            if form.is_valid():
                resume = form.save(commit=False)
                resume.user = request.user
                resume.save()
                messages.success(request, 'Basic information saved! Now add your education and experience.')
                return redirect('manual_resume_edit', resume_id=resume.id)
            else:
                # Add form errors to messages
                for field, errors in form.errors.items():
                    for error in errors:
                        messages.error(request, f'{field.title()}: {error}')
        else:
            form = ManualResumeForm()
            
    except ImportError:
        messages.warning(request, 'Manual resume models not yet migrated. Please run migrations first.')
        form = ManualResumeForm()
        
        if request.method == 'POST':
            if form.is_valid():
                messages.info(request, 'Form validation successful! Please run migrations to save data.')
                return redirect('dashboard')
    
    return render(request, 'resume/manual_entry/create.html', {
        'form': form,
    })


@login_required
def manual_resume_edit(request, resume_id):
    """Edit manual resume with login protection - Task 14"""
    try:
        from .models import ManualResume
        from .forms import (EducationFormSet, WorkExperienceFormSet, 
                           ProjectFormSet, SkillFormSet, CertificationFormSet, LanguageFormSet)
        
        resume = get_object_or_404(ManualResume, id=resume_id, user=request.user)
        
        if request.method == 'POST':
            form = ManualResumeForm(request.POST, instance=resume)
            education_formset = EducationFormSet(request.POST, instance=resume, prefix='education')
            work_formset = WorkExperienceFormSet(request.POST, instance=resume, prefix='work')
            project_formset = ProjectFormSet(request.POST, instance=resume, prefix='projects')
            skill_formset = SkillFormSet(request.POST, instance=resume, prefix='skills')
            cert_formset = CertificationFormSet(request.POST, instance=resume, prefix='certifications')
            lang_formset = LanguageFormSet(request.POST, instance=resume, prefix='languages')
            
            # Validate all forms
            forms_valid = True
            
            if not form.is_valid():
                forms_valid = False
                for field, errors in form.errors.items():
                    for error in errors:
                        messages.error(request, f'Personal Info - {field.title()}: {error}')
            
            if not education_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(education_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Education #{i+1} - {field.title()}: {error}')
            
            if not work_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(work_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Work Experience #{i+1} - {field.title()}: {error}')
            
            if not project_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(project_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Project #{i+1} - {field.title()}: {error}')
            
            if not skill_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(skill_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Skill #{i+1} - {field.title()}: {error}')
            
            if not cert_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(cert_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Certification #{i+1} - {field.title()}: {error}')
            
            if not lang_formset.is_valid():
                forms_valid = False
                for i, form_errors in enumerate(lang_formset.errors):
                    for field, errors in form_errors.items():
                        for error in errors:
                            messages.error(request, f'Language #{i+1} - {field.title()}: {error}')
            
            # Check formset non-form errors
            if education_formset.non_form_errors():
                forms_valid = False
                for error in education_formset.non_form_errors():
                    messages.error(request, f'Education: {error}')
            
            if work_formset.non_form_errors():
                forms_valid = False
                for error in work_formset.non_form_errors():
                    messages.error(request, f'Work Experience: {error}')
            
            if project_formset.non_form_errors():
                forms_valid = False
                for error in project_formset.non_form_errors():
                    messages.error(request, f'Projects: {error}')
            
            if skill_formset.non_form_errors():
                forms_valid = False
                for error in skill_formset.non_form_errors():
                    messages.error(request, f'Skills: {error}')
            
            if cert_formset.non_form_errors():
                forms_valid = False
                for error in cert_formset.non_form_errors():
                    messages.error(request, f'Certifications: {error}')
            
            if lang_formset.non_form_errors():
                forms_valid = False
                for error in lang_formset.non_form_errors():
                    messages.error(request, f'Languages: {error}')
            
            if forms_valid:
                with transaction.atomic():
                    try:
                        resume = form.save()
                        education_formset.save()
                        work_formset.save()
                        project_formset.save()
                        skill_formset.save()
                        cert_formset.save()
                        lang_formset.save()
                        
                        resume.is_complete = True
                        resume.save()
                        
                        messages.success(request, 'Resume saved successfully!')
                        return redirect('manual_resume_preview', resume_id=resume.id)
                    except Exception as e:
                        messages.error(request, f'Error saving resume: {str(e)}')
            else:
                messages.error(request, 'Please correct the errors above and try again.')
        else:
            form = ManualResumeForm(instance=resume)
            education_formset = EducationFormSet(instance=resume, prefix='education')
            work_formset = WorkExperienceFormSet(instance=resume, prefix='work')
            project_formset = ProjectFormSet(instance=resume, prefix='projects')
            skill_formset = SkillFormSet(instance=resume, prefix='skills')
            cert_formset = CertificationFormSet(instance=resume, prefix='certifications')
            lang_formset = LanguageFormSet(instance=resume, prefix='languages')
        
        return render(request, 'resume/manual_entry/full_form.html', {
            'form': form,
            'education_formset': education_formset,
            'work_formset': work_formset,
            'project_formset': project_formset,
            'skill_formset': skill_formset,
            'cert_formset': cert_formset,
            'lang_formset': lang_formset,
            'resume': resume,
        })
        
    except ImportError:
        messages.error(request, 'Manual resume models not available. Please run migrations first.')
        return redirect('dashboard')
    except Exception as e:
        messages.error(request, f'An error occurred: {str(e)}')
        return redirect('dashboard')
        


@login_required
def manual_resume_preview(request, resume_id):
    """Preview the completed manual resume"""
    try:
        from .models import ManualResume
        resume = get_object_or_404(ManualResume, id=resume_id, user=request.user)
        
        return render(request, 'resume/manual_entry/preview.html', {
            'resume': resume,
        })
        
    except ImportError:
        messages.error(request, 'Manual resume models not available. Please run migrations first.')
        return redirect('dashboard')


@login_required
def manual_resume_list(request):
    """List all manual resumes for the current user"""
    try:
        from .models import ManualResume
        resumes = ManualResume.objects.filter(user=request.user)
        
        return render(request, 'resume/manual_entry/list.html', {
            'resumes': resumes,
        })
        
    except ImportError:
        messages.info(request, 'Manual resume functionality will be available after running migrations.')
        return render(request, 'resume/manual_entry/list.html', {
            'resumes': [],
        })


@login_required
def manual_resume_delete(request, resume_id):
    """Delete a manual resume"""
    try:
        from .models import ManualResume
        resume = get_object_or_404(ManualResume, id=resume_id, user=request.user)
        
        if request.method == 'POST':
            resume.delete()
            messages.success(request, 'Resume deleted successfully.')
            return redirect('manual_resume_list')
        
        return render(request, 'resume/manual_entry/confirm_delete.html', {
            'resume': resume,
        })
        
    except ImportError:
        messages.error(request, 'Manual resume models not available. Please run migrations first.')
        return redirect('dashboard')


@login_required
def convert_manual_to_tailored(request, resume_id):
    """Convert manual resume to the tailored resume format for template generation"""
    try:
        from .models import ManualResume
        resume = get_object_or_404(ManualResume, id=resume_id, user=request.user)
        
        if not resume.is_complete:
            messages.error(request, 'Please complete your resume before generating templates.')
            return redirect('manual_resume_edit', resume_id=resume_id)
        
        resume_text = generate_resume_text(resume)
        
        template_resume = Resume.objects.create(
            user=request.user,
            extracted_text=resume_text,
            file_size_bytes=len(resume_text.encode('utf-8'))
        )
        
        request.session['manual_resume_id'] = resume_id
        request.session['converted_resume_id'] = template_resume.id
        
        messages.success(request, 'Resume converted! Now you can select a template and generate your tailored resume.')
        return redirect('dashboard')
        
    except ImportError:
        messages.error(request, 'Manual resume models not available. Please run migrations first.')
        return redirect('dashboard')


def generate_resume_text(manual_resume):
    """Convert ManualResume object to text format for LLM processing"""
    text_parts = []
    
    # Personal Information
    text_parts.append(f"Name: {manual_resume.full_name}")
    text_parts.append(f"Title: {manual_resume.professional_title}")
    text_parts.append(f"Email: {manual_resume.email}")
    text_parts.append(f"Phone: {manual_resume.phone}")
    text_parts.append(f"Location: {manual_resume.city}, {manual_resume.state_province}, {manual_resume.country}")
    
    if manual_resume.linkedin_url:
        text_parts.append(f"LinkedIn: {manual_resume.linkedin_url}")
    if manual_resume.portfolio_url:
        text_parts.append(f"Portfolio: {manual_resume.portfolio_url}")
    
    text_parts.append(f"\nProfessional Summary:\n{manual_resume.professional_summary}")
    
    # Education
    if manual_resume.education_entries.exists():
        text_parts.append("\nEducation:")
        for edu in manual_resume.education_entries.all():
            end_date = edu.end_date.strftime("%B %Y") if edu.end_date else "Present"
            text_parts.append(
                f"• {edu.degree_name}, {edu.institution_name}, {edu.institution_city}, {edu.institution_country} "
                f"({edu.start_date.strftime('%B %Y')} - {end_date})"
            )
            if edu.gpa:
                text_parts.append(f"  GPA: {edu.gpa}")
            if edu.relevant_coursework:
                text_parts.append(f"  Relevant Coursework: {edu.relevant_coursework}")
    
    # Work Experience
    if manual_resume.work_experiences.exists():
        text_parts.append("\nWork Experience:")
        for work in manual_resume.work_experiences.all():
            end_date = work.end_date.strftime("%B %Y") if work.end_date else "Present"
            text_parts.append(
                f"• {work.job_title} at {work.company_name}, {work.company_city}, {work.company_country} "
                f"({work.start_date.strftime('%B %Y')} - {end_date})"
            )
            text_parts.append(f"  {work.responsibilities}")
    
    # Projects
    if manual_resume.projects.exists():
        text_parts.append("\nProjects:")
        for project in manual_resume.projects.all():
            end_date = project.end_date.strftime("%B %Y") if project.end_date else "Ongoing"
            text_parts.append(
                f"• {project.title} - {project.role} "
                f"({project.start_date.strftime('%B %Y')} - {end_date})"
            )
            text_parts.append(f"  {project.description}")
            if project.demo_url:
                text_parts.append(f"  Demo: {project.demo_url}")
    
    # Skills
    if manual_resume.skills.exists():
        text_parts.append("\nSkills:")
        skills_by_type = {}
        for skill in manual_resume.skills.all():
            if skill.skill_type not in skills_by_type:
                skills_by_type[skill.skill_type] = []
            skills_by_type[skill.skill_type].append(f"{skill.name} ({skill.proficiency})")
        
        for skill_type, skills in skills_by_type.items():
            text_parts.append(f"• {skill_type.title()}: {', '.join(skills)}")
    
    # Certifications
    if manual_resume.certifications.exists():
        text_parts.append("\nCertifications:")
        for cert in manual_resume.certifications.all():
            exp_date = f" (Expires: {cert.expiration_date.strftime('%B %Y')})" if cert.expiration_date else ""
            text_parts.append(
                f"• {cert.name}, {cert.issuing_organization} "
                f"({cert.date_obtained.strftime('%B %Y')}){exp_date}"
            )
    
    # Languages
    if manual_resume.languages.exists():
        text_parts.append("\nLanguages:")
        for lang in manual_resume.languages.all():
            text_parts.append(f"• {lang.name} ({lang.proficiency})")
    
    # Volunteer Experience
    if manual_resume.volunteer_experiences.exists():
        text_parts.append("\nVolunteer Experience:")
        for vol in manual_resume.volunteer_experiences.all():
            end_date = vol.end_date.strftime("%B %Y") if vol.end_date else "Present"
            text_parts.append(
                f"• {vol.role_title} at {vol.organization_name}, {vol.city}, {vol.country} "
                f"({vol.start_date.strftime('%B %Y')} - {end_date})"
            )
            text_parts.append(f"  {vol.responsibilities}")
    
    return "\n".join(text_parts)


# ─────────────────────  Fallback Resume Creation  ─────────────────────

def _create_fallback_resume(resume_text: str, template_html: str) -> str:
    """Simple fallback resume creation"""
    try:
        # Extract basic info using simple patterns
        lines = [line.strip() for line in resume_text.split('\n') if line.strip()]
        
        # Find name (usually first non-empty line)
        name = lines[0] if lines else "Professional Candidate"
        
        # Find email and phone
        email_match = re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', resume_text)
        phone_match = re.search(r'[\+]?[\d\s\-\(\)]{10,}', resume_text)
        
        # Simple replacements
        replacements = {
            "{{NAME}}": name,
            "{{EMAIL}}": email_match.group() if email_match else "email@example.com",
            "{{PHONE}}": phone_match.group() if phone_match else "(555) 123-4567",
            "{{LOCATION}}": "Location",
            "{{SUMMARY}}": "Results-driven professional with proven expertise and strong analytical skills.",
            "{{WORK_EXPERIENCE}}": "<div class='job-entry'><h3>Professional Experience</h3><ul><li>Extensive background with relevant experience</li></ul></div>",
            "{{EDUCATION}}": "<p><strong>Relevant Education</strong></p>",
            "{{SKILLS}}": "Technical Skills, Problem Solving, Leadership, Communication, Project Management",
            "{{PROJECTS}}": "<div class='job-entry'><h3>Professional Projects</h3><ul><li>Relevant project experience</li></ul></div>"
        }
        
        # Apply replacements
        result = template_html
        for placeholder, value in replacements.items():
            result = result.replace(placeholder, value)
        
        # Remove any remaining placeholders and conditionals
        result = re.sub(r'\{\{[^}]+\}\}', '', result)
        result = re.sub(r'\{\{#if_\w+\}\}', '', result)
        result = re.sub(r'\{\{/if_\w+\}\}', '', result)
        
        return result
        
    except Exception as e:
        logger.error(f"Fallback resume creation failed: {e}")
        return template_html


# ─────────────────────  Admin Views  ─────────────────────

User = get_user_model()

def is_admin_user(user):
    """Check if user is admin"""
    return user.is_authenticated and (user.is_superuser or user.is_staff)

@user_passes_test(is_admin_user, login_url='login')
def admin_dashboard(request):
    """Main admin dashboard with statistics and overview"""
    
    # Get statistics
    total_users = User.objects.count()
    total_resumes = Resume.objects.count()
    total_manual_resumes = 0
    try:
        total_manual_resumes = ManualResume.objects.count()
    except:
        pass
    
    total_downloads = DownloadLog.objects.count()
    
    # Recent activity (last 30 days)
    thirty_days_ago = timezone.now() - timedelta(days=30)
    recent_users = User.objects.filter(date_joined__gte=thirty_days_ago).count()
    recent_resumes = Resume.objects.filter(created_at__gte=thirty_days_ago).count()
    recent_downloads = DownloadLog.objects.filter(downloaded__gte=thirty_days_ago).count()
    
    # Weekly activity for charts
    weekly_stats = []
    for i in range(7):
        date = timezone.now() - timedelta(days=i)
        daily_users = User.objects.filter(date_joined__date=date.date()).count()
        daily_resumes = Resume.objects.filter(created_at__date=date.date()).count()
        daily_downloads = DownloadLog.objects.filter(downloaded__date=date.date()).count()
        
        weekly_stats.append({
            'date': date.strftime('%Y-%m-%d'),
            'users': daily_users,
            'resumes': daily_resumes,
            'downloads': daily_downloads,
        })
    
    # Top users by activity
    top_users = User.objects.annotate(
        resume_count=Count('resumes'),
        download_count=Count('downloads')
    ).order_by('-resume_count', '-download_count')[:10]
    
    # System settings
    current_settings = {
        'TARGET_ATS_SCORE': getattr(settings, 'TARGET_ATS_SCORE', 92),
        'TARGET_JOB_SCORE': getattr(settings, 'TARGET_JOB_SCORE', 92),
        'DOWNLOADS_PER_15_DAYS': getattr(settings, 'DOWNLOADS_PER_15_DAYS', 3),
        'DOWNLOADS_PER_MONTH': getattr(settings, 'DOWNLOADS_PER_MONTH', 6),
        'MAX_FILE_SIZE_MB': getattr(settings, 'MAX_FILE_SIZE_MB', 10),
    }
    
    context = {
        'total_users': total_users,
        'total_resumes': total_resumes,
        'total_manual_resumes': total_manual_resumes,
        'total_downloads': total_downloads,
        'recent_users': recent_users,
        'recent_resumes': recent_resumes,
        'recent_downloads': recent_downloads,
        'weekly_stats': json.dumps(weekly_stats),
        'top_users': top_users,
        'current_settings': current_settings,
    }
    
    return render(request, 'admin/dashboard.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_users(request):
    """User management page"""
    
    # Search and filter
    search_query = request.GET.get('search', '')
    filter_type = request.GET.get('filter', 'all')
    
    users = User.objects.select_related('profile').annotate(
        resume_count=Count('resumes'),
        download_count=Count('downloads')
    )
    
    if search_query:
        users = users.filter(
            Q(username__icontains=search_query) |
            Q(email__icontains=search_query) |
            Q(first_name__icontains=search_query) |
            Q(last_name__icontains=search_query)
        )
    
    if filter_type == 'active':
        thirty_days_ago = timezone.now() - timedelta(days=30)
        users = users.filter(last_login__gte=thirty_days_ago)
    elif filter_type == 'inactive':
        thirty_days_ago = timezone.now() - timedelta(days=30)
        users = users.filter(Q(last_login__lt=thirty_days_ago) | Q(last_login__isnull=True))
    elif filter_type == 'staff':
        users = users.filter(is_staff=True)
    
    # Pagination
    paginator = Paginator(users.order_by('-date_joined'), 25)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'search_query': search_query,
        'filter_type': filter_type,
        'total_users': users.count(),
    }
    
    return render(request, 'admin/users.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_user_detail(request, user_id):
    """User detail and edit page"""
    
    user = get_object_or_404(User, id=user_id)
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'update_limits':
            # Update user download limits (store in session or user profile)
            downloads_15_days = int(request.POST.get('downloads_15_days', 3))
            downloads_month = int(request.POST.get('downloads_month', 6))
            
            # Store in user profile or session
            if hasattr(user, 'profile'):
                profile = user.profile
            else:
                profile, created = Profile.objects.get_or_create(user=user)
            
            # Add custom fields to profile if needed
            request.session[f'user_{user.id}_download_limits'] = {
                'per_15_days': downloads_15_days,
                'per_month': downloads_month
            }
            
            messages.success(request, f'Download limits updated for {user.username}')
            
        elif action == 'toggle_staff':
            user.is_staff = not user.is_staff
            user.save()
            status = 'granted' if user.is_staff else 'removed'
            messages.success(request, f'Staff access {status} for {user.username}')
            
        elif action == 'toggle_active':
            user.is_active = not user.is_active
            user.save()
            status = 'activated' if user.is_active else 'deactivated'
            messages.success(request, f'Account {status} for {user.username}')
            
        elif action == 'delete_user':
            if user != request.user:  # Don't allow self-deletion
                username = user.username
                user.delete()
                messages.success(request, f'User {username} deleted successfully')
                return redirect('admin_users')
            else:
                messages.error(request, 'Cannot delete your own account')
    
    # Get user statistics
    user_resumes = Resume.objects.filter(user=user)
    user_downloads = DownloadLog.objects.filter(user=user)
    
    try:
        user_manual_resumes = ManualResume.objects.filter(user=user)
    except:
        user_manual_resumes = []
    
    # Get current download limits
    custom_limits = request.session.get(f'user_{user.id}_download_limits', {
        'per_15_days': 3,
        'per_month': 6
    })
    
    context = {
        'user_obj': user,  # Renamed to avoid conflict with request.user
        'user_resumes': user_resumes,
        'user_downloads': user_downloads.order_by('-downloaded')[:10],
        'user_manual_resumes': user_manual_resumes,
        'total_resumes': user_resumes.count(),
        'total_downloads': user_downloads.count(),
        'total_manual_resumes': len(user_manual_resumes),
        'custom_limits': custom_limits,
    }
    
    return render(request, 'admin/user_detail.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_settings(request):
    """System settings management"""
    
    if request.method == 'POST':
        # Update environment-based settings
        new_settings = {
            'TARGET_ATS_SCORE': int(request.POST.get('target_ats_score', 92)),
            'TARGET_JOB_SCORE': int(request.POST.get('target_job_score', 92)),
            'DOWNLOADS_PER_15_DAYS': int(request.POST.get('downloads_15_days', 3)),
            'DOWNLOADS_PER_MONTH': int(request.POST.get('downloads_month', 6)),
            'MAX_FILE_SIZE_MB': int(request.POST.get('max_file_size', 10)),
            'LLM_MAX_TOKENS': int(request.POST.get('llm_max_tokens', 4096)),
            'LLM_TEMPERATURE': float(request.POST.get('llm_temperature', 0.2)),
            'LLM_MAX_ITERATIONS': int(request.POST.get('llm_max_iterations', 3)),
        }
        
        # Store settings in session for runtime use
        request.session['admin_settings'] = new_settings
        
        # Update env file
        update_env_file(new_settings)
        
        messages.success(request, 'Settings updated successfully! Restart the application for all changes to take effect.')
    
    # Get current settings
    current_settings = {
        'TARGET_ATS_SCORE': getattr(settings, 'TARGET_ATS_SCORE', 92),
        'TARGET_JOB_SCORE': getattr(settings, 'TARGET_JOB_SCORE', 92),
        'DOWNLOADS_PER_15_DAYS': getattr(settings, 'DOWNLOADS_PER_15_DAYS', 3),
        'DOWNLOADS_PER_MONTH': getattr(settings, 'DOWNLOADS_PER_MONTH', 6),
        'MAX_FILE_SIZE_MB': getattr(settings, 'MAX_FILE_SIZE_MB', 10),
        'LLM_MAX_TOKENS': getattr(settings, 'LLM_MAX_TOKENS', 4096),
        'LLM_TEMPERATURE': getattr(settings, 'LLM_TEMPERATURE', 0.2),
        'LLM_MAX_ITERATIONS': getattr(settings, 'LLM_MAX_ITERATIONS', 3),
    }
    
    # Override with session settings if available
    session_settings = request.session.get('admin_settings', {})
    current_settings.update(session_settings)
    
    context = {
        'settings': current_settings,
    }
    
    return render(request, 'admin/settings.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_create_user(request):
    """Create new user account"""
    
    if request.method == 'POST':
        form = CustomSignupForm(request.POST)
        if form.is_valid():
            user = form.save()
            
            # Set additional permissions if specified
            if request.POST.get('is_staff'):
                user.is_staff = True
                user.save()
            
            messages.success(request, f'User {user.username} created successfully!')
            return redirect('admin_user_detail', user_id=user.id)
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f'{field.title()}: {error}')
    else:
        form = CustomSignupForm()
    
    context = {
        'form': form,
    }
    
    return render(request, 'admin/create_user.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_analytics(request):
    """Analytics and reports page"""
    
    # Date range filter
    days = int(request.GET.get('days', 30))
    start_date = timezone.now() - timedelta(days=days)
    
    # User registration trends
    registration_data = []
    for i in range(days):
        date = start_date + timedelta(days=i)
        daily_registrations = User.objects.filter(date_joined__date=date.date()).count()
        registration_data.append({
            'date': date.strftime('%Y-%m-%d'),
            'count': daily_registrations
        })
    
    # Resume creation trends
    resume_data = []
    for i in range(days):
        date = start_date + timedelta(days=i)
        daily_resumes = Resume.objects.filter(created_at__date=date.date()).count()
        resume_data.append({
            'date': date.strftime('%Y-%m-%d'),
            'count': daily_resumes
        })
    
    # Download trends
    download_data = []
    for i in range(days):
        date = start_date + timedelta(days=i)
        daily_downloads = DownloadLog.objects.filter(downloaded__date=date.date()).count()
        download_data.append({
            'date': date.strftime('%Y-%m-%d'),
            'count': daily_downloads
        })
    
    # Top performing users
    top_users = User.objects.annotate(
        total_resumes=Count('resumes'),
        total_downloads=Count('downloads')
    ).order_by('-total_resumes', '-total_downloads')[:20]
    
    # Geographic distribution (if available)
    try:
        country_stats = Profile.objects.values('country').annotate(
            count=Count('user')
        ).order_by('-count')[:10]
    except:
        country_stats = []
    
    context = {
        'days': days,
        'registration_data': json.dumps(registration_data),
        'resume_data': json.dumps(resume_data),
        'download_data': json.dumps(download_data),
        'top_users': top_users,
        'country_stats': country_stats,
    }
    
    return render(request, 'admin/analytics.html', context)

@user_passes_test(is_admin_user, login_url='login')
def admin_system_logs(request):
    """System logs and monitoring"""
    
    # Read log files if available
    log_entries = []
    log_file_path = os.path.join(settings.BASE_DIR, 'logs', 'django.log')
    
    try:
        if os.path.exists(log_file_path):
            with open(log_file_path, 'r') as f:
                lines = f.readlines()
                # Get last 100 lines
                recent_lines = lines[-100:] if len(lines) > 100 else lines
                for line in reversed(recent_lines):
                    if line.strip():
                        log_entries.append(line.strip())
    except Exception as e:
        log_entries.append(f"Error reading log file: {str(e)}")
    
    # System status
    system_status = {
        'total_users': User.objects.count(),
        'active_users_today': User.objects.filter(last_login__date=timezone.now().date()).count(),
        'total_resumes': Resume.objects.count(),
        'resumes_today': Resume.objects.filter(created_at__date=timezone.now().date()).count(),
        'total_downloads': DownloadLog.objects.count(),
        'downloads_today': DownloadLog.objects.filter(downloaded__date=timezone.now().date()).count(),
    }
    
    context = {
        'log_entries': log_entries[:50],  # Show last 50 entries
        'system_status': system_status,
    }
    
    return render(request, 'admin/system_logs.html', context)

def update_env_file(new_settings):
    """Update .env file with new settings"""
    try:
        env_path = os.path.join(settings.BASE_DIR, '.env')
        
        # Read current .env file
        env_lines = []
        if os.path.exists(env_path):
            with open(env_path, 'r') as f:
                env_lines = f.readlines()
        
        # Update settings
        settings_map = {
            'TARGET_ATS_SCORE': 'TARGET_ATS_SCORE',
            'TARGET_JOB_SCORE': 'TARGET_JOB_SCORE',
            'DOWNLOADS_PER_15_DAYS': 'DOWNLOADS_PER_15_DAYS',
            'DOWNLOADS_PER_MONTH': 'DOWNLOADS_PER_MONTH',
            'MAX_FILE_SIZE_MB': 'MAX_FILE_SIZE_MB',
            'LLM_MAX_TOKENS': 'LLM_MAX_TOKENS',
            'LLM_TEMPERATURE': 'LLM_TEMPERATURE',
            'LLM_MAX_ITERATIONS': 'LLM_MAX_ITERATIONS',
        }
        
        # Update existing lines or add new ones
        updated_lines = []
        updated_keys = set()
        
        for line in env_lines:
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key = line.split('=')[0]
                if key in settings_map.values():
                    # Find the corresponding new setting
                    for new_key, env_key in settings_map.items():
                        if env_key == key:
                            updated_lines.append(f"{key}={new_settings[new_key]}\n")
                            updated_keys.add(key)
                            break
                else:
                    updated_lines.append(line + '\n')
            else:
                updated_lines.append(line + '\n')
        
        # Add any new settings that weren't in the file
        for new_key, env_key in settings_map.items():
            if env_key not in updated_keys:
                updated_lines.append(f"{env_key}={new_settings[new_key]}\n")
        
        # Write back to file
        with open(env_path, 'w') as f:
            f.writelines(updated_lines)
            
    except Exception as e:
        print(f"Error updating .env file: {str(e)}")

# AJAX endpoints for real-time updates
@user_passes_test(is_admin_user, login_url='login')
def admin_api_stats(request):
    """API endpoint for real-time statistics"""
    
    stats = {
        'total_users': User.objects.count(),
        'total_resumes': Resume.objects.count(),
        'total_downloads': DownloadLog.objects.count(),
        'users_today': User.objects.filter(date_joined__date=timezone.now().date()).count(),
        'resumes_today': Resume.objects.filter(created_at__date=timezone.now().date()).count(),
        'downloads_today': DownloadLog.objects.filter(downloaded__date=timezone.now().date()).count(),
    }
    
    return JsonResponse(stats)

@user_passes_test(is_admin_user, login_url='login')
def admin_api_user_action(request, user_id):
    """API endpoint for user actions"""
    
    if request.method == 'POST':
        user = get_object_or_404(User, id=user_id)
        action = request.POST.get('action')
        
        try:
            if action == 'toggle_active':
                user.is_active = not user.is_active
                user.save()
                return JsonResponse({
                    'success': True,
                    'message': f'User {"activated" if user.is_active else "deactivated"}',
                    'is_active': user.is_active
                })
            
            elif action == 'toggle_staff':
                user.is_staff = not user.is_staff
                user.save()
                return JsonResponse({
                    'success': True,
                    'message': f'Staff access {"granted" if user.is_staff else "removed"}',
                    'is_staff': user.is_staff
                })
            
            elif action == 'reset_downloads':
                DownloadLog.objects.filter(user=user).delete()
                return JsonResponse({
                    'success': True,
                    'message': 'Download history reset for user'
                })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'message': str(e)
            })
    
    return JsonResponse({'success': False, 'message': 'Invalid request'})

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/0002_resume_file_size_bytes_alter_resume_user_downloadlog.py =====

# Generated by Django 4.2.7 on 2025-05-25 21:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('resume', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='resume',
            name='file_size_bytes',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='resume',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resumes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DownloadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downloaded', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-downloaded'],
                'indexes': [models.Index(fields=['user', 'downloaded'], name='resume_down_user_id_466569_idx')],
            },
        ),
    ]


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/0003_profile.py =====

# Generated by Django 4.2.7 on 2025-05-25 22:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('resume', '0002_resume_file_size_bytes_alter_resume_user_downloadlog'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(blank=True, max_length=5)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__init__.py =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/0004_manual_resume_models.py =====

# Create this file: resume/migrations/0004_manual_resume_models.py
# Run: python manage.py makemigrations resume
# Then: python manage.py migrate

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('resume', '0003_profile'),
    ]

    operations = [
        migrations.CreateModel(
            name='ManualResume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=100)),
                ('professional_title', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('portfolio_url', models.URLField(blank=True, null=True)),
                ('professional_summary', models.TextField(help_text='2-3 sentences summarizing your career goals and key strengths')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manual_resumes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='VolunteerExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_title', models.CharField(max_length=200)),
                ('organization_name', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('responsibilities', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='volunteer_experiences', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='WorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(max_length=200)),
                ('company_name', models.CharField(max_length=200)),
                ('company_city', models.CharField(max_length=100)),
                ('company_country', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('responsibilities', models.TextField(help_text='Enter 3-5 bullet points describing key accomplishments, technologies used, and metrics')),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_type', models.CharField(choices=[('technical', 'Technical Skills'), ('soft', 'Soft Skills'), ('tools', 'Tools & Platforms')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('proficiency', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='intermediate', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='resume.manualresume')),
            ],
            options={
                'ordering': ['skill_type', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('role', models.CharField(help_text='e.g., Team Lead, Contributor', max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_ongoing', models.BooleanField(default=False)),
                ('description', models.TextField(help_text='2-4 sentences detailing objectives, technologies/frameworks used, and outcome')),
                ('demo_url', models.URLField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('proficiency', models.CharField(choices=[('native', 'Native'), ('fluent', 'Fluent'), ('professional', 'Professional'), ('intermediate', 'Intermediate'), ('beginner', 'Beginner')], max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='languages', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_name', models.CharField(max_length=200)),
                ('institution_name', models.CharField(max_length=200)),
                ('institution_city', models.CharField(max_length=100)),
                ('institution_country', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('relevant_coursework', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_entries', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('issuing_organization', models.CharField(max_length=200)),
                ('date_obtained', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-date_obtained'],
            },
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('issuing_organization', models.CharField(max_length=200)),
                ('date_received', models.DateField()),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('resume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='resume.manualresume')),
            ],
            options={
                'ordering': ['order', '-date_received'],
            },
        ),
        migrations.AddConstraint(
            model_name='skill',
            constraint=models.UniqueConstraint(fields=('resume', 'name'), name='unique_skill_per_resume'),
        ),
    ]

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/0005_remove_skill_unique_skill_per_resume_and_more.py =====

# Generated by Django 4.2.7 on 2025-06-01 10:46

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('resume', '0004_manual_resume_models'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='skill',
            name='unique_skill_per_resume',
        ),
        migrations.AlterUniqueTogether(
            name='skill',
            unique_together={('resume', 'name')},
        ),
    ]


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/0001_initial.py =====

# Generated by Django 4.2.7

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("content", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Resume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="resumes/")),
                ("extracted_text", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0001_initial.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0001_initial.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0003_alter_resume_user.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0003_alter_resume_user.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0003_profile.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0003_profile.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0004_manual_resume_models.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0004_manual_resume_models.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0002_resume_file_size_bytes_alter_resume_user_downloadlog.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0002_resume_file_size_bytes_alter_resume_user_downloadlog.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/__init__.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/__init__.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0005_remove_skill_unique_skill_per_resume_and_more.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/migrations/__pycache__/0005_remove_skill_unique_skill_per_resume_and_more.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/management/__init__.py =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/management/__pycache__/__init__.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/management/__pycache__/__init__.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/management/commands/load_templates.py =====

import os
from django.core.management.base import BaseCommand
from django.conf import settings
from resume.models import Template

class Command(BaseCommand):
    help = "Load HTML templates from disk into the Template model"

    def handle(self, *args, **options):
        templates_map = [
            {"name": "Classic Chronological",     "filename": "template1.html"},
            {"name": "Modern Minimalist",         "filename": "template2.html"},
            {"name": "Functional/Skills-Based",   "filename": "template3.html"},
            {"name": "Simple One-Column",         "filename": "template4.html"},
            {"name": "Hybrid",                    "filename": "template5.html"},
            {"name": "Professional Premium",      "filename": "template6.html"}
        ]

        repo_path = os.path.join(settings.BASE_DIR, 'resume', 'templates', 'resume', 'templates_repo')
        
        for item in templates_map:
            file_path = os.path.join(repo_path, item["filename"])
            if not os.path.exists(file_path):
                self.stdout.write(self.style.ERROR(f"File not found: {file_path}"))
                continue

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    html_content = f.read()

                tpl, created = Template.objects.get_or_create(
                    name=item["name"],
                    defaults={'content': html_content}
                )
                
                if not created:
                    tpl.content = html_content
                    tpl.save()

                status = "Created" if created else "Updated"
                self.stdout.write(self.style.SUCCESS(f"{status} template: {item['name']}"))
                
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"Error processing {item['name']}: {str(e)}"))

        self.stdout.write(self.style.SUCCESS("Template loading completed!"))

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/management/commands/__init__.py =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/views.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/views.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/urls.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/urls.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/utils.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/utils.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/models.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/models.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/admin.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/admin.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/templates_config.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/templates_config.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/forms.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/forms.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/apps.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/apps.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/middleware.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/middleware.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/deepseek_client.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/deepseek_client.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/__init__.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/__pycache__/__init__.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/ats_details.html =====

<!-- templates/ats_details.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Understanding ATS Systems | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      color: #112D4E;
      line-height: 1.6;
    }

    /* WhatsApp Float Button - RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    /* Hero Section */
    .hero {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 100px 0;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="white" opacity="0.1"/></svg>') repeat;
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-100px); }
    }

    .hero-content {
      position: relative;
      z-index: 2;
    }

    .hero h1 {
      font-size: 3.5rem;
      margin-bottom: 20px;
      font-weight: 800;
    }

    .hero-subtitle {
      font-size: 1.3rem;
      margin-bottom: 40px;
      opacity: 0.95;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
    }

    .section {
      padding: 80px 0;
    }

    .section-title {
      font-size: 2.5rem;
      color: #112D4E;
      text-align: center;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .section-subtitle {
      font-size: 1.2rem;
      color: #3F72AF;
      text-align: center;
      margin-bottom: 60px;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }

    /* What is ATS Section */
    .ats-definition {
      background: #F9F7F7;
    }

    .definition-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 60px;
      align-items: center;
    }

    .definition-content h3 {
      font-size: 2rem;
      color: #112D4E;
      margin-bottom: 20px;
    }

    .definition-content p {
      font-size: 1.1rem;
      color: #3F72AF;
      margin-bottom: 20px;
      line-height: 1.7;
    }

    .definition-stats {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
      margin-top: 30px;
    }

    .stat-card {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 25px;
      border-radius: 15px;
      text-align: center;
    }

    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 10px;
    }

    .stat-label {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    .ats-visual {
      text-align: center;
    }

    .ats-icon {
      font-size: 8rem;
      color: #3F72AF;
      margin-bottom: 30px;
      animation: robotMove 3s ease-in-out infinite;
    }

    @keyframes robotMove {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
    }

    /* How ATS Works */
    .ats-process {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
    }

    .process-steps {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }

    .process-step {
      background: #F9F7F7;
      padding: 40px 30px;
      border-radius: 20px;
      text-align: center;
      box-shadow: 0 15px 40px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.4s ease;
      position: relative;
    }

    .process-step:hover {
      transform: translateY(-10px);
      box-shadow: 0 25px 60px rgba(17,45,78,0.2);
    }

    .step-number {
      position: absolute;
      top: -15px;
      left: 50%;
      transform: translateX(-50%);
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      font-size: 1.2rem;
    }

    .step-icon {
      font-size: 3rem;
      color: #3F72AF;
      margin: 20px 0;
    }

    .step-title {
      font-size: 1.5rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 600;
    }

    .step-description {
      color: #3F72AF;
      line-height: 1.6;
    }

    /* ATS Problems Section */
    .ats-problems {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
    }

    .problems-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }

    .problem-card {
      background: rgba(249, 247, 247, 0.1);
      padding: 40px 30px;
      border-radius: 20px;
      border: 2px solid rgba(219, 226, 239, 0.3);
      backdrop-filter: blur(10px);
    }

    .problem-icon {
      font-size: 3rem;
      color: #DBE2EF;
      margin-bottom: 20px;
    }

    .problem-title {
      font-size: 1.6rem;
      margin-bottom: 15px;
      font-weight: 600;
    }

    .problem-description {
      color: #DBE2EF;
      line-height: 1.6;
      margin-bottom: 20px;
    }

    .problem-impact {
      background: rgba(219, 226, 239, 0.1);
      padding: 15px;
      border-radius: 10px;
      border-left: 4px solid #DBE2EF;
    }

    .problem-impact strong {
      color: #F9F7F7;
    }

    /* Solutions Section */
    .ats-solutions {
      background: #F9F7F7;
    }

    .solutions-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }

    .solution-card {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 40px 30px;
      border-radius: 20px;
      box-shadow: 0 15px 40px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.4s ease;
    }

    .solution-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 25px 60px rgba(17,45,78,0.2);
      border-color: #3F72AF;
    }

    .solution-icon {
      font-size: 3rem;
      color: #3F72AF;
      margin-bottom: 20px;
    }

    .solution-title {
      font-size: 1.6rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 600;
    }

    .solution-description {
      color: #3F72AF;
      line-height: 1.6;
      margin-bottom: 20px;
    }

    .solution-features {
      list-style: none;
      padding: 0;
    }

    .solution-features li {
      color: #112D4E;
      margin-bottom: 10px;
      padding-left: 25px;
      position: relative;
    }

    .solution-features li::before {
      content: '✓';
      position: absolute;
      left: 0;
      color: #3F72AF;
      font-weight: bold;
    }

    /* CTA Section */
    .cta-section {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 80px 0;
      text-align: center;
    }

    .cta-title {
      font-size: 2.5rem;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .cta-description {
      font-size: 1.2rem;
      margin-bottom: 40px;
      opacity: 0.9;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .cta-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    .cta-btn {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      padding: 18px 35px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      font-size: 1.1rem;
      transition: all 0.3s ease;
    }

    .cta-btn.primary {
      background: linear-gradient(135deg, #F9F7F7, #DBE2EF);
      color: #112D4E;
    }

    .cta-btn.secondary {
      background: transparent;
      color: #F9F7F7;
      border: 2px solid #F9F7F7;
    }

    .cta-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .cta-btn.primary:hover {
      color: #112D4E;
    }

    .cta-btn.secondary:hover {
      background: #F9F7F7;
      color: #112D4E;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2.5rem;
      }
      
      .definition-grid {
        grid-template-columns: 1fr;
        gap: 40px;
      }
      
      .process-steps,
      .problems-grid,
      .solutions-grid {
        grid-template-columns: 1fr;
      }
      
      .section-title {
        font-size: 2rem;
      }
      
      .ats-icon {
        font-size: 5rem;
      }
    }
  </style>
</head>
<body>
  <!-- Navigation -->
  {% include 'components/navigation.html' %}

  <!-- WhatsApp Float Button -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <div class="hero-content">
        <h1><i class="fas fa-robot"></i> Understanding ATS Systems</h1>
        <p class="hero-subtitle">
          Master the hidden technology that screens 98% of job applications. 
          Learn how Applicant Tracking Systems work and why they're crucial for your career success.
        </p>
      </div>
    </div>
  </section>

  <!-- What is ATS -->
  <section class="section ats-definition">
    <div class="container">
      <h2 class="section-title">What is an ATS (Applicant Tracking System)?</h2>
      <p class="section-subtitle">
        The digital gatekeeper that determines whether your resume reaches human recruiters
      </p>
      
      <div class="definition-grid">
        <div class="definition-content">
          <h3>The Digital Resume Scanner</h3>
          <p>
            An Applicant Tracking System (ATS) is software used by companies to automatically 
            collect, scan, organize, and rank job applications. It acts as the first filter 
            between you and your dream job.
          </p>
          <p>
            Before any human recruiter sees your resume, the ATS scans it for keywords, 
            analyzes the format, and assigns it a compatibility score. Only the highest-scoring 
            resumes make it to the next round.
          </p>
          
          <div class="definition-stats">
            <div class="stat-card">
              <div class="stat-number">98%</div>
              <div class="stat-label">Fortune 500 companies use ATS</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">75%</div>
              <div class="stat-label">Resumes rejected by ATS</div>
            </div>
          </div>
        </div>
        
        <div class="ats-visual">
          <i class="fas fa-robot ats-icon"></i>
          <h4 style="color: #112D4E; font-size: 1.5rem; margin-bottom: 15px;">ATS in Action</h4>
          <p style="color: #3F72AF; font-size: 1.1rem;">
            Every second, thousands of resumes are being automatically scanned, 
            parsed, and ranked by ATS systems worldwide.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- How ATS Works -->
  <section class="section ats-process">
    <div class="container">
      <h2 class="section-title">How Does ATS Work?</h2>
      <p class="section-subtitle">
        Understanding the 4-step process that determines your resume's fate
      </p>
      
      <div class="process-steps">
        <div class="process-step">
          <div class="step-number">1</div>
          <i class="fas fa-upload step-icon"></i>
          <h3 class="step-title">Resume Submission</h3>
          <p class="step-description">
            You submit your resume through a job portal or company website. 
            The ATS immediately receives and begins processing your application.
          </p>
        </div>
        
        <div class="process-step">
          <div class="step-number">2</div>
          <i class="fas fa-search step-icon"></i>
          <h3 class="step-title">Parsing & Analysis</h3>
          <p class="step-description">
            The system extracts information from your resume, including contact details, 
            work experience, education, and skills. Poor formatting can cause parsing errors.
          </p>
        </div>
        
        <div class="process-step">
          <div class="step-number">3</div>
          <i class="fas fa-filter step-icon"></i>
          <h3 class="step-title">Keyword Matching</h3>
          <p class="step-description">
            ATS compares your resume against the job description, looking for specific keywords, 
            skills, and qualifications. Missing keywords = automatic rejection.
          </p>
        </div>
        
        <div class="process-step">
          <div class="step-number">4</div>
          <i class="fas fa-chart-line step-icon"></i>
          <h3 class="step-title">Scoring & Ranking</h3>
          <p class="step-description">
            Your resume receives a compatibility score. Only the highest-scoring candidates 
            are forwarded to human recruiters for review.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- ATS Problems -->
  <section class="section ats-problems">
    <div class="container">
      <h2 class="section-title" style="color: #F9F7F7;">Common ATS Problems That Kill Your Chances</h2>
      <p class="section-subtitle" style="color: #DBE2EF;">
        Avoid these critical mistakes that cause 75% of resumes to be automatically rejected
      </p>
      
      <div class="problems-grid">
        <div class="problem-card">
          <i class="fas fa-exclamation-triangle problem-icon"></i>
          <h3 class="problem-title">Keyword Mismatch</h3>
          <p class="problem-description">
            Your resume uses different terminology than the job description. 
            For example, you write "customer service" but the job requires "client relations."
          </p>
          <div class="problem-impact">
            <strong>Impact:</strong> Automatic rejection despite being qualified
          </div>
        </div>
        
        <div class="problem-card">
          <i class="fas fa-file-excel problem-icon"></i>
          <h3 class="problem-title">Poor Formatting</h3>
          <p class="problem-description">
            Creative layouts, graphics, tables, and unusual fonts confuse ATS systems. 
            The software can't properly parse your information.
          </p>
          <div class="problem-impact">
            <strong>Impact:</strong> 43% of resumes fail due to formatting issues
          </div>
        </div>
        
        <div class="problem-card">
          <i class="fas fa-clock problem-icon"></i>
          <h3 class="problem-title">Inadequate Skills Section</h3>
          <p class="problem-description">
            Missing technical skills, certifications, or using outdated terminology 
            causes your resume to score poorly in ATS systems.
          </p>
          <div class="problem-impact">
            <strong>Impact:</strong> Lower ranking compared to optimized resumes
          </div>
        </div>
        
        <div class="problem-card">
          <i class="fas fa-ban problem-icon"></i>
          <h3 class="problem-title">Wrong Section Headers</h3>
          <p class="problem-description">
            Using non-standard section names like "My Journey" instead of "Work Experience" 
            prevents ATS from categorizing your information correctly.
          </p>
          <div class="problem-impact">
            <strong>Impact:</strong> Critical information gets misclassified or ignored
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Solutions -->
  <section class="section ats-solutions">
    <div class="container">
      <h2 class="section-title">How to Beat ATS Systems</h2>
      <p class="section-subtitle">
        Proven strategies to ensure your resume passes ATS screening every time
      </p>
      
      <div class="solutions-grid">
        <div class="solution-card">
          <i class="fas fa-magic solution-icon"></i>
          <h3 class="solution-title">AI-Powered Keyword Optimization</h3>
          <p class="solution-description">
            Our AI analyzes job descriptions and automatically integrates the exact keywords 
            and phrases that ATS systems are programmed to find.
          </p>
          <ul class="solution-features">
            <li>Extracts exact keywords from job postings</li>
            <li>Natural integration without keyword stuffing</li>
            <li>Industry-specific terminology matching</li>
            <li>Real-time ATS compatibility scoring</li>
          </ul>
        </div>
        
        <div class="solution-card">
          <i class="fas fa-university solution-icon"></i>
          <h3 class="solution-title">ATS-Optimized Templates</h3>
          <p class="solution-description">
            University-approved resume templates specifically designed to pass ATS screening 
            while maintaining professional appearance.
          </p>
          <ul class="solution-features">
            <li>Clean, parsable formatting</li>
            <li>Standard section headers</li>
            <li>Optimal font and spacing</li>
            <li>Compatible with all major ATS platforms</li>
          </ul>
        </div>
        
        <div class="solution-card">
          <i class="fas fa-chart-line solution-icon"></i>
          <h3 class="solution-title">Real-Time ATS Testing</h3>
          <p class="solution-description">
            Test your resume against actual ATS algorithms and receive detailed feedback 
            on areas that need improvement.
          </p>
          <ul class="solution-features">
            <li>Compatibility score for major ATS systems</li>
            <li>Detailed parsing analysis</li>
            <li>Keyword density optimization</li>
            <li>Section-by-section feedback</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- Call to Action -->
  <section class="cta-section">
    <div class="container">
      <h2 class="cta-title">Ready to Beat the ATS?</h2>
      <p class="cta-description">
        Don't let an algorithm kill your career dreams. Use our AI-powered tool to create 
        resumes that pass ATS screening and land interviews.
      </p>
      
      <div class="cta-buttons">
        <a href="{% url 'signup' %}" class="cta-btn primary">
          <i class="fas fa-rocket"></i> Optimize My Resume Now
        </a>
        <a href="{% url 'our_services' %}" class="cta-btn secondary">
          <i class="fas fa-star"></i> View All Services
        </a>
      </div>
    </div>
  </section>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/landing.html =====

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>ATS Resume Optimizer & Job Application Service</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      color: #112D4E;
      line-height: 1.6;
    }
    
    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    /* Hero Section */
    .hero {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 100px 0;
      text-align: center;
      position: relative;
      overflow: hidden;
    }
    .hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="white" opacity="0.1"/></svg>') repeat;
      animation: float 20s infinite linear;
    }
    @keyframes float {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-100px); }
    }
    .hero-content {
      position: relative;
      z-index: 2;
    }
    .hero h1 {
      font-size: 3.8rem;
      margin-bottom: 20px;
      font-weight: 800;
      text-shadow: 0 2px 4px rgba(17,45,78,0.3);
    }
    .hero-subtitle {
      font-size: 1.4rem;
      margin-bottom: 40px;
      opacity: 0.95;
      max-width: 900px;
      margin-left: auto;
      margin-right: auto;
    }
    .hero-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 40px;
      flex-wrap: wrap;
    }
    .cta {
      display: inline-block;
      background: linear-gradient(135deg, #F9F7F7, #DBE2EF);
      color: #112D4E;
      padding: 18px 40px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      font-size: 1.2rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(17,45,78,0.2);
    }
    .cta:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(17,45,78,0.3);
      color: #112D4E;
    }
    .cta-secondary {
      background: transparent;
      color: #F9F7F7;
      border: 2px solid #F9F7F7;
    }
    .cta-secondary:hover {
      background: #F9F7F7;
      color: #112D4E;
    }

    /* ATS Explanation Section */
    .ats-explanation {
      padding: 100px 0;
      background: #F9F7F7;
    }
    .section-header {
      text-align: center;
      margin-bottom: 80px;
    }
    .section-title {
      font-size: 3rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
    }
    .section-subtitle {
      font-size: 1.3rem;
      color: #3F72AF;
      max-width: 700px;
      margin: 0 auto;
    }
    
    .ats-content {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }
    
    .ats-card {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 40px 30px;
      border-radius: 20px;
      text-align: center;
      box-shadow: 0 15px 40px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.4s ease;
    }
    
    .ats-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 25px 60px rgba(17,45,78,0.2);
    }
    
    .ats-icon {
      font-size: 3.5rem;
      color: #3F72AF;
      margin-bottom: 25px;
    }
    
    .ats-title {
      font-size: 1.8rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 700;
    }
    
    .ats-description {
      color: #3F72AF;
      font-size: 1.1rem;
      line-height: 1.7;
      margin-bottom: 20px;
    }
    
    .ats-stats {
      background: #112D4E;
      color: #F9F7F7;
      padding: 15px;
      border-radius: 10px;
      margin-top: 20px;
    }
    
    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      color: #DBE2EF;
    }
    
    .stat-label {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    /* Problem-Solution Section */
    .problem-solution {
      padding: 100px 0;
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
    }
    
    .problem-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 60px;
      margin-top: 60px;
    }
    
    .problem-card, .solution-card {
      padding: 40px;
      border-radius: 20px;
      position: relative;
    }
    
    .problem-card {
      background: rgba(249, 247, 247, 0.1);
      border: 2px solid rgba(219, 226, 239, 0.3);
    }
    
    .solution-card {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border: 2px solid #DBE2EF;
    }
    
    .card-icon {
      font-size: 3rem;
      margin-bottom: 20px;
    }
    
    .problem-card .card-icon {
      color: #DBE2EF;
    }
    
    .solution-card .card-icon {
      color: #F9F7F7;
    }
    
    .card-title {
      font-size: 2rem;
      margin-bottom: 20px;
      font-weight: 700;
    }
    
    .card-list {
      list-style: none;
      padding: 0;
    }
    
    .card-list li {
      margin-bottom: 15px;
      padding-left: 30px;
      position: relative;
      font-size: 1.1rem;
    }
    
    .problem-card .card-list li::before {
      content: '✗';
      position: absolute;
      left: 0;
      color: #DBE2EF;
      font-weight: bold;
      font-size: 1.3rem;
    }
    
    .solution-card .card-list li::before {
      content: '✓';
      position: absolute;
      left: 0;
      color: #F9F7F7;
      font-weight: bold;
      font-size: 1.3rem;
    }

    /* Services Section */
    .services-section {
      padding: 100px 0;
      background: #F9F7F7;
    }
    
    .services-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: 60px;
      margin-top: 80px;
    }
    .service-card {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 50px 40px;
      border-radius: 25px;
      text-align: center;
      box-shadow: 0 15px 40px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
    }
    .service-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(63,114,175,0.1), transparent);
      transform: rotate(45deg);
      transition: all 0.6s ease;
      opacity: 0;
    }
    .service-card:hover::before {
      animation: shimmer 1.5s ease-in-out;
    }
    @keyframes shimmer {
      0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }
      50% { opacity: 1; }
      100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }
    }
    .service-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 25px 60px rgba(17,45,78,0.2);
      border-color: #3F72AF;
    }
    .service-icon {
      font-size: 4rem;
      color: #3F72AF;
      margin-bottom: 30px;
      position: relative;
      z-index: 2;
    }
    .service-title {
      font-size: 2rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
      position: relative;
      z-index: 2;
    }
    .service-description {
      color: #3F72AF;
      font-size: 1.1rem;
      line-height: 1.7;
      margin-bottom: 30px;
      position: relative;
      z-index: 2;
    }
    .service-features {
      list-style: none;
      text-align: left;
      margin: 30px 0;
      position: relative;
      z-index: 2;
    }
    .service-features li {
      color: #112D4E;
      margin-bottom: 12px;
      font-size: 1rem;
      position: relative;
      padding-left: 25px;
    }
    .service-features li::before {
      content: '✓';
      position: absolute;
      left: 0;
      color: #3F72AF;
      font-weight: bold;
      font-size: 1.2rem;
    }
    .service-btn {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 15px 35px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 600;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
      position: relative;
      z-index: 2;
    }
    .service-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(63,114,175,0.4);
      color: #F9F7F7;
    }

    /* Job Application Service Specific */
    .job-service {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
    }
    .job-service .service-title,
    .job-service .service-features li {
      color: #F9F7F7;
    }
    .job-service .service-description {
      color: #DBE2EF;
    }
    .job-service .service-features li::before {
      color: #DBE2EF;
    }
    .job-service .service-btn {
      background: linear-gradient(135deg, #F9F7F7, #DBE2EF);
      color: #112D4E;
    }
    .job-service .service-btn:hover {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      color: #112D4E;
    }

    /* How It Works */
    .how-it-works {
      padding: 100px 0;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
    }
    .steps {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }
    .step {
      text-align: center;
      position: relative;
      padding: 30px 20px;
    }
    .step-number {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      width: 70px;
      height: 70px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      font-weight: 700;
      margin: 0 auto 25px;
      box-shadow: 0 8px 20px rgba(63,114,175,0.3);
    }
    .step-title {
      font-size: 1.4rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 600;
    }
    .step-description {
      color: #3F72AF;
      font-size: 1rem;
      line-height: 1.6;
    }

    /* Stats Section */
    .stats-section {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 80px 0;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 40px;
      text-align: center;
    }
    .stat {
      padding: 20px;
    }
    .stat-number {
      font-size: 3.5rem;
      font-weight: 700;
      color: #DBE2EF;
      margin-bottom: 10px;
    }
    .stat-label {
      font-size: 1.1rem;
      opacity: 0.9;
    }

    /* Footer CTA */
    .footer-cta {
      background: #F9F7F7;
      padding: 80px 0;
      text-align: center;
    }
    .footer-content h2 {
      font-size: 2.5rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
    }
    .footer-content p {
      font-size: 1.2rem;
      color: #3F72AF;
      margin-bottom: 40px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }
    .footer-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }
    .footer-btn {
      padding: 18px 40px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
    }
    .footer-btn.primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
    }
    .footer-btn.secondary {
      background: transparent;
      color: #3F72AF;
      border: 2px solid #3F72AF;
    }
    .footer-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(63,114,175,0.3);
    }
    .footer-btn.primary:hover {
      color: #F9F7F7;
    }
    .footer-btn.secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2.8rem;
      }
      .hero-buttons {
        flex-direction: column;
        align-items: center;
      }
      .services-grid {
        grid-template-columns: 1fr;
        gap: 40px;
      }
      .service-card {
        padding: 40px 30px;
      }
      .section-title {
        font-size: 2.2rem;
      }
      .whatsapp-float {
        width: 50px;
        height: 50px;
        right: 15px;
      }
      .whatsapp-float i {
        font-size: 20px;
      }
      .problem-grid {
        grid-template-columns: 1fr;
        gap: 40px;
      }
      .ats-content {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <div class="hero-content">
        <h1><i class="fas fa-rocket"></i> Your Career Success Partner</h1>
        <p class="hero-subtitle">
          We don't just optimize your resume – we get you hired! Choose from our AI-powered resume optimization 
          or let our experts handle your entire job application process while you focus on interview prep.
        </p>
        
        <div class="hero-buttons">
          <a href="{% url 'signup' %}" class="cta">
            <i class="fas fa-user-plus"></i> Start Free Resume Tool
          </a>
          <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
             class="cta cta-secondary" target="_blank">
            <i class="fas fa-handshake"></i> Get Jobs Applied For Me <u>3-Days Free Trail</u>
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- ATS Explanation Section -->
  <section class="ats-explanation">
    <div class="container">
      <div class="section-header">
        <h2 class="section-title">Understanding ATS: The Hidden Job Market Filter</h2>
        <p class="section-subtitle">
          Learn why 98% of Fortune 500 companies use Applicant Tracking Systems 
          and how they impact your job search success
        </p>
      </div>
      
      <div class="ats-content">
        <div class="ats-card">
          <div class="ats-icon">
            <i class="fas fa-robot"></i>
          </div>
          <h3 class="ats-title">What is an ATS?</h3>
          <p class="ats-description">
            An Applicant Tracking System (ATS) is software that automatically scans, 
            parses, and ranks resumes before any human recruiter sees them. It looks 
            for specific keywords, formatting, and job-relevant information.
          </p>
          <div class="ats-stats">
            <div class="stat-number">98%</div>
            <div class="stat-label">of Fortune 500 companies use ATS</div>
          </div>
        </div>

        <div class="ats-card">
          <div class="ats-icon">
            <i class="fas fa-filter"></i>
          </div>
          <h3 class="ats-title">The Filtering Process</h3>
          <p class="ats-description">
            ATS systems automatically reject 75% of resumes within seconds based on 
            keyword matching, formatting issues, and missing requirements. Only 
            the top-ranking resumes reach human recruiters.
          </p>
          <div class="ats-stats">
            <div class="stat-number">75%</div>
            <div class="stat-label">of resumes never reach human eyes</div>
          </div>
        </div>

        <div class="ats-card">
          <div class="ats-icon">
            <i class="fas fa-search"></i>
          </div>
          <h3 class="ats-title">Keyword Scanning</h3>
          <p class="ats-description">
            ATS software scans for exact keyword matches from the job description. 
            Missing key terms means automatic rejection, even if you're perfectly 
            qualified for the position.
          </p>
          <div class="ats-stats">
            <div class="stat-number">6 sec</div>
            <div class="stat-label">average time ATS spends on each resume</div>
          </div>
        </div>

        <div class="ats-card">
          <div class="ats-icon">
            <i class="fas fa-file-code"></i>
          </div>
          <h3 class="ats-title">Format Requirements</h3>
          <p class="ats-description">
            ATS systems struggle with creative layouts, graphics, tables, and 
            non-standard fonts. Clean, simple formatting with standard headings 
            ensures proper parsing and higher compatibility scores.
          </p>
          <div class="ats-stats">
            <div class="stat-number">43%</div>
            <div class="stat-label">of resumes fail due to formatting issues</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Problem-Solution Section -->
  <section class="problem-solution">
    <div class="container">
      <div class="section-header">
        <h2 class="section-title" style="color: #F9F7F7;">The ATS Challenge vs Our Solution</h2>
        <p class="section-subtitle" style="color: #DBE2EF;">
          See how traditional resumes fail ATS systems and how our AI-powered 
          optimization solves these critical issues
        </p>
      </div>
      
      <div class="problem-grid">
        <div class="problem-card">
          <div class="card-icon">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <h3 class="card-title">Common ATS Problems</h3>
          <ul class="card-list">
            <li>Generic resumes missing job-specific keywords</li>
            <li>Poor formatting that ATS can't read properly</li>
            <li>Missing industry terminology and buzzwords</li>
            <li>Inadequate skills section optimization</li>
            <li>Wrong section headings and structure</li>
            <li>No quantified achievements or metrics</li>
            <li>Template designs that confuse ATS parsers</li>
          </ul>
        </div>

        <div class="solution-card">
          <div class="card-icon">
            <i class="fas fa-magic"></i>
          </div>
          <h3 class="card-title">Our AI Solution</h3>
          <ul class="card-list">
            <li>AI extracts exact keywords from job descriptions</li>
            <li>University-approved, ATS-compatible templates</li>
            <li>Automatic industry terminology integration</li>
            <li>Intelligent skills section optimization</li>
            <li>Standard ATS-friendly section structure</li>
            <li>Achievement quantification suggestions</li>
            <li>Real-time ATS compatibility scoring</li>
          </ul>
        </div>
      </div>
    </div>
  </section>

  <!-- Services Section -->
  <section class="services-section">
    <div class="container">
      <div class="section-header">
        <h2 class="section-title">Two Ways to Beat the ATS</h2>
        <p class="section-subtitle">
          Whether you prefer a DIY approach or want our experts to handle everything, 
          we have the perfect solution for your career goals.
        </p>
      </div>
      
      <div class="services-grid">
        <!-- ATS Resume Optimizer -->
        <div class="service-card">
          <div class="service-icon">
            <i class="fas fa-file-alt"></i>
          </div>
          <h3 class="service-title">AI Resume Optimizer</h3>
          <p class="service-description">
            Transform your resume with AI-powered optimization that beats ATS systems 
            and gets you past the first screening every time.
          </p>
          <ul class="service-features">
            <li>AI analyzes job descriptions for exact keyword matches</li>
            <li>University-approved templates (Harvard, MIT, Stanford)</li>
            <li>Real-time ATS compatibility scoring</li>
            <li>Manual resume builder with guided forms</li>
          </ul>
          <a href="{% url 'signup' %}" class="service-btn">
            <i class="fas fa-play"></i> Start Optimizing Now
          </a>
        </div>

        <!-- Job Application Service -->
        <div class="service-card job-service">
          <div class="service-icon">
            <i class="fas fa-handshake"></i>
          </div>
          <h3 class="service-title">Done-For-You Job Applications</h3>
          <p class="service-description">
            Sit back and relax while our experts apply to hundreds of relevant jobs on your behalf. 
            You focus on interview prep, we handle the rest.
          </p>
          <ul class="service-features">
            <li>Personal consultation to understand your profile</li>
            <li>We apply to 50+ jobs per day for you</li>
            <li>Custom cover letters for each application</li>
            <li>Interview scheduling and coordination</li>
            <li>Daily updates</li>
          </ul>
          <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
             class="service-btn" target="_blank">
            <i class="fab fa-whatsapp"></i> Get Started on WhatsApp
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- How It Works -->
  <section class="how-it-works">
    <div class="container">
      <div class="section-header">
        <h2 class="section-title">How Our Job Application Service Works</h2>
        <p class="section-subtitle">
          A simple 4-step process that gets you interviews while you sleep
        </p>
      </div>
      
      <div class="steps">
        <div class="step">
          <div class="step-number">1</div>
          <h3 class="step-title">Discovery Call</h3>
          <p class="step-description">
            We have a detailed video/phone call to understand your background, 
            desired roles, salary expectations, and target companies.
          </p>
        </div>
        
        <div class="step">
          <div class="step-number">2</div>
          <h3 class="step-title">Setup & Access</h3>
          <p class="step-description">
            You provide job board credentials (LinkedIn, Indeed, etc.) and we set up 
            your optimized profiles and application strategy.
          </p>
        </div>
        
        <div class="step">
          <div class="step-number">3</div>
          <h3 class="step-title">We Apply For You</h3>
          <p class="step-description">
            Our team applies to 50+ relevant positions Daily 
            while you focus on interview preparation.
          </p>
        </div>
        
        <div class="step">
          <div class="step-number">4</div>
          <h3 class="step-title">Interview Coordination</h3>
          <p class="step-description">
            Stay active on email for interview invitations. We coordinate schedules 
            and provide Daily updates.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Stats Section -->
  <section class="stats-section">
    <div class="container">
      <div class="stats-grid">
        <div class="stat">
          <div class="stat-number">92%</div>
          <div class="stat-label">ATS Pass Rate</div>
        </div>
        <div class="stat">
          <div class="stat-number">350+</div>
          <div class="stat-label">Jobs Applied Weekly</div>
        </div>
        <div class="stat">
          <div class="stat-number">15 Days</div>
          <div class="stat-label">Average Response Time</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Footer CTA -->
  <section class="footer-cta">
    <div class="container">
      <div class="footer-content">
        <h2>Ready to Accelerate Your Career?</h2>
        <p>Choose your path to success. Optimize your own resume or let us handle your entire job search.</p>
        
        <div class="footer-buttons">
          <a href="{% url 'signup' %}" class="footer-btn primary">
            <i class="fas fa-rocket"></i> Try Resume Optimizer Free
          </a>
          <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
             class="footer-btn secondary" target="_blank">
            <i class="fab fa-whatsapp"></i> Chat About Job Service
          </a>
          <a href="{% url 'login' %}" class="footer-btn secondary">
            <i class="fas fa-sign-in-alt"></i> Sign In
          </a>
        </div>
      </div>
    </div>
  </section>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/our_services.html =====

<!-- templates/our_services.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Our Services | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      color: #112D4E;
      line-height: 1.6;
    }

    /* WhatsApp Float Button - RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }

    /* Hero Section */
    .hero {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 100px 0;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="white" opacity="0.1"/></svg>') repeat;
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-100px); }
    }

    .hero-content {
      position: relative;
      z-index: 2;
    }

    .hero h1 {
      font-size: 3.5rem;
      margin-bottom: 20px;
      font-weight: 800;
    }

    .hero-subtitle {
      font-size: 1.3rem;
      margin-bottom: 40px;
      opacity: 0.95;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
    }

    .section {
      padding: 80px 0;
    }

    .section-title {
      font-size: 2.5rem;
      color: #112D4E;
      text-align: center;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .section-subtitle {
      font-size: 1.2rem;
      color: #3F72AF;
      text-align: center;
      margin-bottom: 60px;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }

    /* Service Comparison */
    .service-comparison {
      background: #F9F7F7;
    }

    .comparison-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 40px;
      margin-top: 60px;
    }

    /* Main Services */
    .main-services {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
    }

    .services-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: 60px;
      margin-top: 80px;
    }

    .service-card {
      background: #F9F7F7;
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 15px 40px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
    }

    .service-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(63,114,175,0.1), transparent);
      transform: rotate(45deg);
      transition: all 0.6s ease;
      opacity: 0;
    }

    .service-card:hover::before {
      animation: shimmer 1.5s ease-in-out;
    }

    @keyframes shimmer {
      0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }
      50% { opacity: 1; }
      100% { transform: translateX(100%) translateY(100%) rotate(45deg); opacity: 0; }
    }

    .service-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 25px 60px rgba(17,45,78,0.2);
      border-color: #3F72AF;
    }

    .service-header {
      text-align: center;
      margin-bottom: 30px;
      position: relative;
      z-index: 2;
    }

    .service-icon {
      font-size: 4rem;
      color: #3F72AF;
      margin-bottom: 20px;
    }

    .service-title {
      font-size: 2rem;
      color: #112D4E;
      margin-bottom: 10px;
      font-weight: 700;
    }

    .service-tagline {
      color: #3F72AF;
      font-size: 1.1rem;
      font-style: italic;
      margin-bottom: 20px;
    }

    .service-description {
      color: #3F72AF;
      font-size: 1.1rem;
      line-height: 1.7;
      margin-bottom: 30px;
      position: relative;
      z-index: 2;
    }

    .service-features {
      list-style: none;
      margin: 30px 0;
      position: relative;
      z-index: 2;
    }

    .service-features li {
      color: #112D4E;
      margin-bottom: 12px;
      font-size: 1rem;
      position: relative;
      padding-left: 25px;
    }

    .service-features li::before {
      content: '✓';
      position: absolute;
      left: 0;
      color: #3F72AF;
      font-weight: bold;
      font-size: 1.2rem;
    }

    .service-pricing {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 20px;
      border-radius: 15px;
      text-align: center;
      margin: 30px 0;
      position: relative;
      z-index: 2;
    }

    .pricing-label {
      font-size: 0.9rem;
      opacity: 0.9;
      margin-bottom: 10px;
    }

    .pricing-value {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .pricing-note {
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .service-btn {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 15px 35px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 600;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
      position: relative;
      z-index: 2;
      width: 100%;
      justify-content: center;
    }

    .service-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(63,114,175,0.4);
      color: #F9F7F7;
    }

    /* Premium Service Card */
    .service-card.premium {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      border: 2px solid #DBE2EF;
    }

    .service-card.premium .service-title,
    .service-card.premium .service-features li {
      color: #F9F7F7;
    }

    .service-card.premium .service-description,
    .service-card.premium .service-tagline {
      color: #DBE2EF;
    }

    .service-card.premium .service-features li::before {
      color: #DBE2EF;
    }

    .service-card.premium .service-btn {
      background: linear-gradient(135deg, #F9F7F7, #DBE2EF);
      color: #112D4E;
    }

    .service-card.premium .service-btn:hover {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      color: #112D4E;
    }

    .service-card.premium .service-icon {
      color: #DBE2EF;
    }

    .premium-badge {
      position: absolute;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      color: #112D4E;
      padding: 8px 15px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      z-index: 3;
    }

    /* Process Section */
    .process-section {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
    }

    .process-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 40px;
      margin-top: 60px;
    }

    .process-step {
      text-align: center;
      padding: 30px 20px;
    }

    .process-number {
      background: rgba(249, 247, 247, 0.2);
      color: #F9F7F7;
      width: 70px;
      height: 70px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.8rem;
      font-weight: 700;
      margin: 0 auto 25px;
      backdrop-filter: blur(10px);
      border: 2px solid rgba(219, 226, 239, 0.3);
    }

    .process-title {
      font-size: 1.4rem;
      margin-bottom: 15px;
      font-weight: 600;
    }

    .process-description {
      color: #DBE2EF;
      line-height: 1.6;
    }

    /* Benefits Section */
    .benefits-section {
      background: #F9F7F7;
    }

    .benefits-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 30px;
      margin-top: 60px;
    }

    .benefit-card {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 30px 25px;
      border-radius: 15px;
      text-align: center;
      box-shadow: 0 10px 30px rgba(17,45,78,0.1);
      border: 1px solid #DBE2EF;
      transition: all 0.3s ease;
    }

    .benefit-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 40px rgba(17,45,78,0.15);
    }

    .benefit-icon {
      font-size: 2.5rem;
      color: #3F72AF;
      margin-bottom: 20px;
    }

    .benefit-title {
      font-size: 1.3rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 600;
    }

    .benefit-description {
      color: #3F72AF;
      line-height: 1.5;
    }

    /* Stats Section */
    .stats-section {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 80px 0;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 40px;
      text-align: center;
    }

    .stat {
      padding: 20px;
    }

    .stat-number {
      font-size: 3.5rem;
      font-weight: 700;
      color: #DBE2EF;
      margin-bottom: 10px;
    }

    .stat-label {
      font-size: 1.1rem;
      opacity: 0.9;
    }

    /* CTA Section */
    .cta-section {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 80px 0;
      text-align: center;
    }

    .cta-title {
      font-size: 2.5rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .cta-description {
      font-size: 1.2rem;
      color: #3F72AF;
      margin-bottom: 40px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .cta-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    .cta-btn {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      padding: 18px 35px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      font-size: 1.1rem;
      transition: all 0.3s ease;
    }

    .cta-btn.primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
    }

    .cta-btn.secondary {
      background: transparent;
      color: #3F72AF;
      border: 2px solid #3F72AF;
    }

    .cta-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(63,114,175,0.3);
    }

    .cta-btn.primary:hover {
      color: #F9F7F7;
    }

    .cta-btn.secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2.5rem;
      }
      
      .services-grid {
        grid-template-columns: 1fr;
        gap: 40px;
      }
      
      .service-card {
        padding: 40px 30px;
      }
      
      .section-title {
        font-size: 2rem;
      }
      
      .comparison-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Navigation -->
  {% include 'components/navigation.html' %}

  <!-- WhatsApp Float Button -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <!-- Hero Section -->
  <section class="hero">
    <div class="container">
      <div class="hero-content">
        <h1><i class="fas fa-star"></i> Our Services</h1>
        <p class="hero-subtitle">
          Two powerful ways to accelerate your career success. Choose the perfect solution 
          for your job search needs and start landing interviews faster.
        </p>
      </div>
    </div>
  </section>

  <!-- Main Services -->
  <section class="section main-services">
    <div class="container">
      <h2 class="section-title">Choose Your Path to Success</h2>
      <p class="section-subtitle">
        Whether you prefer hands-on control or complete automation, we have the perfect solution for your career goals
      </p>
      
      <div class="services-grid">
        <!-- AI Resume Optimizer -->
        <div class="service-card">
          <div class="service-header">
            <i class="fas fa-brain service-icon"></i>
            <h3 class="service-title">AI Resume Optimizer</h3>
            <p class="service-tagline">"Do It Yourself" - With AI Assistance</p>
          </div>
          
          <p class="service-description">
            Transform your resume with cutting-edge AI technology. Our intelligent system analyzes 
            job descriptions and optimizes your resume for maximum ATS compatibility and recruiter appeal.
          </p>
          
          <ul class="service-features">
            <li>AI-powered keyword extraction and integration</li>
            <li>University-approved professional templates</li>
            <li>Real-time ATS compatibility scoring (90%+ guarantee)</li>
            <li>Manual resume builder with guided forms</li>
            <li>Unlimited revisions and downloads</li>
            <li>Job-specific resume tailoring</li>
            <li>Professional formatting optimization</li>
            <li>Instant PDF generation</li>
          </ul>
          
          <div class="service-pricing">
            <div class="pricing-label">Get Started</div>
            <div class="pricing-value">FREE</div>
            <div class="pricing-note">Always free to use</div>
          </div>
          
          <a href="{% url 'signup' %}" class="service-btn">
            <i class="fas fa-rocket"></i> Start Optimizing Now
          </a>
        </div>

        <!-- Job Application Service -->
        <div class="service-card premium">
          <div class="premium-badge">Most Popular</div>
          <div class="service-header">
            <i class="fas fa-handshake service-icon"></i>
            <h3 class="service-title">Done-For-You Job Applications</h3>
            <p class="service-tagline">"Sit Back & Relax" - We Handle Everything</p>
          </div>
          
          <p class="service-description">
            Focus on interview preparation while our experts apply to hundreds of relevant jobs on your behalf. 
            Professional consultation, custom applications, and interview coordination included.
          </p>
          
          <ul class="service-features">
            <li>Personal consultation & profile optimization</li>
            <li>50+ daily job applications by experts</li>
            <li>Custom cover letters for each application</li>
            <li>LinkedIn profile optimization</li>
            <li>Interview scheduling & coordination</li>
            <li>Daily progress reports & updates</li>
            <li>Follow-up communication management</li>
            <li>Salary negotiation guidance</li>
          </ul>
          
          <div class="service-pricing">
            <div class="pricing-label">Starting From</div>
            <div class="pricing-value">$299/week</div>
            <div class="pricing-note">3-day free trial included</div>
          </div>
          
          <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
             class="service-btn" target="_blank">
            <i class="fab fa-whatsapp"></i> Start Free Trial
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Process Section -->
  <section class="section process-section">
    <div class="container">
      <h2 class="section-title" style="color: #F9F7F7;">How Our Job Application Service Works</h2>
      <p class="section-subtitle" style="color: #DBE2EF;">
        A simple 4-step process that gets you interviews while you prepare
      </p>
      
      <div class="process-grid">
        <div class="process-step">
          <div class="process-number">1</div>
          <h3 class="process-title">Discovery & Strategy</h3>
          <p class="process-description">
            Comprehensive consultation to understand your background, target roles, 
            salary expectations, and career goals. We create a personalized application strategy.
          </p>
        </div>
        
        <div class="process-step">
          <div class="process-number">2</div>
          <h3 class="process-title">Profile Optimization</h3>
          <p class="process-description">
            We optimize your LinkedIn profile, prepare custom resume versions, 
            and set up application tracking systems for maximum efficiency.
          </p>
        </div>
        
        <div class="process-step">
          <div class="process-number">3</div>
          <h3 class="process-title">Mass Application</h3>
          <p class="process-description">
            Our team applies to 50+ relevant positions daily with custom cover letters 
            while you focus on interview preparation and skill development.
          </p>
        </div>
        
        <div class="process-step">
          <div class="process-number">4</div>
          <h3 class="process-title">Interview Coordination</h3>
          <p class="process-description">
            We manage all communication, schedule interviews, provide daily updates, 
            and guide you through the entire hiring process until you land your dream job.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Benefits Section -->
  <section class="section benefits-section">
    <div class="container">
      <h2 class="section-title">Why Choose Our Services</h2>
      <p class="section-subtitle">
        Proven results backed by technology and expertise
      </p>
      
      <div class="benefits-grid">
        <div class="benefit-card">
          <i class="fas fa-robot benefit-icon"></i>
          <h3 class="benefit-title">AI-Powered Precision</h3>
          <p class="benefit-description">
            Our advanced AI analyzes thousands of job descriptions to ensure your resume 
            matches exactly what employers are looking for.
          </p>
        </div>
        
        <div class="benefit-card">
          <i class="fas fa-university benefit-icon"></i>
          <h3 class="benefit-title">University-Approved</h3>
          <p class="benefit-description">
            Professional templates designed by career experts and approved by top universities 
            including Harvard, MIT, and Stanford.
          </p>
        </div>
        
        <div class="benefit-card">
          <i class="fas fa-chart-line benefit-icon"></i>
          <h3 class="benefit-title">Proven Results</h3>
          <p class="benefit-description">
            92% ATS pass rate and 3x higher interview callback rate compared to 
            traditional resume writing methods.
          </p>
        </div>
        
        <div class="benefit-card">
          <i class="fas fa-clock benefit-icon"></i>
          <h3 class="benefit-title">Save Time</h3>
          <p class="benefit-description">
            Automated job applications save you 40+ hours per week of manual searching 
            and applying to positions.
          </p>
        </div>
        
        <div class="benefit-card">
          <i class="fas fa-shield-alt benefit-icon"></i>
          <h3 class="benefit-title">Risk-Free Trial</h3>
          <p class="benefit-description">
            Try our job application service for 3 days completely free. No commitment, 
            no credit card required.
          </p>
        </div>
        
        <div class="benefit-card">
          <i class="fas fa-headset benefit-icon"></i>
          <h3 class="benefit-title">Expert Support</h3>
          <p class="benefit-description">
            Dedicated career consultants and job application specialists available 
            throughout your entire job search journey.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Stats Section -->
  <section class="stats-section">
    <div class="container">
      <div class="stats-grid">
        <div class="stat">
          <div class="stat-number">92%</div>
          <div class="stat-label">ATS Pass Rate</div>
        </div>
        <div class="stat">
          <div class="stat-number">350+</div>
          <div class="stat-label">Jobs Applied Weekly</div>
        </div>
        <div class="stat">
          <div class="stat-number">15</div>
          <div class="stat-label">Days Average Response</div>
        </div>
        <div class="stat">
          <div class="stat-number">3x</div>
          <div class="stat-label">Higher Interview Rate</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Call to Action -->
  <section class="cta-section">
    <div class="container">
      <h2 class="cta-title">Ready to Transform Your Career?</h2>
      <p class="cta-description">
        Choose the service that fits your style. Get started today and see why thousands 
        of professionals trust us with their career success.
      </p>
      
      <div class="cta-buttons">
        <a href="{% url 'signup' %}" class="cta-btn primary">
          <i class="fas fa-rocket"></i> Try AI Optimizer Free
        </a>
        <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
           class="cta-btn secondary" target="_blank">
          <i class="fab fa-whatsapp"></i> Start 3-Day Free Trial
        </a>
      </div>
    </div>
  </section>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/registration/login.html =====

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Log In | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
    }

    /* Navigation will be included here */
    .main-content {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: calc(100vh - 80px); /* Account for navigation height */
      padding: 20px;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    /* Main Container */
    .login-container {
      width: 100%;
      max-width: 900px;
      display: grid;
      grid-template-columns: 1fr 1fr;
      background: #F9F7F7;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      overflow: hidden;
      position: relative;
    }

    /* Left Side - Welcome Message */
    .welcome-section {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 60px 40px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      position: relative;
      overflow: hidden;
    }

    .welcome-section::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="white" opacity="0.1"/></svg>') repeat;
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% { transform: translateY(0px) rotate(0deg); }
      100% { transform: translateY(-100px) rotate(360deg); }
    }

    .welcome-content {
      position: relative;
      z-index: 2;
    }

    .welcome-icon {
      width: 80px;
      height: 80px;
      background: rgba(249, 247, 247, 0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 30px;
      backdrop-filter: blur(10px);
    }

    .welcome-icon i {
      font-size: 2.5rem;
      color: #F9F7F7;
    }

    .welcome-title {
      font-size: 2.5rem;
      font-weight: 800;
      margin-bottom: 20px;
      line-height: 1.2;
    }

    .welcome-subtitle {
      font-size: 1.1rem;
      opacity: 0.9;
      line-height: 1.6;
      margin-bottom: 30px;
    }

    .welcome-features {
      list-style: none;
      padding: 0;
    }

    .welcome-features li {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
      font-size: 1rem;
    }

    .welcome-features li i {
      margin-right: 12px;
      color: #DBE2EF;
      font-size: 1.1rem;
    }

    /* Right Side - Login Form */
    .form-section {
      padding: 60px 40px;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .form-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .form-header h1 {
      color: #112D4E;
      font-size: 2.2rem;
      margin-bottom: 10px;
      font-weight: 700;
    }

    .form-header p {
      color: #3F72AF;
      font-size: 1rem;
      opacity: 0.9;
    }

    .login-form {
      display: flex;
      flex-direction: column;
      gap: 25px;
    }

    .form-group {
      position: relative;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 8px;
      font-size: 0.95rem;
    }

    .input-wrapper {
      position: relative;
    }

    .form-control {
      width: 100%;
      padding: 18px 20px;
      padding-left: 55px;
      border: 2px solid #DBE2EF;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(249, 247, 247, 0.8);
      color: #112D4E;
      outline: none;
    }

    .form-control:focus {
      border-color: #3F72AF;
      box-shadow: 0 0 0 4px rgba(63,114,175,.1);
      background: #FFFFFF;
      transform: translateY(-2px);
    }

    .input-icon {
      position: absolute;
      left: 18px;
      top: 50%;
      transform: translateY(-50%);
      color: #3F72AF;
      font-size: 1.2rem;
      transition: all 0.3s ease;
    }

    .form-control:focus + .input-icon {
      color: #112D4E;
      transform: translateY(-50%) scale(1.1);
    }

    .btn-login {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 18px;
      border: none;
      border-radius: 12px;
      font-size: 1.2rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 10px;
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .btn-login::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s ease;
    }

    .btn-login:hover::before {
      left: 100%;
    }

    .btn-login:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(63,114,175,.4);
    }

    .btn-login:active {
      transform: translateY(-1px);
    }

    .forgot-password {
      text-align: center;
      margin-top: 20px;
    }

    .forgot-password a {
      color: #3F72AF;
      text-decoration: none;
      font-size: 0.95rem;
      font-weight: 500;
    }

    .forgot-password a:hover {
      text-decoration: underline;
      color: #112D4E;
    }

    .divider {
      position: relative;
      text-align: center;
      margin: 30px 0;
    }

    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, #DBE2EF, transparent);
    }

    .divider span {
      background: #F9F7F7;
      padding: 0 20px;
      color: #3F72AF;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .signup-link {
      text-align: center;
      margin-top: 25px;
    }

    .signup-link p {
      color: #3F72AF;
      margin-bottom: 15px;
      font-size: 1rem;
    }

    .btn-signup {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      color: #112D4E;
      text-decoration: none;
      font-weight: 600;
      padding: 12px 25px;
      border: 2px solid #3F72AF;
      border-radius: 12px;
      transition: all 0.3s ease;
      background: transparent;
    }

    .btn-signup:hover {
      background: #3F72AF;
      color: #F9F7F7;
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,.3);
    }

    .error-messages {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 15px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border-left: 4px solid #DBE2EF;
      font-size: 0.95rem;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .error-messages i {
      font-size: 1.2rem;
    }

    .error-messages ul {
      margin: 0;
      padding-left: 15px;
      list-style: none;
    }

    .error-messages li {
      margin-bottom: 5px;
      position: relative;
      padding-left: 15px;
    }

    .error-messages li::before {
      content: '•';
      position: absolute;
      left: 0;
      color: #DBE2EF;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .main-content {
        min-height: calc(100vh - 60px);
        padding: 10px;
      }

      .login-container {
        grid-template-columns: 1fr;
        max-width: 500px;
        margin: 10px;
      }

      .welcome-section {
        padding: 40px 30px;
        text-align: center;
      }

      .welcome-title {
        font-size: 2rem;
      }

      .form-section {
        padding: 40px 30px;
      }

      .form-header h1 {
        font-size: 1.8rem;
      }

      .whatsapp-float {
        width: 50px;
        height: 50px;
        right: 15px;
      }

      .whatsapp-float i {
        font-size: 20px;
      }
    }

    @media (max-width: 480px) {
      .main-content {
        padding: 5px;
      }

      .login-container {
        margin: 0;
      }

      .welcome-section {
        padding: 30px 20px;
      }

      .form-section {
        padding: 30px 20px;
      }

      .form-control {
        padding: 15px 18px;
        padding-left: 50px;
      }

      .input-icon {
        left: 15px;
        font-size: 1.1rem;
      }
    }

    /* Loading Animation */
    .btn-login.loading {
      pointer-events: none;
      opacity: 0.8;
    }

    .btn-login.loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid transparent;
      border-top: 2px solid #F9F7F7;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="login-container">
      <!-- Left Side - Welcome Section -->
      <div class="welcome-section">
        <div class="welcome-content">
          <div class="welcome-icon">
            <i class="fas fa-rocket"></i>
          </div>
          <h2 class="welcome-title">Welcome Back!</h2>
          <p class="welcome-subtitle">
            Continue optimizing your career with our AI-powered resume tools 
            and professional job application services.
          </p>
          <ul class="welcome-features">
            <li><i class="fas fa-check"></i> AI Resume Optimization</li>
            <li><i class="fas fa-check"></i> ATS Compatibility Scoring</li>
            <li><i class="fas fa-check"></i> University-Approved Templates</li>
            <li><i class="fas fa-check"></i> Professional Job Applications</li>
          </ul>
        </div>
      </div>

      <!-- Right Side - Login Form -->
      <div class="form-section">
        <div class="form-header">
          <h1>Sign In</h1>
          <p>Access your career optimization dashboard</p>
        </div>

        <form method="post" class="login-form" id="loginForm">
          {% csrf_token %}
          
          {% if form.non_field_errors %}
            <div class="error-messages">
              <i class="fas fa-exclamation-triangle"></i>
              <div>
                <ul>
                  {% for error in form.non_field_errors %}
                    <li>{{ error }}</li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          <div class="form-group">
            <label for="id_username">Username</label>
            <div class="input-wrapper">
              {{ form.username }}
              <i class="fas fa-user input-icon"></i>
            </div>
            {% if form.username.errors %}
              <div class="error-messages">
                <i class="fas fa-exclamation-circle"></i>
                <div>
                  <ul>
                    {% for error in form.username.errors %}
                      <li>{{ error }}</li>
                    {% endfor %}
                  </ul>
                </div>
              </div>
            {% endif %}
          </div>

          <div class="form-group">
            <label for="id_password">Password</label>
            <div class="input-wrapper">
              {{ form.password }}
              <i class="fas fa-lock input-icon"></i>
            </div>
            {% if form.password.errors %}
              <div class="error-messages">
                <i class="fas fa-exclamation-circle"></i>
                <div>
                  <ul>
                    {% for error in form.password.errors %}
                      <li>{{ error }}</li>
                    {% endfor %}
                  </ul>
                </div>
              </div>
            {% endif %}
          </div>

          <button type="submit" class="btn-login">
            <i class="fas fa-sign-in-alt"></i> Sign In to Dashboard
          </button>

          <div class="forgot-password">
            <a href="{% url 'password_reset' %}">Forgot your password?</a>
          </div>
        </form>

        <div class="divider">
          <span>New to our platform?</span>
        </div>

        <div class="signup-link">
          <p>Create your free account and start optimizing</p>
          <a href="{% url 'signup' %}" class="btn-signup">
            <i class="fas fa-user-plus"></i> Create Free Account
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Add loading animation to login button
    document.getElementById('loginForm').addEventListener('submit', function() {
      const btn = document.querySelector('.btn-login');
      btn.classList.add('loading');
      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Signing In...';
    });

    // Add form validation feedback
    const inputs = document.querySelectorAll('.form-control');
    inputs.forEach(input => {
      input.addEventListener('blur', function() {
        if (this.value.trim() === '') {
          this.style.borderColor = '#dc3545';
        } else {
          this.style.borderColor = '#3F72AF';
        }
      });

      input.addEventListener('focus', function() {
        this.style.borderColor = '#3F72AF';
      });
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/registration/password_reset_email.html =====

<!-- templates/registration/password_reset_email.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Reset - ATS Resume Optimizer</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .email-container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #3F72AF, #112D4E);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: 700;
        }
        .header .icon {
            font-size: 48px;
            margin-bottom: 15px;
        }
        .content {
            padding: 40px 30px;
        }
        .greeting {
            font-size: 18px;
            font-weight: 600;
            color: #112D4E;
            margin-bottom: 20px;
        }
        .message {
            color: #495057;
            margin-bottom: 30px;
            line-height: 1.7;
        }
        .reset-button {
            display: inline-block;
            background: linear-gradient(135deg, #3F72AF, #112D4E);
            color: white;
            padding: 15px 35px;
            text-decoration: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 16px;
            text-align: center;
            margin: 20px 0;
            transition: all 0.3s ease;
        }
        .reset-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(63,114,175,0.3);
            color: white;
        }
        .alternative-link {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin: 25px 0;
            word-break: break-all;
        }
        .alternative-link p {
            margin: 0 0 10px;
            font-weight: 600;
            color: #495057;
        }
        .alternative-link code {
            background: white;
            padding: 10px;
            border-radius: 4px;
            display: block;
            color: #e83e8c;
            font-size: 14px;
            border: 1px solid #e9ecef;
        }
        .security-info {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 20px;
            margin: 25px 0;
        }
        .security-info h3 {
            color: #856404;
            margin: 0 0 10px;
            font-size: 16px;
        }
        .security-info ul {
            margin: 10px 0 0;
            padding-left: 20px;
            color: #856404;
        }
        .footer {
            background: #f8f9fa;
            padding: 25px 30px;
            border-top: 1px solid #dee2e6;
            text-align: center;
        }
        .footer p {
            margin: 5px 0;
            color: #6c757d;
            font-size: 14px;
        }
        .support-link {
            color: #3F72AF;
            text-decoration: none;
        }
        .support-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="header">
            <div class="icon">🔐</div>
            <h1>Password Reset Request</h1>
        </div>

        <div class="content">
            <div class="greeting">
                Hello {{ user.get_full_name|default:user.username }},
            </div>

            <div class="message">
                We received a request to reset the password for your ATS Resume Optimizer account. 
                If you requested this password reset, please click the button below to set a new password.
            </div>

            <div style="text-align: center;">
                <a href="{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}" 
                   class="reset-button">
                    🔑 Reset My Password
                </a>
            </div>

            <div class="alternative-link">
                <p>If the button doesn't work, copy and paste this link into your browser:</p>
                <code>{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}</code>
            </div>

            <div class="security-info">
                <h3>🛡️ Security Information</h3>
                <ul>
                    <li>This link will expire in 1 hour for security reasons</li>
                    <li>If you didn't request this reset, you can safely ignore this email</li>
                    <li>Your password won't change until you create a new one using the link above</li>
                    <li>For security, this link can only be used once</li>
                </ul>
            </div>

            <div class="message" style="margin-top: 30px; color: #6c757d; font-size: 14px;">
                If you didn't request a password reset, please ignore this email or 
                <a href="mailto:support@atsresume.com" class="support-link">contact our support team</a> 
                if you have concerns about your account security.
            </div>
        </div>

        <div class="footer">
            <p><strong>ATS Resume Optimizer</strong></p>
            <p>Optimizing careers, one resume at a time</p>
            <p>
                Need help? <a href="mailto:support@atsresume.com" class="support-link">Contact Support</a>
            </p>
        </div>
    </div>
</body>
</html>

<!-- templates/registration/password_reset_subject.txt -->
🔐 Password Reset for Your ATS Resume Optimizer Account

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/registration/password_reset_form.html =====

<!-- templates/registration/password_reset_form.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Reset Password | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .main-content {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: calc(100vh - 80px);
      padding: 20px;
    }

    .reset-container {
      background: #F9F7F7;
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      max-width: 500px;
      width: 100%;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .reset-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(63,114,175,0.05), transparent);
      transform: rotate(45deg);
      pointer-events: none;
    }

    .reset-header {
      position: relative;
      z-index: 2;
      margin-bottom: 40px;
    }

    .reset-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 25px;
      box-shadow: 0 10px 30px rgba(63,114,175,0.3);
    }

    .reset-icon i {
      font-size: 2rem;
      color: #F9F7F7;
    }

    .reset-title {
      font-size: 2rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 700;
    }

    .reset-description {
      color: #3F72AF;
      font-size: 1.1rem;
      line-height: 1.6;
      margin-bottom: 30px;
    }

    .reset-form {
      position: relative;
      z-index: 2;
    }

    .form-group {
      margin-bottom: 25px;
      text-align: left;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 8px;
      font-size: 0.95rem;
    }

    .input-wrapper {
      position: relative;
    }

    .form-control {
      width: 100%;
      padding: 18px 20px;
      padding-left: 55px;
      border: 2px solid #DBE2EF;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(249, 247, 247, 0.8);
      color: #112D4E;
      outline: none;
    }

    .form-control:focus {
      border-color: #3F72AF;
      box-shadow: 0 0 0 4px rgba(63,114,175,.1);
      background: #FFFFFF;
      transform: translateY(-2px);
    }

    .input-icon {
      position: absolute;
      left: 18px;
      top: 50%;
      transform: translateY(-50%);
      color: #3F72AF;
      font-size: 1.2rem;
      transition: all 0.3s ease;
    }

    .form-control:focus + .input-icon {
      color: #112D4E;
      transform: translateY(-50%) scale(1.1);
    }

    .btn-reset {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 18px 35px;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      margin-top: 10px;
      position: relative;
      overflow: hidden;
    }

    .btn-reset::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s ease;
    }

    .btn-reset:hover::before {
      left: 100%;
    }

    .btn-reset:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(63,114,175,.4);
    }

    .back-link {
      text-align: center;
      margin-top: 30px;
      padding-top: 25px;
      border-top: 1px solid #DBE2EF;
      position: relative;
      z-index: 2;
    }

    .back-link a {
      color: #3F72AF;
      text-decoration: none;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 10px 20px;
      border-radius: 10px;
      transition: all 0.3s ease;
    }

    .back-link a:hover {
      background: rgba(63, 114, 175, 0.1);
      color: #112D4E;
    }

    .security-note {
      background: rgba(219, 226, 239, 0.3);
      border: 1px solid #DBE2EF;
      padding: 20px;
      border-radius: 12px;
      margin-top: 30px;
      position: relative;
      z-index: 2;
    }

    .security-note h4 {
      color: #112D4E;
      margin-bottom: 10px;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .security-note p {
      color: #3F72AF;
      font-size: 0.9rem;
      line-height: 1.5;
      margin: 0;
    }

    @media (max-width: 768px) {
      .main-content {
        min-height: calc(100vh - 60px);
        padding: 10px;
      }

      .reset-container {
        padding: 40px 25px;
        margin: 10px;
      }

      .reset-title {
        font-size: 1.7rem;
      }

      .whatsapp-float {
        width: 50px;
        height: 50px;
        right: 15px;
      }

      .whatsapp-float i {
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="reset-container">
      <div class="reset-header">
        <div class="reset-icon">
          <i class="fas fa-key"></i>
        </div>
        <h1 class="reset-title">Reset Your Password</h1>
        <p class="reset-description">
          Enter your email address below and we'll send you a link to reset your password.
        </p>
      </div>

      <form method="post" class="reset-form">
        {% csrf_token %}
        
        <div class="form-group">
          <label for="id_email">Email Address</label>
          <div class="input-wrapper">
            {{ form.email }}
            <i class="fas fa-envelope input-icon"></i>
          </div>
          {% if form.email.errors %}
            <div style="color: #dc3545; font-size: 0.9rem; margin-top: 8px;">
              {% for error in form.email.errors %}
                <div><i class="fas fa-exclamation-circle"></i> {{ error }}</div>
              {% endfor %}
            </div>
          {% endif %}
        </div>

        <button type="submit" class="btn-reset">
          <i class="fas fa-paper-plane"></i> Send Reset Link
        </button>
      </form>

      <div class="security-note">
        <h4><i class="fas fa-shield-alt"></i> Security Information</h4>
        <p>
          For your security, the password reset link will expire in 1 hour and can only be used once. 
          If you don't receive the email within a few minutes, please check your spam folder.
        </p>
      </div>

      <div class="back-link">
        <a href="{% url 'login' %}">
          <i class="fas fa-arrow-left"></i> Back to Login
        </a>
      </div>
    </div>
  </div>
</body>
</html>

<!-- templates/registration/password_reset_done.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Password Reset Sent | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .main-content {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: calc(100vh - 80px);
      padding: 20px;
    }

    .success-container {
      background: #F9F7F7;
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      max-width: 600px;
      width: 100%;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .success-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(40, 167, 69, 0.05), transparent);
      transform: rotate(45deg);
      pointer-events: none;
    }

    .success-header {
      position: relative;
      z-index: 2;
      margin-bottom: 40px;
    }

    .success-icon {
      width: 100px;
      height: 100px;
      background: linear-gradient(135deg, #28a745, #20c997);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 25px;
      box-shadow: 0 10px 30px rgba(40, 167, 69, 0.3);
      animation: successPulse 2s infinite;
    }

    @keyframes successPulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    .success-icon i {
      font-size: 3rem;
      color: #F9F7F7;
    }

    .success-title {
      font-size: 2.2rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .success-description {
      color: #3F72AF;
      font-size: 1.2rem;
      line-height: 1.6;
      margin-bottom: 30px;
    }

    .next-steps {
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      padding: 30px;
      border-radius: 15px;
      margin: 30px 0;
      position: relative;
      z-index: 2;
    }

    .next-steps h3 {
      color: #112D4E;
      margin-bottom: 20px;
      font-size: 1.3rem;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .steps-list {
      list-style: none;
      padding: 0;
      text-align: left;
    }

    .steps-list li {
      color: #3F72AF;
      margin-bottom: 15px;
      padding-left: 30px;
      position: relative;
      font-size: 1rem;
      line-height: 1.5;
    }

    .steps-list li::before {
      content: counter(step-counter);
      counter-increment: step-counter;
      position: absolute;
      left: 0;
      top: 0;
      background: #3F72AF;
      color: white;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: 600;
    }

    .steps-list {
      counter-reset: step-counter;
    }

    .action-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
      flex-wrap: wrap;
      position: relative;
      z-index: 2;
    }

    .btn {
      padding: 15px 25px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 600;
      font-size: 1rem;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
    }

    .btn-secondary {
      background: transparent;
      color: #3F72AF;
      border: 2px solid #3F72AF;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,0.3);
    }

    .btn-primary:hover {
      color: #F9F7F7;
    }

    .btn-secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }

    @media (max-width: 768px) {
      .main-content {
        min-height: calc(100vh - 60px);
        padding: 10px;
      }

      .success-container {
        padding: 40px 25px;
        margin: 10px;
      }

      .success-title {
        font-size: 1.8rem;
      }

      .action-buttons {
        flex-direction: column;
        align-items: center;
      }

      .btn {
        width: 100%;
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="success-container">
      <div class="success-header">
        <div class="success-icon">
          <i class="fas fa-check"></i>
        </div>
        <h1 class="success-title">Email Sent Successfully!</h1>
        <p class="success-description">
          We've sent password reset instructions to your email address. 
          Please check your inbox and follow the link to reset your password.
        </p>
      </div>

      <div class="next-steps">
        <h3><i class="fas fa-list-check"></i> What's Next?</h3>
        <ol class="steps-list">
          <li>Check your email inbox for a message from ATS Resume Optimizer</li>
          <li>Click the "Reset My Password" button in the email</li>
          <li>Create a new secure password for your account</li>
          <li>Log in with your new password and continue optimizing!</li>
        </ol>
      </div>

      <div class="action-buttons">
        <a href="{% url 'login' %}" class="btn btn-primary">
          <i class="fas fa-sign-in-alt"></i> Back to Login
        </a>
        <a href="{% url 'landing' %}" class="btn btn-secondary">
          <i class="fas fa-home"></i> Go to Homepage
        </a>
      </div>

      <div style="margin-top: 30px; padding: 20px; background: rgba(255, 193, 7, 0.1); border-radius: 10px; position: relative; z-index: 2;">
        <p style="color: #856404; font-size: 0.9rem; margin: 0;">
          <i class="fas fa-info-circle"></i> 
          <strong>Didn't receive the email?</strong> Check your spam folder or 
          <a href="{% url 'password_reset' %}" style="color: #3F72AF;">try again</a>.
        </p>
      </div>
    </div>
  </div>
</body>
</html>

<!-- templates/registration/password_reset_confirm.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Set New Password | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .main-content {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: calc(100vh - 80px);
      padding: 20px;
    }

    .password-container {
      background: #F9F7F7;
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      max-width: 500px;
      width: 100%;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .password-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(63,114,175,0.05), transparent);
      transform: rotate(45deg);
      pointer-events: none;
    }

    .password-header {
      position: relative;
      z-index: 2;
      margin-bottom: 40px;
    }

    .password-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 25px;
      box-shadow: 0 10px 30px rgba(63,114,175,0.3);
    }

    .password-icon i {
      font-size: 2rem;
      color: #F9F7F7;
    }

    .password-title {
      font-size: 2rem;
      color: #112D4E;
      margin-bottom: 15px;
      font-weight: 700;
    }

    .password-description {
      color: #3F72AF;
      font-size: 1.1rem;
      line-height: 1.6;
      margin-bottom: 30px;
    }

    .password-form {
      position: relative;
      z-index: 2;
    }

    .form-group {
      margin-bottom: 25px;
      text-align: left;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 8px;
      font-size: 0.95rem;
    }

    .input-wrapper {
      position: relative;
    }

    .form-control {
      width: 100%;
      padding: 18px 20px;
      padding-left: 55px;
      border: 2px solid #DBE2EF;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(249, 247, 247, 0.8);
      color: #112D4E;
      outline: none;
    }

    .form-control:focus {
      border-color: #3F72AF;
      box-shadow: 0 0 0 4px rgba(63,114,175,.1);
      background: #FFFFFF;
      transform: translateY(-2px);
    }

    .input-icon {
      position: absolute;
      left: 18px;
      top: 50%;
      transform: translateY(-50%);
      color: #3F72AF;
      font-size: 1.2rem;
      transition: all 0.3s ease;
    }

    .form-control:focus + .input-icon {
      color: #112D4E;
      transform: translateY(-50%) scale(1.1);
    }

    .btn-set-password {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 18px 35px;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      margin-top: 10px;
      position: relative;
      overflow: hidden;
    }

    .btn-set-password::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s ease;
    }

    .btn-set-password:hover::before {
      left: 100%;
    }

    .btn-set-password:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(63,114,175,.4);
    }

    .password-requirements {
      background: rgba(219, 226, 239, 0.3);
      border: 1px solid #DBE2EF;
      padding: 20px;
      border-radius: 12px;
      margin-top: 20px;
      position: relative;
      z-index: 2;
      text-align: left;
    }

    .password-requirements h4 {
      color: #112D4E;
      margin-bottom: 15px;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .password-requirements ul {
      margin: 0;
      padding-left: 20px;
      color: #3F72AF;
    }

    .password-requirements li {
      font-size: 0.9rem;
      margin-bottom: 8px;
      line-height: 1.4;
    }

    .error-messages {
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: #F9F7F7;
      padding: 15px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      font-size: 0.95rem;
      position: relative;
      z-index: 2;
    }

    .error-messages ul {
      margin: 0;
      padding-left: 15px;
      list-style: none;
    }

    .error-messages li {
      margin-bottom: 5px;
      position: relative;
      padding-left: 15px;
    }

    .error-messages li::before {
      content: '•';
      position: absolute;
      left: 0;
      color: #F9F7F7;
    }

    @media (max-width: 768px) {
      .main-content {
        min-height: calc(100vh - 60px);
        padding: 10px;
      }

      .password-container {
        padding: 40px 25px;
        margin: 10px;
      }

      .password-title {
        font-size: 1.7rem;
      }

      .whatsapp-float {
        width: 50px;
        height: 50px;
        right: 15px;
      }

      .whatsapp-float i {
        font-size: 20px;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="password-container">
      {% if validlink %}
        <div class="password-header">
          <div class="password-icon">
            <i class="fas fa-lock"></i>
          </div>
          <h1 class="password-title">Set New Password</h1>
          <p class="password-description">
            Please enter your new password below. Make sure it's secure and you'll remember it.
          </p>
        </div>

        {% if form.errors %}
          <div class="error-messages">
            {% for field, errors in form.errors.items %}
              {% for error in errors %}
                <ul><li>{{ error }}</li></ul>
              {% endfor %}
            {% endfor %}
          </div>
        {% endif %}

        <form method="post" class="password-form">
          {% csrf_token %}
          
          <div class="form-group">
            <label for="id_new_password1">New Password</label>
            <div class="input-wrapper">
              {{ form.new_password1 }}
              <i class="fas fa-lock input-icon"></i>
            </div>
          </div>

          <div class="form-group">
            <label for="id_new_password2">Confirm New Password</label>
            <div class="input-wrapper">
              {{ form.new_password2 }}
              <i class="fas fa-check-circle input-icon"></i>
            </div>
          </div>

          <button type="submit" class="btn-set-password">
            <i class="fas fa-check"></i> Set New Password
          </button>
        </form>

        <div class="password-requirements">
          <h4><i class="fas fa-shield-alt"></i> Password Requirements</h4>
          <ul>
            <li>At least 8 characters long</li>
            <li>Cannot be too similar to your personal information</li>
            <li>Cannot be a commonly used password</li>
            <li>Cannot be entirely numeric</li>
          </ul>
        </div>
      {% else %}
        <div class="password-header">
          <div class="password-icon" style="background: linear-gradient(135deg, #dc3545, #c82333);">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <h1 class="password-title">Invalid Reset Link</h1>
          <p class="password-description">
            This password reset link is invalid or has expired. Please request a new password reset.
          </p>
        </div>

        <div style="margin-top: 30px;">
          <a href="{% url 'password_reset' %}" 
             style="display: inline-flex; align-items: center; gap: 8px; background: linear-gradient(135deg, #3F72AF, #112D4E); color: #F9F7F7; padding: 15px 25px; border-radius: 12px; text-decoration: none; font-weight: 600; transition: all 0.3s ease;">
            <i class="fas fa-redo"></i> Request New Reset Link
          </a>
        </div>
      {% endif %}
    </div>
  </div>
</body>
</html>

<!-- templates/registration/password_reset_complete.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Password Reset Complete | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    .main-content {
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: calc(100vh - 80px);
      padding: 20px;
    }

    .complete-container {
      background: #F9F7F7;
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      max-width: 600px;
      width: 100%;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .complete-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(40, 167, 69, 0.05), transparent);
      transform: rotate(45deg);
      pointer-events: none;
    }

    .complete-header {
      position: relative;
      z-index: 2;
      margin-bottom: 40px;
    }

    .complete-icon {
      width: 120px;
      height: 120px;
      background: linear-gradient(135deg, #28a745, #20c997);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 25px;
      box-shadow: 0 15px 40px rgba(40, 167, 69, 0.3);
      animation: successBounce 1.5s ease-out;
    }

    @keyframes successBounce {
      0% { transform: scale(0); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }

    .complete-icon i {
      font-size: 3.5rem;
      color: #F9F7F7;
    }

    .complete-title {
      font-size: 2.5rem;
      color: #112D4E;
      margin-bottom: 20px;
      font-weight: 700;
    }

    .complete-description {
      color: #3F72AF;
      font-size: 1.2rem;
      line-height: 1.6;
      margin-bottom: 40px;
    }

    .celebration-banner {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: #F9F7F7;
      padding: 25px;
      border-radius: 15px;
      margin: 30px 0;
      position: relative;
      z-index: 2;
    }

    .celebration-banner h3 {
      margin-bottom: 15px;
      font-size: 1.4rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .celebration-banner p {
      margin: 0;
      opacity: 0.95;
      font-size: 1.1rem;
    }

    .action-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
      flex-wrap: wrap;
      position: relative;
      z-index: 2;
    }

    .btn {
      padding: 18px 30px;
      border-radius: 12px;
      text-decoration: none;
      font-weight: 700;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
    }

    .btn-secondary {
      background: transparent;
      color: #3F72AF;
      border: 2px solid #3F72AF;
    }

    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(63,114,175,0.3);
    }

    .btn-primary:hover {
      color: #F9F7F7;
    }

    .btn-secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }

    .security-reminder {
      background: rgba(255, 193, 7, 0.1);
      border: 1px solid #ffeaa7;
      padding: 20px;
      border-radius: 12px;
      margin-top: 30px;
      position: relative;
      z-index: 2;
    }

    .security-reminder h4 {
      color: #856404;
      margin-bottom: 10px;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .security-reminder p {
      color: #856404;
      font-size: 0.9rem;
      line-height: 1.5;
      margin: 0;
    }

    @media (max-width: 768px) {
      .main-content {
        min-height: calc(100vh - 60px);
        padding: 10px;
      }

      .complete-container {
        padding: 40px 25px;
        margin: 10px;
      }

      .complete-title {
        font-size: 2rem;
      }

      .action-buttons {
        flex-direction: column;
        align-items: center;
      }

      .btn {
        width: 100%;
        justify-content: center;
      }

      .complete-icon {
        width: 100px;
        height: 100px;
      }

      .complete-icon i {
        font-size: 3rem;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="complete-container">
      <div class="complete-header">
        <div class="complete-icon">
          <i class="fas fa-check"></i>
        </div>
        <h1 class="complete-title">🎉 Password Reset Complete!</h1>
        <p class="complete-description">
          Your password has been successfully changed! You can now log in 
          to your account with your new password and continue optimizing your career.
        </p>
      </div>

      <div class="celebration-banner">
        <h3><i class="fas fa-trophy"></i> You're All Set!</h3>
        <p>
          Your account is secure and ready to go. Start creating ATS-optimized resumes 
          and take your career to the next level.
        </p>
      </div>

      <div class="action-buttons">
        <a href="{% url 'login' %}" class="btn btn-primary">
          <i class="fas fa-sign-in-alt"></i> Log In to Your Account
        </a>
        <a href="{% url 'landing' %}" class="btn btn-secondary">
          <i class="fas fa-home"></i> Back to Homepage
        </a>
      </div>

      <div class="security-reminder">
        <h4><i class="fas fa-shield-alt"></i> Security Reminder</h4>
        <p>
          Keep your password secure and don't share it with anyone. If you suspect 
          unauthorized access to your account, change your password immediately.
        </p>
      </div>
    </div>
  </div>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/registration/signup.html =====

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Create Account | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF 0%, #F9F7F7 100%);
      min-height: 100vh;
      color: #112D4E;
      position: relative;
    }

    /* Navigation will be included here */
    .main-content {
      padding: 20px 0;
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    /* Main Container */
    .signup-container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
      position: relative;
      z-index: 10;
    }

    .brand-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .brand-header h1 {
      font-size: 2.5rem;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 10px;
      font-weight: 800;
    }

    .brand-header p {
      color: #3F72AF;
      font-size: 1.1rem;
      opacity: 0.9;
    }

    .signup-card {
      background: rgba(249, 247, 247, 0.95);
      backdrop-filter: blur(10px);
      padding: 50px 40px;
      border-radius: 25px;
      box-shadow: 0 25px 50px rgba(17,45,78,.15);
      border: 1px solid rgba(219, 226, 239, 0.5);
      position: relative;
      overflow: hidden;
    }

    .signup-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(63,114,175,0.05), transparent);
      transform: rotate(45deg);
      pointer-events: none;
    }

    .card-header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
      z-index: 2;
    }

    .card-header .auth-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 25px;
      box-shadow: 0 10px 30px rgba(63,114,175,0.3);
    }

    .card-header .auth-icon i {
      font-size: 2rem;
      color: #F9F7F7;
    }

    .card-header h2 {
      color: #112D4E;
      font-size: 2rem;
      margin-bottom: 10px;
      font-weight: 700;
    }

    .card-header p {
      color: #3F72AF;
      font-size: 1.1rem;
      opacity: 0.9;
    }

    .benefits-banner {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 25px;
      border-radius: 15px;
      margin-bottom: 35px;
      text-align: center;
      position: relative;
      z-index: 2;
    }

    .benefits-banner h3 {
      margin-bottom: 15px;
      font-size: 1.3rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .benefits-list {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      font-size: 0.95rem;
    }

    .benefits-list span {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(249, 247, 247, 0.1);
      padding: 8px 12px;
      border-radius: 8px;
      backdrop-filter: blur(5px);
    }

    .signup-form {
      display: flex;
      flex-direction: column;
      gap: 25px;
      position: relative;
      z-index: 2;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .form-group {
      position: relative;
    }

    .form-group.full-width {
      grid-column: span 2;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 8px;
      font-size: 0.95rem;
    }

    .input-wrapper {
      position: relative;
    }

    .form-control {
      width: 100%;
      padding: 18px 20px;
      padding-left: 50px;
      border: 2px solid #DBE2EF;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: rgba(249, 247, 247, 0.8);
      color: #112D4E;
      outline: none;
    }

    .form-control:focus {
      border-color: #3F72AF;
      box-shadow: 0 0 0 4px rgba(63,114,175,.1);
      background: #FFFFFF;
      transform: translateY(-2px);
    }

    .form-control.error {
      border-color: #dc3545;
      background: rgba(220, 53, 69, 0.1);
    }

    .form-control.success {
      border-color: #28a745;
      background: rgba(40, 167, 69, 0.1);
    }

    .input-icon {
      position: absolute;
      left: 18px;
      top: 50%;
      transform: translateY(-50%);
      color: #3F72AF;
      font-size: 1.1rem;
      pointer-events: none;
      transition: all 0.3s ease;
    }

    .form-control:focus + .input-icon {
      color: #112D4E;
      transform: translateY(-50%) scale(1.1);
    }

    .form-control.error + .input-icon {
      color: #dc3545;
    }

    .form-control.success + .input-icon {
      color: #28a745;
    }

    .required {
      color: #dc3545;
      font-weight: bold;
    }

    .btn-signup {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 20px;
      border: none;
      border-radius: 15px;
      font-size: 1.2rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 20px;
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .btn-signup::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s ease;
    }

    .btn-signup:hover::before {
      left: 100%;
    }

    .btn-signup:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(63,114,175,.4);
    }

    .btn-signup:active {
      transform: translateY(-1px);
    }

    .btn-signup.loading {
      pointer-events: none;
      opacity: 0.8;
    }

    .btn-signup.loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid transparent;
      border-top: 2px solid #F9F7F7;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .divider {
      position: relative;
      text-align: center;
      margin: 30px 0;
    }

    .divider::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, #DBE2EF, transparent);
    }

    .divider span {
      background: rgba(249, 247, 247, 0.95);
      padding: 0 20px;
      color: #3F72AF;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .login-link {
      text-align: center;
      margin-top: 30px;
      padding-top: 25px;
      border-top: 1px solid #DBE2EF;
      position: relative;
      z-index: 2;
    }

    .login-link p {
      color: #3F72AF;
      margin-bottom: 15px;
      font-size: 1rem;
    }

    .login-link a {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      color: #112D4E;
      text-decoration: none;
      font-weight: 600;
      padding: 12px 25px;
      border: 2px solid #3F72AF;
      border-radius: 12px;
      transition: all 0.3s ease;
      background: transparent;
    }

    .login-link a:hover {
      background: #3F72AF;
      color: #F9F7F7;
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,.3);
    }

    .error-messages {
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: #F9F7F7;
      padding: 15px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border-left: 4px solid #a71e2a;
      font-size: 0.95rem;
      position: relative;
      z-index: 2;
      display: flex;
      align-items: flex-start;
      gap: 10px;
    }

    .error-messages i {
      font-size: 1.2rem;
      margin-top: 2px;
    }

    .error-messages ul {
      margin: 0;
      padding-left: 15px;
      list-style: none;
    }

    .error-messages li {
      margin-bottom: 5px;
      position: relative;
      padding-left: 15px;
    }

    .error-messages li::before {
      content: '•';
      position: absolute;
      left: 0;
      color: #F9F7F7;
    }

    .help-text {
      font-size: 0.85rem;
      color: #3F72AF;
      margin-top: 5px;
      line-height: 1.4;
    }

    .password-requirements {
      background: rgba(219, 226, 239, 0.3);
      border: 1px solid #DBE2EF;
      padding: 20px;
      border-radius: 12px;
      margin-top: 20px;
      position: relative;
      z-index: 2;
    }

    .password-requirements h4 {
      color: #112D4E;
      margin-bottom: 15px;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .password-requirements ul {
      margin: 0;
      padding-left: 20px;
      color: #3F72AF;
    }

    .password-requirements li {
      font-size: 0.9rem;
      margin-bottom: 8px;
      line-height: 1.4;
    }

    /* Form Validation Styling */
    .field-error {
      color: #dc3545;
      font-size: 0.85rem;
      margin-top: 5px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .field-success {
      color: #28a745;
      font-size: 0.85rem;
      margin-top: 5px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .main-content {
        padding: 10px 0;
      }

      .form-row {
        grid-template-columns: 1fr;
      }

      .form-group.full-width {
        grid-column: span 1;
      }

      .signup-card {
        padding: 40px 25px;
        margin: 10px;
      }

      .brand-header h1 {
        font-size: 2rem;
      }

      .card-header h2 {
        font-size: 1.7rem;
      }

      .benefits-list {
        grid-template-columns: 1fr;
        gap: 10px;
      }

      .whatsapp-float {
        width: 50px;
        height: 50px;
        right: 15px;
      }

      .whatsapp-float i {
        font-size: 20px;
      }
    }

    @media (max-width: 480px) {
      .main-content {
        padding: 5px 0;
      }

      .signup-container {
        padding: 10px;
      }

      .signup-card {
        padding: 30px 20px;
      }

      .form-control {
        padding: 15px 18px;
        padding-left: 45px;
      }

      .input-icon {
        left: 15px;
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="main-content">
    <div class="signup-container">
      <div class="brand-header">
        <h1><i class="fas fa-rocket"></i> Career Booster</h1>
        <p>Join thousands optimizing their career success</p>
      </div>

      <div class="signup-card">
        <div class="card-header">
          <div class="auth-icon">
            <i class="fas fa-user-plus"></i>
          </div>
          <h2>Create Your Account</h2>
          <p>Start your journey to career success today</p>
        </div>

        <div class="benefits-banner">
          <h3><i class="fas fa-gift"></i> What You Get Free</h3>
          <div class="benefits-list">
            <span><i class="fas fa-check"></i> AI Resume Optimization</span>
            <span><i class="fas fa-check"></i> ATS Compatibility Scoring</span>
            <span><i class="fas fa-check"></i> University Templates</span>
            <span><i class="fas fa-check"></i> Professional Dashboard</span>
          </div>
        </div>

        <form method="post" class="signup-form" id="signupForm">
          {% csrf_token %}
          
          {% if form.non_field_errors %}
            <div class="error-messages">
              <i class="fas fa-exclamation-triangle"></i>
              <div>
                <ul>
                  {% for error in form.non_field_errors %}
                    <li>{{ error }}</li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          <div class="form-row">
            <div class="form-group">
              <label>{{ form.username.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                {{ form.username }}
                <i class="fas fa-user input-icon"></i>
              </div>
              {% if form.username.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.username.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label>{{ form.email.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                <input type="email" 
                       name="email" 
                       id="id_email" 
                       required 
                       class="form-control"
                       placeholder="your.email@example.com"
                       value="{{ form.email.value|default_if_none:'' }}">
                <i class="fas fa-envelope input-icon"></i>
              </div>
              {% if form.email.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.email.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label>{{ form.country_code.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                {{ form.country_code }}
                <i class="fas fa-flag input-icon"></i>
              </div>
              {% if form.country_code.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.country_code.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label>{{ form.phone_number.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                {{ form.phone_number }}
                <i class="fas fa-phone input-icon"></i>
              </div>
              {% if form.phone_number.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.phone_number.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label>{{ form.city.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                {{ form.city }}
                <i class="fas fa-map-marker-alt input-icon"></i>
              </div>
              {% if form.city.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.city.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label>{{ form.country.label }} <span class="required">*</span></label>
              <div class="input-wrapper">
                {{ form.country }}
                <i class="fas fa-globe input-icon"></i>
              </div>
              {% if form.country.errors %}
                <div class="field-error">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.country.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-group full-width">
            <label>{{ form.password1.label }} <span class="required">*</span></label>
            <div class="input-wrapper">
              {{ form.password1 }}
              <i class="fas fa-lock input-icon"></i>
            </div>
            {% if form.password1.errors %}
              <div class="field-error">
                <i class="fas fa-exclamation-circle"></i>
                {{ form.password1.errors.0 }}
              </div>
            {% endif %}
          </div>

          <div class="form-group full-width">
            <label>{{ form.password2.label }} <span class="required">*</span></label>
            <div class="input-wrapper">
              {{ form.password2 }}
              <i class="fas fa-check-circle input-icon"></i>
            </div>
            {% if form.password2.errors %}
              <div class="field-error">
                <i class="fas fa-exclamation-circle"></i>
                {{ form.password2.errors.0 }}
              </div>
            {% endif %}
          </div>

          <div class="password-requirements">
            <h4><i class="fas fa-shield-alt"></i> Password Requirements</h4>
            <ul>
              <li>At least 8 characters long</li>
              <li>Cannot be too similar to your personal information</li>
              <li>Cannot be a commonly used password</li>
              <li>Cannot be entirely numeric</li>
            </ul>
          </div>

          <button type="submit" class="btn-signup">
            <i class="fas fa-rocket"></i> Create My Free Account
          </button>
        </form>

        <div class="divider">
          <span>Already optimizing your career?</span>
        </div>

        <div class="login-link">
          <p>Welcome back to your dashboard</p>
          <a href="{% url 'login' %}">
            <i class="fas fa-sign-in-alt"></i> Sign In to Account
          </a>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Form validation and UX improvements
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('signupForm');
      const inputs = document.querySelectorAll('.form-control');
      const submitBtn = document.querySelector('.btn-signup');

      // Real-time validation
      inputs.forEach(input => {
        input.addEventListener('blur', validateField);
        input.addEventListener('input', clearFieldError);
      });

      // Form submission handling
      form.addEventListener('submit', function(e) {
        let isValid = true;
        
        // Validate all fields
        inputs.forEach(input => {
          if (!validateField.call(input)) {
            isValid = false;
          }
        });

        if (isValid) {
          submitBtn.classList.add('loading');
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating Account...';
        }
      });

      function validateField() {
        const value = this.value.trim();
        const wrapper = this.closest('.form-group');
        let isValid = true;

        // Remove existing validation classes and messages
        this.classList.remove('error', 'success');
        const existingError = wrapper.querySelector('.field-error');
        const existingSuccess = wrapper.querySelector('.field-success');
        if (existingError) existingError.remove();
        if (existingSuccess) existingSuccess.remove();

        // Basic validation
        if (this.hasAttribute('required') && value === '') {
          showFieldError(wrapper, this, 'This field is required');
          isValid = false;
        } else if (this.type === 'email' && value && !isValidEmail(value)) {
          showFieldError(wrapper, this, 'Please enter a valid email address');
          isValid = false;
        } else if (this.name === 'username' && value && value.length < 3) {
          showFieldError(wrapper, this, 'Username must be at least 3 characters');
          isValid = false;
        } else if (this.name === 'password1' && value && value.length < 8) {
          showFieldError(wrapper, this, 'Password must be at least 8 characters');
          isValid = false;
        } else if (this.name === 'password2' && value) {
          const password1 = document.querySelector('[name="password1"]').value;
          if (value !== password1) {
            showFieldError(wrapper, this, 'Passwords do not match');
            isValid = false;
          }
        } else if (value) {
          showFieldSuccess(wrapper, this);
        }

        return isValid;
      }

      function clearFieldError() {
        this.classList.remove('error');
        const wrapper = this.closest('.form-group');
        const existingError = wrapper.querySelector('.field-error');
        if (existingError) existingError.remove();
      }

      function showFieldError(wrapper, input, message) {
        input.classList.add('error');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'field-error';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
        wrapper.appendChild(errorDiv);
      }

      function showFieldSuccess(wrapper, input) {
        input.classList.add('success');
        const successDiv = document.createElement('div');
        successDiv.className = 'field-success';
        successDiv.innerHTML = `<i class="fas fa-check-circle"></i> Looks good!`;
        wrapper.appendChild(successDiv);
      }

      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      // Password confirmation real-time validation
      const password1 = document.querySelector('[name="password1"]');
      const password2 = document.querySelector('[name="password2"]');

      if (password1 && password2) {
        password2.addEventListener('input', function() {
          if (this.value && password1.value) {
            const wrapper = this.closest('.form-group');
            const existingError = wrapper.querySelector('.field-error');
            const existingSuccess = wrapper.querySelector('.field-success');
            
            if (existingError) existingError.remove();
            if (existingSuccess) existingSuccess.remove();
            
            this.classList.remove('error', 'success');
            
            if (this.value === password1.value) {
              showFieldSuccess(wrapper, this);
            } else {
              showFieldError(wrapper, this, 'Passwords do not match');
            }
          }
        });
      }
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/emails/first_resume_notification.html =====

<!-- templates/emails/first_resume_notification.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New User First Resume Upload</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .email-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #3F72AF, #112D4E);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 28px;
            font-weight: 700;
        }
        .header p {
            margin: 10px 0 0;
            opacity: 0.9;
            font-size: 16px;
        }
        .content {
            padding: 30px;
        }
        .section {
            margin-bottom: 30px;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3F72AF;
            background: #f8f9fa;
        }
        .section h2 {
            color: #112D4E;
            margin: 0 0 15px;
            font-size: 20px;
            font-weight: 600;
        }
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 15px 0;
        }
        .info-item {
            background: white;
            padding: 12px;
            border-radius: 5px;
            border: 1px solid #e9ecef;
        }
        .info-label {
            font-weight: 600;
            color: #3F72AF;
            font-size: 14px;
            margin-bottom: 5px;
        }
        .info-value {
            color: #112D4E;
            font-size: 15px;
        }
        .highlight {
            background: linear-gradient(135deg, #112D4E, #3F72AF);
            color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            margin: 20px 0;
        }
        .highlight h3 {
            margin: 0 0 10px;
            font-size: 18px;
        }
        .file-info {
            background: #e8f4fd;
            border: 1px solid #b8daff;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .footer {
            background: #f8f9fa;
            padding: 20px 30px;
            border-top: 1px solid #dee2e6;
            text-align: center;
            color: #6c757d;
            font-size: 14px;
        }
        .timestamp {
            color: #6c757d;
            font-size: 13px;
            font-style: italic;
        }
        @media (max-width: 600px) {
            .info-grid {
                grid-template-columns: 1fr;
            }
            .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="email-container">
        <div class="header">
            <h1>🎯 New User First Resume Upload</h1>
            <p>A new user has uploaded their first resume to the platform</p>
        </div>

        <div class="content">
            <!-- User Information Section -->
            <div class="section">
                <h2>👤 User Information</h2>
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Username</div>
                        <div class="info-value">{{ user.username }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Email</div>
                        <div class="info-value">{{ user.email }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Date Joined</div>
                        <div class="info-value">{{ user_info.date_joined|date:"F d, Y H:i" }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Last Login</div>
                        <div class="info-value">
                            {% if user_info.last_login %}
                                {{ user_info.last_login|date:"F d, Y H:i" }}
                            {% else %}
                                First login
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Signup Form Details Section -->
            <div class="section">
                <h2>📝 Signup Form Details</h2>
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Phone Number</div>
                        <div class="info-value">{{ signup_data.full_phone }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">City</div>
                        <div class="info-value">{{ signup_data.city }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Country</div>
                        <div class="info-value">{{ signup_data.country }}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Signup Time</div>
                        <div class="info-value">
                            {% if signup_data.signup_time %}
                                {{ signup_data.signup_time|slice:":19" }}
                            {% else %}
                                {{ user_info.date_joined|date:"F d, Y H:i" }}
                            {% endif %}
                        </div>
                    </div>
                </div>
                
                {% if signup_data.country_code %}
                <div class="info-item" style="margin-top: 15px;">
                    <div class="info-label">Country Code</div>
                    <div class="info-value">{{ signup_data.country_code }}</div>
                </div>
                {% endif %}
            </div>

            <!-- Resume Upload Information -->
            <div class="section">
                <h2>📄 Resume Upload Details</h2>
                <div class="file-info">
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">Filename</div>
                            <div class="info-value">{{ resume_filename }}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">File Size</div>
                            <div class="info-value">
                                {% if resume_file_size %}
                                    {{ resume_file_size|filesizeformat }}
                                {% else %}
                                    Unknown
                                {% endif %}
                            </div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Upload Time</div>
                            <div class="info-value">{{ upload_time|date:"F d, Y H:i:s" }}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Time Zone</div>
                            <div class="info-value">{{ upload_time|date:"T" }}</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Account Status -->
            <div class="highlight">
                <h3>Account Status</h3>
                <p>
                    <strong>Status:</strong> 
                    {% if user_info.is_active %}✅ Active{% else %}❌ Inactive{% endif %}
                    {% if user_info.is_staff %} | 👑 Staff Member{% endif %}
                </p>
                <p style="margin: 10px 0 0; font-size: 14px; opacity: 0.9;">
                    This is the user's <strong>FIRST RESUME UPLOAD</strong> - they are a new user to the platform!
                </p>
            </div>

            <!-- Quick Actions -->
            <div class="section">
                <h2>🚀 Quick Actions</h2>
                <p>You can take the following actions:</p>
                <ul style="margin: 15px 0; padding-left: 20px; color: #495057;">
                    <li>Check the attached resume file for quality</li>
                    <li>Review user's signup information for completeness</li>
                    <li>Send welcome email if needed</li>
                    <li>Monitor user's activity for engagement</li>
                    <li>Contact user if assistance is needed: <a href="mailto:{{ user.email }}" style="color: #3F72AF;">{{ user.email }}</a></li>
                </ul>
            </div>

            <!-- Additional Information -->
            {% if profile %}
            <div class="section">
                <h2>👤 Additional Profile Information</h2>
                <div class="info-grid">
                    <!-- Add any additional profile fields here if available -->
                    <div class="info-item">
                        <div class="info-label">Profile Status</div>
                        <div class="info-value">{% if profile %}Profile Created{% else %}No Profile{% endif %}</div>
                    </div>
                </div>
            </div>
            {% endif %}
        </div>

        <div class="footer">
            <p><strong>ATS Resume Optimizer Platform</strong></p>
            <p>Admin notification sent to: {{ admin_email }}</p>
            <p class="timestamp">Generated on {{ upload_time|date:"F d, Y \a\t H:i:s T" }}</p>
        </div>
    </div>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/spa.html =====

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>

  <style>
    /* -------------  GENERIC  ------------- */
    *,*::before,*::after{margin:0;padding:0;box-sizing:border-box;}
    body{font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif;
         background:linear-gradient(135deg,#DBE2EF 0%,#F9F7F7 100%);
         min-height:100vh;color:#112D4E;}
    .container{max-width:1200px;margin:0 auto;padding:20px;}

    /* Content below navigation */
    .main-content {
      margin-top: 20px; /* Space for navigation */
    }

    /* WhatsApp Float Button - Task 12: RIGHT SIDE */
    .whatsapp-float {
      position: fixed;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #25D366, #128C7E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3);
      z-index: 1000;
      transition: all 0.3s ease;
      animation: pulse 2s infinite;
      text-decoration: none;
    }
    .whatsapp-float:hover {
      transform: translateY(-50%) scale(1.1);
      box-shadow: 0 12px 35px rgba(37, 211, 102, 0.5);
    }
    .whatsapp-float i {
      color: white;
      font-size: 24px;
    }
    @keyframes pulse {
      0% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
      50% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.6), 0 0 0 10px rgba(37, 211, 102, 0.1); }
      100% { box-shadow: 0 8px 25px rgba(37, 211, 102, 0.3); }
    }

    /* Welcome Banner for logged-in users */
    .welcome-banner {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 30px 40px;
      border-radius: 20px;
      margin-bottom: 30px;
      text-align: center;
      box-shadow: 0 10px 30px rgba(17,45,78,0.15);
      position: relative;
      overflow: hidden;
    }

    .welcome-banner::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="2" fill="white" opacity="0.1"/></svg>') repeat;
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-100px); }
    }

    .welcome-content {
      position: relative;
      z-index: 2;
    }

    .welcome-banner h2 {
      font-size: 2rem;
      margin-bottom: 10px;
      font-weight: 700;
    }

    .welcome-banner p {
      font-size: 1.1rem;
      opacity: 0.9;
      margin-bottom: 20px;
    }

    .quick-actions {
      display: flex;
      justify-content: center;
      gap: 15px;
      flex-wrap: wrap;
    }

    .quick-action-btn {
      background: rgba(249, 247, 247, 0.2);
      color: #F9F7F7;
      border: 2px solid rgba(249, 247, 247, 0.3);
      padding: 10px 20px;
      border-radius: 10px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      backdrop-filter: blur(10px);
    }

    .quick-action-btn:hover {
      background: #F9F7F7;
      color: #112D4E;
      transform: translateY(-2px);
    }

    /* -------------  HEADER  ------------- */
    .header{text-align:center;margin-bottom:40px;color:#112D4E}
    .header h1{font-size:3rem;margin-bottom:10px;text-shadow:0 2px 4px rgba(17,45,78,.3);color:#112D4E}
    .header p{font-size:1.2rem;opacity:.8;color:#3F72AF}

    /* -------------  CARD  ------------- */
    .main-content-card{background:#F9F7F7;border-radius:20px;padding:40px;
                  box-shadow:0 20px 40px rgba(17,45,78,.1);position:relative;overflow:hidden}
    .main-content-card::before{content:'';position:absolute;top:0;left:0;right:0;height:5px;
                          background:linear-gradient(90deg,#3F72AF,#112D4E,#DBE2EF)}

    /* -------------  STEPS  ------------- */
    .step{display:none;animation:fadeIn .5s ease}
    .step.active{display:block}
    @keyframes fadeIn{from{opacity:0;transform:translateY(20px)}to{opacity:1;transform:translateY(0)}}

    .step-header{display:flex;align-items:center;margin-bottom:30px;padding-bottom:20px;border-bottom:2px solid #DBE2EF}
    .step-number{background:linear-gradient(135deg,#3F72AF,#112D4E);color:#F9F7F7;width:50px;height:50px;border-radius:50%;
                 display:flex;align-items:center;justify-content:center;font-size:1.5rem;font-weight:700;margin-right:20px}
    .step-title{font-size:1.8rem;color:#112D4E}

    /* -------------  STEPPER DOTS  ------------- */
    .step-indicator{display:flex;justify-content:center;margin-bottom:40px}
    .step-dot{width:40px;height:40px;border-radius:50%;background:#DBE2EF;display:flex;
              align-items:center;justify-content:center;margin:0 10px;cursor:pointer;position:relative;transition:.3s;color:#3F72AF}
    .step-dot.active{background:#3F72AF;color:#F9F7F7}
    .step-dot.completed{background:#112D4E;color:#F9F7F7}
    .step-dot::after{content:'';position:absolute;top:50%;left:100%;width:20px;height:2px;
                     background:#DBE2EF;transform:translateY(-50%)}
    .step-dot:last-child::after{display:none}
    .step-dot.completed::after{background:#112D4E}

    /* -------------  UPLOAD AREA  ------------- */
    .upload-area{border:3px dashed #3F72AF;border-radius:15px;padding:60px 40px;text-align:center;
                 background:#F9F7F7;transition:.3s;cursor:pointer;position:relative}
    .upload-area:hover{border-color:#112D4E;background:#DBE2EF;transform:translateY(-5px)}
    .upload-area.dragover{border-color:#112D4E;background:#DBE2EF}
    .upload-icon{font-size:4rem;color:#3F72AF;margin-bottom:20px}
    .upload-text{font-size:1.2rem;color:#112D4E;margin-bottom:15px}
    .file-input{display:none}
    .uploaded-file{background:#DBE2EF;border:2px solid #3F72AF;border-radius:10px;padding:20px;margin-top:20px;display:none}
    .file-info{display:flex;align-items:center;justify-content:space-between}
    .file-details{display:flex;align-items:center}
    .file-icon{font-size:2rem;color:#3F72AF;margin-right:15px}

    /* -------------  MANUAL ENTRY SECTION  ------------- */
    .entry-options{display:flex;gap:20px;margin-bottom:30px;flex-wrap:wrap}
    .entry-option{flex:1;min-width:280px}
    .manual-entry-card{border:2px solid #DBE2EF;border-radius:15px;padding:30px;text-align:center;
                       transition:.3s;cursor:pointer;background:#F9F7F7}
    .manual-entry-card:hover{border-color:#3F72AF;transform:translateY(-5px);box-shadow:0 10px 25px rgba(17,45,78,.1)}
    .manual-entry-icon{font-size:3rem;color:#3F72AF;margin-bottom:15px}
    .manual-entry-title{font-size:1.3rem;font-weight:600;margin-bottom:10px;color:#112D4E}
    .manual-entry-description{color:#3F72AF;font-size:.9rem;line-height:1.4}

    /* -------------  RESUME LIST ENHANCEMENTS  ------------- */
    .resume-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 15px 20px;
      border: 2px solid #DBE2EF;
      border-radius: 12px;
      margin-bottom: 12px;
      background: #F9F7F7;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
    }

    .resume-item:hover {
      border-color: #3F72AF;
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(17,45,78,0.1);
    }

    .resume-item.selected {
      border-color: #28a745;
      background: #f8f9fa;
      box-shadow: 0 5px 15px rgba(40, 167, 69, 0.2);
    }

    .resume-item-left {
      display: flex;
      align-items: center;
      flex: 1;
    }

    .resume-item-info {
      margin-left: 15px;
    }

    .resume-item-name {
      font-weight: 600;
      color: #112D4E;
      font-size: 1rem;
      margin-bottom: 4px;
    }

    .resume-item-details {
      font-size: 0.85rem;
      color: #3F72AF;
      opacity: 0.8;
    }

    .resume-item-actions {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .selected-indicator {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: #28a745;
      color: white;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 0.9rem;
      animation: checkmarkBounce 0.5s ease;
    }

    .resume-item.selected .selected-indicator {
      display: flex;
    }

    @keyframes checkmarkBounce {
      0% { transform: scale(0); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1); }
    }

    .btn-select {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 0.9rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-select:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(63,114,175,0.3);
    }

    .btn-delete {
      background: #dc3545;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .btn-delete:hover {
      background: #c82333;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

    .delete-confirmation {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    }

    .delete-modal {
      background: #F9F7F7;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 20px 40px rgba(17,45,78,0.2);
      max-width: 400px;
      width: 90%;
      text-align: center;
    }

    .delete-modal h3 {
      color: #112D4E;
      margin-bottom: 15px;
      font-size: 1.3rem;
    }

    .delete-modal p {
      color: #3F72AF;
      margin-bottom: 25px;
      line-height: 1.5;
    }

    .delete-modal-actions {
      display: flex;
      gap: 15px;
      justify-content: center;
    }

    .btn-cancel {
      background: #6c757d;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-cancel:hover {
      background: #5a6268;
    }

    .btn-confirm-delete {
      background: #dc3545;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-confirm-delete:hover {
      background: #c82333;
    }

    /* -------------  TEXTAREA / PAGE SELECT  ------------- */
    .textarea-container{margin:30px 0}
    .textarea-container label{font-size:1.1rem;font-weight:600;margin-bottom:10px;color:#112D4E;display:block}
    .job-description{width:100%;min-height:200px;padding:20px;border:2px solid #DBE2EF;border-radius:10px;
                     font-size:1rem;font-family:inherit;resize:vertical;transition:.3s}
    .job-description:focus{outline:none;border-color:#3F72AF;box-shadow:0 0 0 3px rgba(63,114,175,.1)}
    .page-select{margin-top:20px;display:flex;align-items:center;gap:10px}
    .page-select label{font-weight:600;color:#112D4E}
    .page-select select{padding:10px;border:2px solid #DBE2EF;border-radius:8px}

    /* -------------  TEMPLATE GRID  ------------- */
    .templates-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:30px 0}
    .template-card{border:2px solid #DBE2EF;border-radius:15px;padding:25px;text-align:center;cursor:pointer;
                   transition:.3s;background:#F9F7F7}
    .template-card:hover{border-color:#3F72AF;transform:translateY(-5px);box-shadow:0 10px 25px rgba(17,45,78,.1)}
    .template-card.selected{border-color:#112D4E;background:#DBE2EF}
    .template-name{font-size:1.2rem;font-weight:600;margin-bottom:10px;color:#112D4E}
    .template-description{color:#3F72AF;font-size:.9rem}

    /* -------------  UNIVERSITY LOGO STYLES  ------------- */
    .template-icon-text {
      width: 60px;
      height: 60px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      font-size: 1.1rem;
      margin: 0 auto 15px;
      color: white;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .template-icon-text:hover {
      transform: scale(1.05);
      box-shadow: 0 6px 16px rgba(0,0,0,0.2);
    }
    .logo-harvard { background: linear-gradient(135deg, #A41E22, #8B1A1A); }
    .logo-mit { background: linear-gradient(135deg, #8A8B8C, #6D6E70); }
    .logo-cambridge { background: linear-gradient(135deg, #003B5C, #002A42); }
    .logo-stanford { background: linear-gradient(135deg, #8C1515, #6D1010); }
    .logo-wharton { background: linear-gradient(135deg, #011F5B, #001640); }
    .logo-berkeley { background: linear-gradient(135deg, #003262, #002247); }

    /* -------------  BUTTONS  ------------- */
    .btn{background:linear-gradient(135deg,#3F72AF,#112D4E);color:#F9F7F7;border:none;padding:15px 30px;border-radius:10px;
         font-size:1.1rem;font-weight:600;cursor:pointer;transition:.3s;display:inline-flex;align-items:center;gap:10px}
    .btn:hover{transform:translateY(-2px);box-shadow:0 8px 20px rgba(63,114,175,.3)}
    .btn:disabled{background:#DBE2EF;cursor:not-allowed;transform:none;box-shadow:none;color:#3F72AF}
    .btn-secondary{background:#DBE2EF;color:#112D4E}.btn-secondary:hover{background:#3F72AF;color:#F9F7F7}
    .btn-outline{background:transparent;color:#3F72AF;border:2px solid #3F72AF}
    .btn-outline:hover{background:#3F72AF;color:#F9F7F7}

    /* -------------  LOADING & SCORES  ------------- */
    .loading{text-align:center;padding:40px;display:none}
    .spinner{border:4px solid #DBE2EF;border-top:4px solid #3F72AF;border-radius:50%;width:60px;height:60px;
             animation:spin 1s linear infinite;margin:0 auto 20px}
    @keyframes spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}
    .progress-container{margin:30px 0}
    .progress-bar{width:100%;height:8px;background:#DBE2EF;border-radius:4px;overflow:hidden}
    .progress-fill{height:100%;background:linear-gradient(90deg,#3F72AF,#112D4E);width:0;transition:width .3s}
    .progress-text{text-align:center;margin-top:10px;font-weight:600;color:#3F72AF}
    .score-box{padding:20px;border-radius:15px;text-align:center;margin-bottom:20px;color:#F9F7F7}
    .score-number{font-size:3rem;font-weight:700}
    .score-label{font-size:1.2rem;opacity:.9}
    .ats{background:linear-gradient(135deg,#3F72AF,#112D4E)}
    .job{background:linear-gradient(135deg,#DBE2EF,#3F72AF);color:#112D4E}

    /* -------------  PREVIEW  ------------- */
    .resume-preview{background:#F9F7F7;border:1px solid #DBE2EF;border-radius:15px;padding:30px;max-height:600px;overflow-y:auto}

    /* -------------  NAV / MSGS  ------------- */
    .action-buttons{display:flex;gap:15px;justify-content:center;margin-top:30px;flex-wrap:wrap}
    .navigation{display:flex;justify-content:space-between;margin-top:30px}
    .error,.success{padding:15px;border-radius:10px;margin:20px 0;display:none;color:#F9F7F7}
    .error{background:#112D4E}.success{background:#3F72AF}

    @media(max-width:768px){
      .header h1{font-size:2rem}
      .main-content-card{padding:20px;margin:10px}
      .templates-grid{grid-template-columns:1fr}
      .navigation{flex-direction:column;gap:15px}
      .entry-options{flex-direction:column}
      .resume-item{flex-direction:column;align-items:flex-start;gap:15px}
      .resume-item-actions{align-self:stretch;justify-content:space-between}
      .welcome-banner h2{font-size:1.6rem}
      .quick-actions{flex-direction:column;align-items:center}
      .quick-action-btn{width:100%;justify-content:center}
    }
  </style>
</head>
<body>
  <!-- Task 13: Navigation Component -->
  {% include 'components/navigation.html' %}

  <!-- Task 12: WhatsApp Float Button - RIGHT SIDE -->
  <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
     class="whatsapp-float" target="_blank" rel="noopener">
    <i class="fab fa-whatsapp"></i>
  </a>

  <div class="container">
    <div class="main-content">
      <!-- Welcome Banner for logged-in users -->
      <div class="welcome-banner">
        <div class="welcome-content">
          <h2>Welcome back, {{ user.username }}! 🎯</h2>
          <p>Ready to create an ATS-optimized resume that gets you interviews? Let's make your career goals a reality.</p>
          <div class="quick-actions">
            <a href="{% url 'ats_details' %}" class="quick-action-btn">
              <i class="fas fa-robot"></i> Learn About ATS
            </a>
            <a href="{% url 'our_services' %}" class="quick-action-btn">
              <i class="fas fa-star"></i> View All Services
            </a>
            <a href="https://wa.me/916303858671?text=Hi! I'm interested in your job application service. Can you provide more details about pricing and process?" 
               class="quick-action-btn" target="_blank">
              <i class="fab fa-whatsapp"></i> Get Jobs Applied For Me
            </a>
          </div>
        </div>
      </div>

      <header class="header">
        <h1><i class="fas fa-file-alt"></i> ATS Resume Optimizer</h1>
        <p>Transform your resume so it perfectly matches any job description.</p>
      </header>

      <main class="main-content-card">
        <!-- ─────────── STEPPER ─────────── -->
        <nav class="step-indicator">
          <div class="step-dot active" data-step="1">1</div>
          <div class="step-dot" data-step="2">2</div>
          <div class="step-dot" data-step="3">3</div>
          <div class="step-dot" data-step="4">4</div>
        </nav>

        <div id="errorMessage" class="error"></div>
        <div id="successMessage" class="success"></div>

        <!-- STEP 1 -->
        <section class="step active" id="step1">
          <div class="step-header">
            <div class="step-number">1</div>
            <h2 class="step-title">Upload or Create a Resume</h2>
          </div>

          <!-- Entry Options -->
          <div class="entry-options">
            <div class="entry-option">
              <div class="upload-area" id="uploadArea">
                <i class="fas fa-cloud-upload-alt upload-icon"></i>
                <p class="upload-text"><strong>Upload Existing Resume</strong></p>
                <p style="color:#3F72AF;margin-top:10px">PDF, DOC, DOCX (max 10 MB)</p>
                <input type="file" class="file-input" id="fileInput" accept=".pdf,.doc,.docx">
              </div>
            </div>
            
            <div class="entry-option">
              <div class="manual-entry-card" onclick="goToManualEntry()">
                <i class="fas fa-edit manual-entry-icon"></i>
                <div class="manual-entry-title">Enter Details Manually</div>
                <div class="manual-entry-description">
                  Create your resume from scratch using our guided form with all the essential sections
                </div>
              </div>
            </div>
          </div>

          <h3 style="margin:30px 0 15px;color:#112D4E;font-size:1.3rem">
            <i class="fas fa-history"></i> Previously uploaded resumes
          </h3>
          <div id="resumeList"></div>
          
          <div class="uploaded-file" id="uploadedFile">
            <div class="file-info">
              <div class="file-details">
                <i class="fas fa-file-alt file-icon"></i>
                <div>
                  <div id="fileName"></div>
                  <div id="fileSize" style="color:#3F72AF;font-size:.9rem"></div>
                </div>
              </div>
              <button class="btn btn-secondary" onclick="removeFile()">
                <i class="fas fa-trash"></i> Remove
              </button>
            </div>
          </div>
          <div class="navigation">
            <div></div>
            <button id="nextStep1" class="btn" onclick="nextStep()" disabled>
              Next <i class="fas fa-arrow-right"></i>
            </button>
          </div>
        </section>

        <!-- STEP 2 -->
        <section class="step" id="step2">
          <div class="step-header">
            <div class="step-number">2</div>
            <h2 class="step-title">Paste Job Description & Select Pages</h2>
          </div>
          <div class="textarea-container">
            <label for="jobDescription">Full job description:</label>
            <textarea id="jobDescription" class="job-description"
              placeholder="Include responsibilities, must-have skills, qualifications…"></textarea>
          </div>
          <div class="page-select">
            <label for="numPages">Desired resume length:</label>
            <select id="numPages">
              <option value="1">1 page</option>
              <option value="2" selected>2 pages</option>
              <option value="3">3 pages</option>
            </select>
          </div>
          <div class="navigation">
            <button class="btn btn-secondary" onclick="prevStep()">
              <i class="fas fa-arrow-left"></i> Back
            </button>
            <button id="nextStep2" class="btn" onclick="nextStep()" disabled>
              Next <i class="fas fa-arrow-right"></i>
            </button>
          </div>
        </section>

        <!-- STEP 3 -->
        <section class="step" id="step3">
          <div class="step-header">
            <div class="step-number">3</div>
            <h2 class="step-title">Choose a Template</h2>
          </div>
          <div id="templatesGrid" class="templates-grid"></div>
          <div class="navigation">
            <button class="btn btn-secondary" onclick="prevStep()">
              <i class="fas fa-arrow-left"></i> Back
            </button>
            <button id="nextStep3" class="btn" onclick="generateResume()" disabled>
              Generate Resume <i class="fas fa-magic"></i>
            </button>
          </div>
        </section>

        <!-- STEP 4 -->
        <section class="step" id="step4">
          <div class="step-header">
            <div class="step-number">4</div>
            <h2 class="step-title">Preview & Download</h2>
          </div>
          <div id="loadingSection" class="loading">
            <div class="spinner"></div>
            <div class="progress-container">
              <div class="progress-bar">
                <div id="progressFill" class="progress-fill"></div>
              </div>
              <div id="progressText" class="progress-text">Analyzing your resume…</div>
            </div>
          </div>
          <div id="resultContainer" style="display:none">
            <div class="score-box ats">
              <div id="atsScore" class="score-number">0</div>
              <div class="score-label">ATS compatibility</div>
            </div>
            <div class="score-box job">
              <div id="jobScore" class="score-number">0</div>
              <div class="score-label">Job-match score</div>
            </div>
            <div id="resumePreview" class="resume-preview"></div>
            <div class="action-buttons">
              <button class="btn" onclick="downloadPDF()">
                <i class="fas fa-download"></i> Download PDF
              </button>
              <button class="btn btn-secondary" onclick="startOver()">
                <i class="fas fa-redo"></i> Start over
              </button>
              <button class="btn btn-secondary" onclick="prevStep()">
                <i class="fas fa-arrow-left"></i> Back to templates
              </button>
            </div>
          </div>
        </section>
      </main>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div class="delete-confirmation" id="deleteConfirmation">
    <div class="delete-modal">
      <h3><i class="fas fa-exclamation-triangle" style="color:#dc3545;margin-right:10px"></i>Confirm Delete</h3>
      <p>Are you sure you want to delete this resume? This action cannot be undone.</p>
      <div class="delete-modal-actions">
        <button class="btn-cancel" onclick="cancelDelete()">
          <i class="fas fa-times"></i> Cancel
        </button>
        <button class="btn-confirm-delete" onclick="confirmDelete()">
          <i class="fas fa-trash"></i> Delete
        </button>
      </div>
    </div>
  </div>

  <!-- ─────────── SCRIPT ─────────── -->
  <script>
    /* CONFIG */
    let currentStep=1, currentResumeID=null, selectedTemplate=null;
    let deleteResumeId = null; // For tracking which resume to delete
    const csrftoken='{{ csrf_token }}';

    /* INIT */
    document.addEventListener('DOMContentLoaded',()=>{
      hookStepper();
      loadPrevResumes();
      loadTemplates();
      setupUpload();
      document.getElementById('jobDescription').addEventListener('input',()=>validateNext());
    });

    /* MANUAL ENTRY */
    function goToManualEntry() {
      window.location.href = '/manual-resume/create/';
    }

    /* STEPPER */
    function goToStep(n){
      document.querySelectorAll('.step').forEach(s=>s.classList.toggle('active',s.id==='step'+n));
      document.querySelectorAll('.step-dot').forEach(d=>{
        const idx=+d.dataset.step;
        d.classList.remove('active','completed');
        if(idx===n)d.classList.add('active');
        else if(idx<n)d.classList.add('completed');
      });
      currentStep=n;
    }
    function nextStep(){ if(currentStep<4) goToStep(currentStep+1) }
    function prevStep(){ if(currentStep>1) goToStep(currentStep-1) }
    function hookStepper(){
      document.querySelectorAll('.step-dot').forEach(d=>
        d.addEventListener('click',()=>goToStep(+d.dataset.step))
      );
    }

    /* UPLOAD */
    function setupUpload(){
      const area=document.getElementById('uploadArea');
      const input=document.getElementById('fileInput');
      area.addEventListener('click',()=>input.click());
      input.addEventListener('change',e=>handleFile(e.target.files[0]));
      ['dragover','dragleave','drop'].forEach(ev=>
        area.addEventListener(ev,e=>{ e.preventDefault(); })
      );
      area.addEventListener('dragover',()=>area.classList.add('dragover'));
      area.addEventListener('dragleave',()=>area.classList.remove('dragover'));
      area.addEventListener('drop',e=>{
        area.classList.remove('dragover');
        handleFile(e.dataTransfer.files[0]);
      });
    }
    async function handleFile(file){
      if(!file) return;
      const ext='.'+file.name.split('.').pop().toLowerCase();
      if(!['.pdf','.doc','.docx'].includes(ext)) return showError('Please upload PDF/DOC/DOCX');
      if(file.size>10*1024*1024) return showError('File must be under 10 MB');
      const fd=new FormData(); fd.append('file',file);
      showSuccess('Uploading resume…');
      const res=await fetch('/api/upload/',{ method:'POST', body:fd, headers:{'X-CSRFToken':csrftoken} });
      const data=await res.json();
      if(!res.ok) return showError(data.error||'Upload failed');
      currentResumeID=data.resume_id;
      document.getElementById('fileName').textContent=file.name;
      document.getElementById('fileSize').textContent=(file.size/1024/1024).toFixed(1)+' MB';
      document.getElementById('uploadedFile').style.display='block';
      document.getElementById('nextStep1').disabled=false;
      showSuccess('Upload complete!');
      loadPrevResumes(); // Refresh the list
    }
    function removeFile(){
      currentResumeID=null;
      document.getElementById('uploadedFile').style.display='none';
      document.getElementById('fileInput').value='';
      document.getElementById('nextStep1').disabled=true;
      
      // Clear selection from resume list
      document.querySelectorAll('.resume-item').forEach(item => {
        item.classList.remove('selected');
      });
    }

    /* PREVIOUS RESUMES WITH ENHANCED UI */
    async function loadPrevResumes(){
      const container=document.getElementById('resumeList');
      container.innerHTML='<div style="color:#3F72AF;padding:20px;text-align:center"><i class="fas fa-spinner fa-spin"></i> Loading resumes...</div>';
      try {
        const res=await fetch('/api/resumes/');
        const data=await res.json();
        container.innerHTML='';
        
        if(!data.resumes.length){
          container.innerHTML=`
            <div style="color:#3F72AF;padding:30px;text-align:center;border:2px dashed #DBE2EF;border-radius:12px;background:#F9F7F7">
              <i class="fas fa-folder-open" style="font-size:2rem;margin-bottom:15px;opacity:0.7"></i>
              <p style="margin:0;font-size:1.1rem">No previous resumes found</p>
              <p style="margin:5px 0 0;font-size:0.9rem;opacity:0.8">Upload your first resume or create one manually</p>
            </div>`;
          return;
        }
        
        data.resumes.forEach(r=>{
          const item = document.createElement('div');
          item.className = 'resume-item';
          item.dataset.resumeId = r.id;
          
          item.innerHTML = `
            <div class="resume-item-left">
              <i class="fas fa-file-alt file-icon"></i>
              <div class="resume-item-info">
                <div class="resume-item-name">${r.filename}</div>
                <div class="resume-item-details">
                  Uploaded ${new Date(r.created_at).toLocaleDateString()} • ${r.file_size}
                </div>
              </div>
            </div>
            <div class="resume-item-actions">
              <div class="selected-indicator">
                <i class="fas fa-check"></i>
              </div>
              <button class="btn-select" onclick="selectResume(${r.id}, this)">
                <i class="fas fa-mouse-pointer"></i> Select
              </button>
              <button class="btn-delete" onclick="deleteResume(${r.id})" title="Delete Resume">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          `;
          
          container.appendChild(item);
        });
      } catch {
        container.innerHTML=`
          <div style="color:#dc3545;padding:20px;text-align:center;border:2px solid #dc3545;border-radius:12px;background:#f8f9fa">
            <i class="fas fa-exclamation-triangle" style="font-size:1.5rem;margin-bottom:10px"></i>
            <p style="margin:0">Failed to load resume list</p>
          </div>`;
      }
    }

    /* RESUME SELECTION WITH GREEN TICK */
    function selectResume(resumeId, buttonElement) {
      // Clear all previous selections
      document.querySelectorAll('.resume-item').forEach(item => {
        item.classList.remove('selected');
      });
      
      // Select the current item
      const resumeItem = buttonElement.closest('.resume-item');
      resumeItem.classList.add('selected');
      
      // Update current resume ID
      currentResumeID = resumeId;
      
      // Enable next step
      document.getElementById('nextStep1').disabled = false;
      
      // Hide uploaded file section if showing
      document.getElementById('uploadedFile').style.display = 'none';
      
      showSuccess('Resume selected! You can now proceed to the next step.');
    }

    /* RESUME DELETION */
    function deleteResume(resumeId) {
      deleteResumeId = resumeId;
      document.getElementById('deleteConfirmation').style.display = 'flex';
    }

    function cancelDelete() {
      deleteResumeId = null;
      document.getElementById('deleteConfirmation').style.display = 'none';
    }

    async function confirmDelete() {
      if (!deleteResumeId) return;
      
      try {
        const res = await fetch(`/api/resumes/${deleteResumeId}/`, {
          method: 'DELETE',
          headers: {'X-CSRFToken': csrftoken}
        });
        
        if (res.ok) {
          showSuccess('Resume deleted successfully!');
          
          // If this was the selected resume, clear selection
          if (currentResumeID === deleteResumeId) {
            currentResumeID = null;
            document.getElementById('nextStep1').disabled = true;
          }
          
          // Reload the resume list
          loadPrevResumes();
        } else {
          const data = await res.json();
          showError(data.error || 'Failed to delete resume');
        }
      } catch (error) {
        showError('Failed to delete resume. Please try again.');
      }
      
      // Close modal
      cancelDelete();
    }

    /* JOB DESCRIPTION VALIDATION */
    function validateNext(){
      const ok=document.getElementById('jobDescription').value.trim().length>50;
      document.getElementById('nextStep2').disabled=!ok;
    }

    /* TEMPLATE LIST */
    async function loadTemplates(){
      const grid=document.getElementById('templatesGrid');
      grid.innerHTML='<p style="color:#3F72AF">Loading templates…</p>';
      try {
        const res=await fetch('/templates/');
        const data=await res.json();
        grid.innerHTML='';
        
        // University branding data
        const universityData = {
          1: { text: 'H', class: 'logo-harvard', name: 'Harvard' },
          2: { text: 'MIT', class: 'logo-mit', name: 'MIT' },
          3: { text: 'CAM', class: 'logo-cambridge', name: 'Cambridge' },
          4: { text: 'S', class: 'logo-stanford', name: 'Stanford' },
          5: { text: 'W', class: 'logo-wharton', name: 'Wharton' },
          6: { text: 'UC', class: 'logo-berkeley', name: 'Berkeley' }
        };
        
        data.templates.forEach(t=>{
          const card=document.createElement('div');
          card.className='template-card';
          card.dataset.id=t.id;
          
          const logoData = universityData[t.id] || { text: t.id, class: 'logo-harvard' };
          
          card.innerHTML=`
            <div class="template-icon-text ${logoData.class}" title="${logoData.name} University">
              ${logoData.text}
            </div>
            <div class="template-name">${t.name}</div>
            <div class="template-description">${t.description||''}</div>`;
          
          card.onclick=()=>{
            document.querySelectorAll('.template-card').forEach(c=>c.classList.remove('selected'));
            card.classList.add('selected');
            selectedTemplate=t.id;
            document.getElementById('nextStep3').disabled=false;
          };
          grid.appendChild(card);
        });
      } catch {
        grid.innerHTML='<p style="color:#112D4E">Failed to load templates</p>';
      }
    }

    /* GENERATE RESUME WITH REAL-TIME PROGRESS */
    async function generateResume(){
      if(!currentResumeID||!selectedTemplate) return;
      
      nextStep();
      document.getElementById('loadingSection').style.display='block';
      document.getElementById('resultContainer').style.display='none';
      
      // Reset progress
      document.getElementById('progressFill').style.width = '0%';
      document.getElementById('progressText').textContent = 'Starting resume generation...';

      const payload={
        job_description:document.getElementById('jobDescription').value,
        num_pages:+document.getElementById('numPages').value
      };
      
      try {
        // Start generation
        const res = await fetch(`/api/generate/${currentResumeID}/${selectedTemplate}/`,{
          method:'POST',
          headers:{'Content-Type':'application/json','X-CSRFToken':csrftoken},
          body:JSON.stringify(payload)
        });
        
        const data = await res.json();
        if(!res.ok) throw new Error(data.error||'Generation failed');
        
        if(data.task_id) {
          // Start polling for progress
          pollProgress(data.task_id);
        } else {
          // Fallback to old method
          handleGenerationComplete(data);
        }
        
      } catch(err){
        showError(err.message||'Failed to generate');
        prevStep();
      }
    }

    async function pollProgress(taskId) {
      const pollInterval = 1000; // Poll every second
      const maxPolls = 120; // Max 2 minutes
      let pollCount = 0;
      
      const poll = async () => {
        try {
          const res = await fetch(`/api/progress/${taskId}/`);
          const progress = await res.json();
          
          if (!res.ok) {
            throw new Error(progress.error || 'Progress check failed');
          }
          
          // Update progress bar
          document.getElementById('progressFill').style.width = `${progress.progress}%`;
          document.getElementById('progressText').textContent = progress.message;
          
          if (progress.completed) {
            if (progress.error) {
              throw new Error(progress.error);
            } else if (progress.result) {
              handleGenerationComplete(progress.result);
            }
            return;
          }
          
          // Continue polling if not completed
          pollCount++;
          if (pollCount < maxPolls) {
            setTimeout(poll, pollInterval);
          } else {
            throw new Error('Generation timeout - please try again');
          }
          
        } catch (error) {
          showError(error.message || 'Progress check failed');
          prevStep();
        }
      };
      
      // Start polling
      poll();
    }

    function handleGenerationComplete(data) {
      // Update scores and preview
      document.getElementById('atsScore').textContent = data.ats_score + '%';
      document.getElementById('jobScore').textContent = data.job_score + '%';
      document.getElementById('resumePreview').innerHTML = data.final_resume;
      
      // Show success animation
      document.getElementById('progressFill').style.width = '100%';
      document.getElementById('progressText').textContent = 'Resume generated successfully!';
      
      // Hide loading and show results after brief delay
      setTimeout(() => {
        document.getElementById('loadingSection').style.display = 'none';
        document.getElementById('resultContainer').style.display = 'block';
        
        // Add success animation to scores
        const scoreBoxes = document.querySelectorAll('.score-box');
        scoreBoxes.forEach((box, index) => {
          setTimeout(() => {
            box.style.animation = 'scoreReveal 0.6s ease-out forwards';
            box.style.transform = 'scale(1.05)';
            setTimeout(() => {
              box.style.transform = 'scale(1)';
            }, 600);
          }, index * 200);
        });
      }, 800);
    }

    /* DOWNLOAD PDF */
    async function downloadPDF(){
      if(!currentResumeID) return;
      const res=await fetch(`/api/download/${currentResumeID}/`);
      if(!res.ok) return showError('Download failed');
      const cd=res.headers.get('Content-Disposition')||'';
      const m=cd.match(/filename="?([^"]+)"?/);
      const fname=m?m[1]:'resume.pdf';
      const blob=await res.blob(), url=URL.createObjectURL(blob);
      const a=document.createElement('a');
      a.href=url; a.download=fname;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    }

    /* UTILS */
    function startOver(){ location.reload(); }
    function showError(msg){
      const e=document.getElementById('errorMessage');
      e.textContent=msg; e.style.display='block';
      setTimeout(()=>e.style.display='none',5000);
    }
    function showSuccess(msg){
      const e=document.getElementById('successMessage');
      e.textContent=msg; e.style.display='block';
      setTimeout(()=>e.style.display='none',3000);
    }
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/pdf_template.html =====

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Tailored Résumé PDF</title>

    <!-- 0.45-inch all-round margin, the “sweet spot” most universities quote
         (Harvard OCS, Stanford BEAM, MIT CAPD all suggest 0.4-0.5 in). -->
    <style>
        @page { size: A4; margin: 0.45in; }
        /* lightweight base, in case the injected resume forgets something */
        body { margin: 0; font-family: "Helvetica Neue", Arial, sans-serif; }
        .wrapper { width: 100%; }
    </style>
</head>
<body>
    <!--  we inject **only** the inner markup -->
    <div class="wrapper">
        {{ final_resume|safe }}
    </div>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/landing.html =====

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Why ATS-Friendly Résumés Matter</title>
<link rel="stylesheet" href="{% static 'css/landing.css' %}">
</head>
<body>
<header class="hero">
  <h1>Beat the ATS. Get the Interview.</h1>
  <p>75% + of companies use Applicant Tracking Systems to filter résumés before a human ever sees them.
     Our AI-powered builder optimises your résumé’s keywords, structure, and formatting so it passes every scan.</p>
  <a href="{% url 'signup' %}" class="cta">Create Free Account</a>
</header>

<section class="info">
  <h2>What is an ATS?</h2>
  <p>An Applicant Tracking System parses each résumé, searching for job-specific keywords and clear headings.
     If your résumé isn’t ATS-friendly it may be rejected in seconds—even if you’re a great fit.</p>
  <h2>How We Help</h2>
  <ul>
    <li>Analyses the job description → extracts must-have keywords</li>
    <li>Re-writes bullet points with measurable achievements</li>
    <li>Uses university-approved, ATS-ready templates (Harvard, MIT …)</li>
    <li>Gives you an ATS score & job-match score before you apply</li>
  </ul>
</section>

<footer class="footer">
  <a href="{% url 'login' %}">Log in</a> ·
  <a href="{% url 'signup' %}">Create Account</a>
</footer>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/manual_entry/full_form.html =====

<!-- resume/templates/resume/manual_entry/full_form.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Manual Resume Entry | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      min-height: 100vh;
      padding: 20px 0;
      color: #112D4E;
    }
    .container {
      max-width: 1000px;
    }
    .main-card {
      background: #F9F7F7;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(17,45,78,.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 30px;
      text-align: center;
    }
    .form-section {
      padding: 30px;
    }
    .section-header {
      border-bottom: 2px solid #DBE2EF;
      padding-bottom: 10px;
      margin-bottom: 25px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
    }
    .section-header.collapsed .section-content {
      display: none;
    }
    .section-title-group {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .section-icon {
      color: #3F72AF;
      font-size: 1.5rem;
    }
    .toggle-icon {
      color: #3F72AF;
      font-size: 1.2rem;
      transition: transform 0.3s ease;
    }
    .section-header.collapsed .toggle-icon {
      transform: rotate(-90deg);
    }
    .add-section-btn {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      font-size: 0.9rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .optional-section {
      display: none;
    }
    .optional-section.show {
      display: block;
    }
    .formset-item {
      background: #DBE2EF;
      border: 1px solid #3F72AF;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      position: relative;
    }
    .formset-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    .delete-btn {
      background: #112D4E;
      color: #F9F7F7;
      border: none;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .add-btn {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      margin-top: 10px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border: none;
      padding: 12px 30px;
      border-radius: 8px;
      font-weight: 600;
      color: #F9F7F7;
    }
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,.3);
      color: #F9F7F7;
    }
    .current-checkbox {
      margin-top: 10px;
    }
    .form-text {
      color: #3F72AF;
      font-size: 0.875rem;
    }
    .progress-indicator {
      background: #DBE2EF;
      padding: 15px;
      text-align: center;
      font-size: 0.9rem;
      color: #3F72AF;
    }
    
    /* Error Styling */
    .form-control.is-invalid {
      border-color: #dc3545;
      background-color: rgba(220, 53, 69, 0.1);
    }
    .form-control.is-valid {
      border-color: #28a745;
      background-color: rgba(40, 167, 69, 0.1);
    }
    .invalid-feedback {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 5px;
    }
    .alert-errors {
      background: linear-gradient(135deg, #dc3545, #c82333);
      color: white;
      border: none;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 30px;
    }
    .alert-errors h4 {
      margin-bottom: 15px;
      font-size: 1.2rem;
    }
    .alert-errors ul {
      margin: 0;
      padding-left: 20px;
    }
    .alert-errors li {
      margin-bottom: 8px;
    }
    
    /* Collapsible sections */
    .section-content {
      transition: all 0.3s ease;
      overflow: hidden;
    }
    .section-content.collapsed {
      max-height: 0;
      padding: 0;
      margin: 0;
    }
    
    /* Required field indicator */
    .required::after {
      content: " *";
      color: #dc3545;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="main-card">
      <div class="header">
        <h1><i class="fas fa-edit"></i> Manual Resume Entry</h1>
        <p>Fill out all sections to create your professional resume</p>
      </div>

      <div class="progress-indicator">
        <i class="fas fa-info-circle"></i> Complete all required sections below, then preview your resume
      </div>

      <!-- Global Error Display -->
      {% if form.errors or education_formset.errors or work_formset.errors or project_formset.errors or skill_formset.errors or cert_formset.errors or lang_formset.errors %}
        <div class="alert alert-errors">
          <h4><i class="fas fa-exclamation-triangle"></i> Please correct the following errors:</h4>
          <ul>
            {% for field, errors in form.errors.items %}
              {% for error in errors %}
                <li><strong>{{ form|yesno:",Personal Info" }} - {{ field|title }}:</strong> {{ error }}</li>
              {% endfor %}
            {% endfor %}
            
            {% if education_formset.errors %}
              {% for form_errors in education_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Education:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
            
            {% if work_formset.errors %}
              {% for form_errors in work_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Work Experience:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
            
            {% if project_formset.errors %}
              {% for form_errors in project_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Projects:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
            
            {% if skill_formset.errors %}
              {% for form_errors in skill_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Skills:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
            
            {% if cert_formset.errors %}
              {% for form_errors in cert_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Certifications:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
            
            {% if lang_formset.errors %}
              {% for form_errors in lang_formset.errors %}
                {% for field, errors in form_errors.items %}
                  {% for error in errors %}
                    <li><strong>Languages:</strong> {{ error }}</li>
                  {% endfor %}
                {% endfor %}
              {% endfor %}
            {% endif %}
          </ul>
        </div>
      {% endif %}

      <form method="post" id="manualResumeForm">
        {% csrf_token %}
        
        <!-- Personal Information Section -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('personal')">
            <div class="section-title-group">
              <i class="fas fa-user section-icon"></i>
              <h3 class="required">Personal Information</h3>
            </div>
            <i class="fas fa-chevron-down toggle-icon" id="personal-toggle"></i>
          </div>
          <div class="section-content" id="personal-content">
            <div class="row">
              <div class="col-md-6 mb-3">
                <label class="form-label required">{{ form.full_name.label }}</label>
                {{ form.full_name }}
                {% if form.full_name.errors %}
                  <div class="invalid-feedback d-block">{{ form.full_name.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required">{{ form.professional_title.label }}</label>
                {{ form.professional_title }}
                {% if form.professional_title.errors %}
                  <div class="invalid-feedback d-block">{{ form.professional_title.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required">{{ form.email.label }}</label>
                {{ form.email }}
                {% if form.email.errors %}
                  <div class="invalid-feedback d-block">{{ form.email.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label required">{{ form.phone.label }}</label>
                {{ form.phone }}
                {% if form.phone.errors %}
                  <div class="invalid-feedback d-block">{{ form.phone.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-4 mb-3">
                <label class="form-label required">{{ form.city.label }}</label>
                {{ form.city }}
                {% if form.city.errors %}
                  <div class="invalid-feedback d-block">{{ form.city.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-4 mb-3">
                <label class="form-label">{{ form.state_province.label }}</label>
                {{ form.state_province }}
                {% if form.state_province.errors %}
                  <div class="invalid-feedback d-block">{{ form.state_province.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-4 mb-3">
                <label class="form-label required">{{ form.country.label }}</label>
                {{ form.country }}
                {% if form.country.errors %}
                  <div class="invalid-feedback d-block">{{ form.country.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">{{ form.linkedin_url.label }}</label>
                {{ form.linkedin_url }}
                {% if form.linkedin_url.errors %}
                  <div class="invalid-feedback d-block">{{ form.linkedin_url.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">{{ form.portfolio_url.label }}</label>
                {{ form.portfolio_url }}
                {% if form.portfolio_url.errors %}
                  <div class="invalid-feedback d-block">{{ form.portfolio_url.errors.0 }}</div>
                {% endif %}
              </div>
              <div class="col-12 mb-3">
                <label class="form-label required">{{ form.professional_summary.label }}</label>
                {{ form.professional_summary }}
                <div class="form-text">Write 2-3 sentences summarizing your career goals, core strengths, and key achievements</div>
                {% if form.professional_summary.errors %}
                  <div class="invalid-feedback d-block">{{ form.professional_summary.errors.0 }}</div>
                {% endif %}
              </div>
            </div>
          </div>
        </div>

        <!-- Education Section -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('education')">
            <div class="section-title-group">
              <i class="fas fa-graduation-cap section-icon"></i>
              <h3 class="required">Education</h3>
            </div>
            <i class="fas fa-chevron-down toggle-icon" id="education-toggle"></i>
          </div>
          <div class="section-content" id="education-content">
            <div id="education-formset">
              {{ education_formset.management_form }}
              {% for form in education_formset %}
                <div class="formset-item" data-formset-item>
                  {% if not forloop.first %}
                    <button type="button" class="delete-btn" onclick="removeFormsetItem(this)">
                      <i class="fas fa-times"></i>
                    </button>
                  {% endif %}
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Degree/Certification Name</label>
                      {{ form.degree_name }}
                      {% if form.degree_name.errors %}
                        <div class="invalid-feedback d-block">{{ form.degree_name.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Institution Name</label>
                      {{ form.institution_name }}
                      {% if form.institution_name.errors %}
                        <div class="invalid-feedback d-block">{{ form.institution_name.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Institution City</label>
                      {{ form.institution_city }}
                      {% if form.institution_city.errors %}
                        <div class="invalid-feedback d-block">{{ form.institution_city.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Institution Country</label>
                      {{ form.institution_country }}
                      {% if form.institution_country.errors %}
                        <div class="invalid-feedback d-block">{{ form.institution_country.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label required">Start Date</label>
                      {{ form.start_date }}
                      {% if form.start_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.start_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label">End Date</label>
                      {{ form.end_date }}
                      {% if form.end_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.end_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 current-checkbox">
                      <div class="form-check">
                        {{ form.is_current }}
                        <label class="form-check-label">Currently enrolled</label>
                      </div>
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label">GPA (optional)</label>
                      {{ form.gpa }}
                      {% if form.gpa.errors %}
                        <div class="invalid-feedback d-block">{{ form.gpa.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-12 mb-3">
                      <label class="form-label">Relevant Coursework/Honors (optional)</label>
                      {{ form.relevant_coursework }}
                      {% if form.relevant_coursework.errors %}
                        <div class="invalid-feedback d-block">{{ form.relevant_coursework.errors.0 }}</div>
                      {% endif %}
                    </div>
                  </div>
                  {{ form.DELETE }}
                </div>
              {% endfor %}
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('education')">
              <i class="fas fa-plus"></i> Add Another Education
            </button>
          </div>
        </div>

        <!-- Work Experience Section (Optional) -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('work')">
            <div class="section-title-group">
              <i class="fas fa-briefcase section-icon"></i>
              <h3>Work Experience (Optional)</h3>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
              <button type="button" class="add-section-btn" onclick="showOptionalSection('work')">
                <i class="fas fa-plus"></i> Add Experience
              </button>
              <i class="fas fa-chevron-down toggle-icon" id="work-toggle"></i>
            </div>
          </div>
          <div class="section-content optional-section" id="work-content">
            <div id="work-formset">
              {{ work_formset.management_form }}
              {% for form in work_formset %}
                <div class="formset-item" data-formset-item>
                  <button type="button" class="delete-btn" onclick="removeFormsetItem(this)">
                    <i class="fas fa-times"></i>
                  </button>
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Job Title</label>
                      {{ form.job_title }}
                      {% if form.job_title.errors %}
                        <div class="invalid-feedback d-block">{{ form.job_title.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Company Name</label>
                      {{ form.company_name }}
                      {% if form.company_name.errors %}
                        <div class="invalid-feedback d-block">{{ form.company_name.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Company City</label>
                      {{ form.company_city }}
                      {% if form.company_city.errors %}
                        <div class="invalid-feedback d-block">{{ form.company_city.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Company Country</label>
                      {{ form.company_country }}
                      {% if form.company_country.errors %}
                        <div class="invalid-feedback d-block">{{ form.company_country.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label required">Start Date</label>
                      {{ form.start_date }}
                      {% if form.start_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.start_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label">End Date</label>
                      {{ form.end_date }}
                      {% if form.end_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.end_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 current-checkbox">
                      <div class="form-check">
                        {{ form.is_current }}
                        <label class="form-check-label">Current position</label>
                      </div>
                    </div>
                    <div class="col-12 mb-3">
                      <label class="form-label required">Responsibilities & Achievements</label>
                      {{ form.responsibilities }}
                      <div class="form-text">Enter 3-5 bullet points describing key accomplishments, technologies used, and metrics</div>
                      {% if form.responsibilities.errors %}
                        <div class="invalid-feedback d-block">{{ form.responsibilities.errors.0 }}</div>
                      {% endif %}
                    </div>
                  </div>
                  {{ form.DELETE }}
                </div>
              {% endfor %}
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('work')">
              <i class="fas fa-plus"></i> Add Another Position
            </button>
          </div>
        </div>

        <!-- Projects Section (Optional) -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('projects')">
            <div class="section-title-group">
              <i class="fas fa-project-diagram section-icon"></i>
              <h3>Projects (Optional)</h3>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
              <button type="button" class="add-section-btn" onclick="showOptionalSection('projects')">
                <i class="fas fa-plus"></i> Add Project
              </button>
              <i class="fas fa-chevron-down toggle-icon" id="projects-toggle"></i>
            </div>
          </div>
          <div class="section-content optional-section" id="projects-content">
            <div id="projects-formset">
              {{ project_formset.management_form }}
              {% for form in project_formset %}
                <div class="formset-item" data-formset-item>
                  <button type="button" class="delete-btn" onclick="removeFormsetItem(this)">
                    <i class="fas fa-times"></i>
                  </button>
                  <div class="row">
                    <div class="col-md-8 mb-3">
                      <label class="form-label required">Project Title</label>
                      {{ form.title }}
                      {% if form.title.errors %}
                        <div class="invalid-feedback d-block">{{ form.title.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label required">Your Role</label>
                      {{ form.role }}
                      {% if form.role.errors %}
                        <div class="invalid-feedback d-block">{{ form.role.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label required">Start Date</label>
                      {{ form.start_date }}
                      {% if form.start_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.start_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 mb-3">
                      <label class="form-label">End Date</label>
                      {{ form.end_date }}
                      {% if form.end_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.end_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-4 current-checkbox">
                      <div class="form-check">
                        {{ form.is_ongoing }}
                        <label class="form-check-label">Ongoing project</label>
                      </div>
                    </div>
                    <div class="col-12 mb-3">
                      <label class="form-label required">Description</label>
                      {{ form.description }}
                      <div class="form-text">Describe objectives, technologies used, and outcomes/impact</div>
                      {% if form.description.errors %}
                        <div class="invalid-feedback d-block">{{ form.description.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-12 mb-3">
                      <label class="form-label">Demo/Repository URL (optional)</label>
                      {{ form.demo_url }}
                      {% if form.demo_url.errors %}
                        <div class="invalid-feedback d-block">{{ form.demo_url.errors.0 }}</div>
                      {% endif %}
                    </div>
                  </div>
                  {{ form.DELETE }}
                </div>
              {% endfor %}
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('projects')">
              <i class="fas fa-plus"></i> Add Another Project
            </button>
          </div>
        </div>

        <!-- Skills Section -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('skills')">
            <div class="section-title-group">
              <i class="fas fa-cogs section-icon"></i>
              <h3 class="required">Skills</h3>
            </div>
            <i class="fas fa-chevron-down toggle-icon" id="skills-toggle"></i>
          </div>
          <div class="section-content" id="skills-content">
            <div id="skills-formset">
              {{ skill_formset.management_form }}
              <div class="row">
                {% for form in skill_formset %}
                  <div class="col-md-6 mb-3 formset-item-inline" data-formset-item>
                    <div class="d-flex gap-2 align-items-end">
                      <div class="flex-grow-1">
                        <label class="form-label required">{{ form.skill_type.label }}</label>
                        {{ form.skill_type }}
                        {% if form.skill_type.errors %}
                          <div class="invalid-feedback d-block">{{ form.skill_type.errors.0 }}</div>
                        {% endif %}
                      </div>
                      <div class="flex-grow-1">
                        <label class="form-label required">Skill Name</label>
                        {{ form.name }}
                        {% if form.name.errors %}
                          <div class="invalid-feedback d-block">{{ form.name.errors.0 }}</div>
                        {% endif %}
                      </div>
                      <div class="flex-grow-1">
                        <label class="form-label required">Proficiency</label>
                        {{ form.proficiency }}
                        {% if form.proficiency.errors %}
                          <div class="invalid-feedback d-block">{{ form.proficiency.errors.0 }}</div>
                        {% endif %}
                      </div>
                      {% if not forloop.first and not forloop.second and not forloop.counter == 3 %}
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFormsetItem(this)">
                          <i class="fas fa-times"></i>
                        </button>
                      {% endif %}
                    </div>
                    {{ form.DELETE }}
                  </div>
                {% endfor %}
              </div>
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('skills')">
              <i class="fas fa-plus"></i> Add Another Skill
            </button>
          </div>
        </div>

        <!-- Certifications Section (Optional) -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('certifications')">
            <div class="section-title-group">
              <i class="fas fa-certificate section-icon"></i>
              <h3>Certifications (Optional)</h3>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
              <button type="button" class="add-section-btn" onclick="showOptionalSection('certifications')">
                <i class="fas fa-plus"></i> Add Certification
              </button>
              <i class="fas fa-chevron-down toggle-icon" id="certifications-toggle"></i>
            </div>
          </div>
          <div class="section-content optional-section" id="certifications-content">
            <div id="certifications-formset">
              {{ cert_formset.management_form }}
              {% for form in cert_formset %}
                <div class="formset-item" data-formset-item>
                  <button type="button" class="delete-btn" onclick="removeFormsetItem(this)">
                    <i class="fas fa-times"></i>
                  </button>
                  <div class="row">
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Certification Name</label>
                      {{ form.name }}
                      {% if form.name.errors %}
                        <div class="invalid-feedback d-block">{{ form.name.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Issuing Organization</label>
                      {{ form.issuing_organization }}
                      {% if form.issuing_organization.errors %}
                        <div class="invalid-feedback d-block">{{ form.issuing_organization.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label required">Date Obtained</label>
                      {{ form.date_obtained }}
                      {% if form.date_obtained.errors %}
                        <div class="invalid-feedback d-block">{{ form.date_obtained.errors.0 }}</div>
                      {% endif %}
                    </div>
                    <div class="col-md-6 mb-3">
                      <label class="form-label">Expiration Date (optional)</label>
                      {{ form.expiration_date }}
                      {% if form.expiration_date.errors %}
                        <div class="invalid-feedback d-block">{{ form.expiration_date.errors.0 }}</div>
                      {% endif %}
                    </div>
                  </div>
                  {{ form.DELETE }}
                </div>
              {% endfor %}
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('certifications')">
              <i class="fas fa-plus"></i> Add Another Certification
            </button>
          </div>
        </div>

        <!-- Languages Section (Optional) -->
        <div class="form-section">
          <div class="section-header" onclick="toggleSection('languages')">
            <div class="section-title-group">
              <i class="fas fa-language section-icon"></i>
              <h3>Languages (Optional)</h3>
            </div>
            <div style="display: flex; align-items: center; gap: 10px;">
              <button type="button" class="add-section-btn" onclick="showOptionalSection('languages')">
                <i class="fas fa-plus"></i> Add Language
              </button>
              <i class="fas fa-chevron-down toggle-icon" id="languages-toggle"></i>
            </div>
          </div>
          <div class="section-content optional-section" id="languages-content">
            <div id="languages-formset">
              {{ lang_formset.management_form }}
              <div class="row">
                {% for form in lang_formset %}
                  <div class="col-md-6 mb-3 formset-item-inline" data-formset-item>
                    <div class="d-flex gap-2 align-items-end">
                      <div class="flex-grow-1">
                        <label class="form-label required">Language</label>
                        {{ form.name }}
                        {% if form.name.errors %}
                          <div class="invalid-feedback d-block">{{ form.name.errors.0 }}</div>
                        {% endif %}
                      </div>
                      <div class="flex-grow-1">
                        <label class="form-label required">Proficiency</label>
                        {{ form.proficiency }}
                        {% if form.proficiency.errors %}
                          <div class="invalid-feedback d-block">{{ form.proficiency.errors.0 }}</div>
                        {% endif %}
                      </div>
                      <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFormsetItem(this)">
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                    {{ form.DELETE }}
                  </div>
                {% endfor %}
              </div>
            </div>
            <button type="button" class="add-btn" onclick="addFormsetItem('languages')">
              <i class="fas fa-plus"></i> Add Another Language
            </button>
          </div>
        </div>

        <!-- Submit Section -->
        <div class="form-section text-center">
          <button type="submit" class="btn btn-primary btn-lg">
            <i class="fas fa-save"></i> Save & Preview Resume
          </button>
          <div class="mt-3">
            <a href="{% url 'dashboard' %}" class="btn btn-outline-secondary">
              <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
          </div>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Section toggle functionality
    function toggleSection(sectionId) {
      const content = document.getElementById(sectionId + '-content');
      const toggle = document.getElementById(sectionId + '-toggle');
      const header = document.querySelector(`[onclick="toggleSection('${sectionId}')"]`);
      
      content.classList.toggle('collapsed');
      header.classList.toggle('collapsed');
      
      if (content.classList.contains('collapsed')) {
        content.style.maxHeight = '0';
        toggle.style.transform = 'rotate(-90deg)';
      } else {
        content.style.maxHeight = content.scrollHeight + 'px';
        toggle.style.transform = 'rotate(0deg)';
      }
    }

    // Show optional sections
    function showOptionalSection(sectionId) {
      const content = document.getElementById(sectionId + '-content');
      const button = event.target.closest('.add-section-btn');
      
      content.classList.add('show');
      button.style.display = 'none';
      
      // Add first form if none exist
      if (content.querySelectorAll('[data-formset-item]').length === 0) {
        addFormsetItem(sectionId);
      }
    }

    // Formset management JavaScript
    function updateFormsetIndices(formsetPrefix) {
      const formset = document.getElementById(formsetPrefix + '-formset');
      const items = formset.querySelectorAll('[data-formset-item]');
      const totalForms = document.getElementById('id_' + formsetPrefix + '-TOTAL_FORMS');
      
      items.forEach((item, index) => {
        const inputs = item.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
          if (input.name) {
            input.name = input.name.replace(/\d+/, index);
            if (input.id) {
              input.id = input.id.replace(/\d+/, index);
            }
          }
        });
        
        const labels = item.querySelectorAll('label');
        labels.forEach(label => {
          if (label.getAttribute('for')) {
            label.setAttribute('for', label.getAttribute('for').replace(/\d+/, index));
          }
        });
      });
      
      totalForms.value = items.length;
    }

    function addFormsetItem(formsetPrefix) {
      const formset = document.getElementById(formsetPrefix + '-formset');
      const lastItem = formset.querySelector('[data-formset-item]:last-child');
      
      if (!lastItem) {
        console.error('No existing form to clone');
        return;
      }
      
      const emptyForm = lastItem.cloneNode(true);
      
      // Clear values
      const inputs = emptyForm.querySelectorAll('input, select, textarea');
      inputs.forEach(input => {
        if (input.type === 'checkbox') {
          input.checked = false;
        } else {
          input.value = '';
        }
        
        // Remove error classes
        input.classList.remove('is-invalid', 'is-valid');
      });
      
      // Remove errors
      const errors = emptyForm.querySelectorAll('.invalid-feedback');
      errors.forEach(error => error.remove());
      
      // Ensure delete button is visible
      const deleteBtn = emptyForm.querySelector('.delete-btn');
      if (deleteBtn) {
        deleteBtn.style.display = 'flex';
      }
      
      formset.appendChild(emptyForm);
      updateFormsetIndices(formsetPrefix);
    }

    function removeFormsetItem(button) {
      const item = button.closest('[data-formset-item]');
      const formset = item.closest('[id$="-formset"]');
      const formsetPrefix = formset.id.replace('-formset', '');
      
      // Check if this is the only item in required formsets
      const items = formset.querySelectorAll('[data-formset-item]');
      if (['education', 'skills'].includes(formsetPrefix) && items.length <= 1) {
        alert('At least one entry is required for this section.');
        return;
      }
      
      // Mark for deletion if it has an ID (existing item)
      const deleteInput = item.querySelector('input[name$="-DELETE"]');
      if (deleteInput) {
        deleteInput.checked = true;
        item.style.display = 'none';
      } else {
        item.remove();
      }
      
      updateFormsetIndices(formsetPrefix);
    }

    // Handle current position/enrollment checkboxes
    document.addEventListener('change', function(e) {
      if (e.target.name && e.target.name.includes('is_current')) {
        const endDateField = e.target.closest('.formset-item').querySelector('input[name*="end_date"]');
        if (endDateField) {
          endDateField.disabled = e.target.checked;
          if (e.target.checked) {
            endDateField.value = '';
          }
        }
      }
    });

    // Form validation
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('manualResumeForm');
      const inputs = form.querySelectorAll('input, select, textarea');
      
      // Add validation classes based on errors
      inputs.forEach(input => {
        const errorDiv = input.parentElement.querySelector('.invalid-feedback');
        if (errorDiv) {
          input.classList.add('is-invalid');
        }
        
        // Real-time validation
        input.addEventListener('blur', function() {
          validateField(this);
        });
        
        input.addEventListener('input', function() {
          if (this.classList.contains('is-invalid')) {
            validateField(this);
          }
        });
      });
    });

    function validateField(field) {
      const value = field.value.trim();
      const isRequired = field.hasAttribute('required');
      
      // Remove existing validation classes
      field.classList.remove('is-invalid', 'is-valid');
      
      // Check if field is required and empty
      if (isRequired && !value) {
        field.classList.add('is-invalid');
        return false;
      }
      
      // Email validation
      if (field.type === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          field.classList.add('is-invalid');
          return false;
        }
      }
      
      // URL validation
      if (field.type === 'url' && value) {
        try {
          new URL(value);
        } catch {
          field.classList.add('is-invalid');
          return false;
        }
      }
      
      if (value) {
        field.classList.add('is-valid');
      }
      
      return true;
    }

    // Initialize sections - collapse optional sections by default
    document.addEventListener('DOMContentLoaded', function() {
      const optionalSections = ['work', 'projects', 'certifications', 'languages'];
      optionalSections.forEach(sectionId => {
        const content = document.getElementById(sectionId + '-content');
        if (content && !content.querySelector('[data-formset-item]')) {
          content.classList.add('collapsed');
          content.style.maxHeight = '0';
        }
      });
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/manual_entry/preview.html =====

<!-- resume/templates/resume/manual_entry/preview.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Resume Preview | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      min-height: 100vh;
      padding: 20px 0;
      color: #112D4E;
    }
    .container {
      max-width: 1200px;
    }
    .main-card {
      background: #F9F7F7;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(17,45,78,.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 30px;
      text-align: center;
    }
    .preview-section {
      padding: 30px;
    }
    .resume-preview {
      background: #F9F7F7;
      border: 1px solid #DBE2EF;
      border-radius: 15px;
      padding: 40px;
      margin: 20px 0;
      box-shadow: 0 4px 8px rgba(17,45,78,0.1);
      font-family: 'Times New Roman', serif;
      line-height: 1.6;
    }
    .resume-header {
      text-align: center;
      margin-bottom: 30px;
      border-bottom: 2px solid #112D4E;
      padding-bottom: 15px;
    }
    .resume-name {
      font-size: 2.5rem;
      font-weight: bold;
      color: #112D4E;
      margin-bottom: 5px;
    }
    .resume-title {
      font-size: 1.3rem;
      color: #3F72AF;
      margin-bottom: 10px;
    }
    .contact-info {
      font-size: 1rem;
      color: #3F72AF;
    }
    .section-title {
      font-size: 1.4rem;
      font-weight: bold;
      color: #112D4E;
      border-bottom: 1px solid #3F72AF;
      padding-bottom: 5px;
      margin: 25px 0 15px 0;
      text-transform: uppercase;
    }
    .entry {
      margin-bottom: 20px;
    }
    .entry-header {
      font-weight: bold;
      color: #112D4E;
    }
    .entry-meta {
      font-style: italic;
      color: #3F72AF;
      margin-bottom: 5px;
    }
    .entry-description {
      color: #112D4E;
      white-space: pre-line;
    }
    .skills-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
    }
    .skill-category {
      background: #DBE2EF;
      padding: 15px;
      border-radius: 8px;
    }
    .skill-category h5 {
      font-weight: bold;
      color: #112D4E;
      margin-bottom: 10px;
      text-transform: capitalize;
    }
    .action-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
      flex-wrap: wrap;
    }
    .btn {
      padding: 12px 25px;
      border-radius: 8px;
      font-weight: 600;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s;
    }
    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      border: none;
    }
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,0.3);
      color: #F9F7F7;
    }
    .btn-secondary {
      background: #DBE2EF;
      color: #112D4E;
      border: none;
    }
    .btn-outline-primary {
      background: transparent;
      color: #3F72AF;
      border: 2px solid #3F72AF;
    }
    .btn-outline-primary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }
    .alert {
      padding: 15px;
      border-radius: 10px;
      margin: 20px 0;
    }
    .alert-success {
      background: #DBE2EF;
      border: 1px solid #3F72AF;
      color: #112D4E;
    }
    .alert-info {
      background: #F9F7F7;
      border: 1px solid #DBE2EF;
      color: #3F72AF;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="main-card">
      <div class="header">
        <h1><i class="fas fa-eye"></i> Resume Preview</h1>
        <p>Review your resume before generating templates</p>
      </div>

      <div class="preview-section">
        {% if messages %}
          {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">{{ message }}</div>
          {% endfor %}
        {% endif %}

        <div class="alert alert-info">
          <i class="fas fa-info-circle"></i> This is how your resume data will appear. You can now use this to generate professional templates with job-specific optimization.
        </div>

        <div class="resume-preview">
          <!-- Resume Header -->
          <div class="resume-header">
            <div class="resume-name">{{ resume.full_name }}</div>
            <div class="resume-title">{{ resume.professional_title }}</div>
            <div class="contact-info">
              {{ resume.email }} • {{ resume.phone }} • {{ resume.city }}{% if resume.state_province %}, {{ resume.state_province }}{% endif %}, {{ resume.country }}
              {% if resume.linkedin_url %}<br>LinkedIn: {{ resume.linkedin_url }}{% endif %}
              {% if resume.portfolio_url %}<br>Portfolio: {{ resume.portfolio_url }}{% endif %}
            </div>
          </div>

          <!-- Professional Summary -->
          <div class="section-title">Professional Summary</div>
          <div class="entry-description">{{ resume.professional_summary }}</div>

          <!-- Education -->
          {% if resume.education_entries.all %}
            <div class="section-title">Education</div>
            {% for edu in resume.education_entries.all %}
              <div class="entry">
                <div class="entry-header">{{ edu.degree_name }}</div>
                <div class="entry-meta">
                  {{ edu.institution_name }}, {{ edu.institution_city }}, {{ edu.institution_country }}
                  ({{ edu.start_date|date:"M Y" }} - {% if edu.is_current %}Present{% else %}{{ edu.end_date|date:"M Y" }}{% endif %})
                </div>
                {% if edu.gpa %}<div class="entry-description">GPA: {{ edu.gpa }}</div>{% endif %}
                {% if edu.relevant_coursework %}<div class="entry-description">{{ edu.relevant_coursework }}</div>{% endif %}
              </div>
            {% endfor %}
          {% endif %}

          <!-- Work Experience -->
          {% if resume.work_experiences.all %}
            <div class="section-title">Work Experience</div>
            {% for work in resume.work_experiences.all %}
              <div class="entry">
                <div class="entry-header">{{ work.job_title }} — {{ work.company_name }}</div>
                <div class="entry-meta">
                  {{ work.company_city }}, {{ work.company_country }}
                  ({{ work.start_date|date:"M Y" }} - {% if work.is_current %}Present{% else %}{{ work.end_date|date:"M Y" }}{% endif %})
                </div>
                <div class="entry-description">{{ work.responsibilities }}</div>
              </div>
            {% endfor %}
          {% endif %}

          <!-- Projects -->
          {% if resume.projects.all %}
            <div class="section-title">Projects</div>
            {% for project in resume.projects.all %}
              <div class="entry">
                <div class="entry-header">{{ project.title }} — {{ project.role }}</div>
                <div class="entry-meta">
                  {{ project.start_date|date:"M Y" }} - {% if project.is_ongoing %}Ongoing{% else %}{{ project.end_date|date:"M Y" }}{% endif %}
                </div>
                <div class="entry-description">{{ project.description }}</div>
                {% if project.demo_url %}<div class="entry-description">Demo: {{ project.demo_url }}</div>{% endif %}
              </div>
            {% endfor %}
          {% endif %}

          <!-- Skills -->
          {% if resume.skills.all %}
            <div class="section-title">Skills</div>
            <div class="skills-grid">
              {% regroup resume.skills.all by skill_type as skills_by_type %}
              {% for skill_group in skills_by_type %}
                <div class="skill-category">
                  <h5>{{ skill_group.grouper|title }}</h5>
                  {% for skill in skill_group.list %}
                    <span>{{ skill.name }} ({{ skill.get_proficiency_display }})</span>{% if not forloop.last %}, {% endif %}
                  {% endfor %}
                </div>
              {% endfor %}
            </div>
          {% endif %}

          <!-- Certifications -->
          {% if resume.certifications.all %}
            <div class="section-title">Certifications</div>
            {% for cert in resume.certifications.all %}
              <div class="entry">
                <div class="entry-header">{{ cert.name }}</div>
                <div class="entry-meta">
                  {{ cert.issuing_organization }} — {{ cert.date_obtained|date:"M Y" }}
                  {% if cert.expiration_date %} (Expires: {{ cert.expiration_date|date:"M Y" }}){% endif %}
                </div>
              </div>
            {% endfor %}
          {% endif %}

          <!-- Languages -->
          {% if resume.languages.all %}
            <div class="section-title">Languages</div>
            <div class="entry-description">
              {% for lang in resume.languages.all %}
                {{ lang.name }} ({{ lang.get_proficiency_display }}){% if not forloop.last %}, {% endif %}
              {% endfor %}
            </div>
          {% endif %}

          <!-- Volunteer Experience -->
          {% if resume.volunteer_experiences.all %}
            <div class="section-title">Volunteer Experience</div>
            {% for vol in resume.volunteer_experiences.all %}
              <div class="entry">
                <div class="entry-header">{{ vol.role_title }} — {{ vol.organization_name }}</div>
                <div class="entry-meta">
                  {{ vol.city }}, {{ vol.country }}
                  ({{ vol.start_date|date:"M Y" }} - {% if vol.is_current %}Present{% else %}{{ vol.end_date|date:"M Y" }}{% endif %})
                </div>
                <div class="entry-description">{{ vol.responsibilities }}</div>
              </div>
            {% endfor %}
          {% endif %}
        </div>

        <div class="action-buttons">
          <a href="{% url 'convert_manual_to_tailored' resume.id %}" class="btn btn-primary">
            <i class="fas fa-magic"></i> Generate Templates
          </a>
          <a href="{% url 'manual_resume_edit' resume.id %}" class="btn btn-outline-primary">
            <i class="fas fa-edit"></i> Edit Resume
          </a>
          <a href="{% url 'manual_resume_list' %}" class="btn btn-secondary">
            <i class="fas fa-list"></i> My Resumes
          </a>
          <a href="{% url 'dashboard' %}" class="btn btn-secondary">
            <i class="fas fa-home"></i> Dashboard
          </a>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/manual_entry/list.html =====

<!-- resume/templates/resume/manual_entry/list.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>My Resumes | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      min-height: 100vh;
      padding: 20px 0;
      color: #112D4E;
    }
    .container {
      max-width: 1000px;
    }
    .main-card {
      background: #F9F7F7;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(17,45,78,.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 30px;
      text-align: center;
    }
    .content-section {
      padding: 30px;
    }
    .resume-card {
      background: #DBE2EF;
      border: 1px solid #3F72AF;
      border-radius: 15px;
      padding: 25px;
      margin-bottom: 20px;
      transition: all 0.3s;
    }
    .resume-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(17,45,78,0.1);
    }
    .resume-title {
      font-size: 1.4rem;
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 10px;
    }
    .resume-meta {
      color: #3F72AF;
      font-size: 0.9rem;
      margin-bottom: 15px;
    }
    .resume-status {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    .status-complete {
      background: #3F72AF;
      color: #F9F7F7;
    }
    .status-draft {
      background: #DBE2EF;
      color: #112D4E;
      border: 1px solid #3F72AF;
    }
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      font-weight: 600;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 6px;
      transition: all 0.3s;
      font-size: 0.9rem;
    }
    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      border: none;
    }
    .btn-outline-primary {
      background: transparent;
      color: #3F72AF;
      border: 1px solid #3F72AF;
    }
    .btn-outline-danger {
      background: transparent;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    .btn:hover {
      transform: translateY(-1px);
    }
    .btn-primary:hover {
      color: #F9F7F7;
    }
    .btn-outline-primary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }
    .btn-outline-danger:hover {
      background: #112D4E;
      color: #F9F7F7;
    }
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #3F72AF;
    }
    .empty-state i {
      font-size: 4rem;
      margin-bottom: 20px;
    }
    .btn-lg {
      padding: 12px 25px;
      font-size: 1.1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="main-card">
      <div class="header">
        <h1><i class="fas fa-folder-open"></i> My Resumes</h1>
        <p>Manage your manually created resumes</p>
      </div>

      <div class="content-section">
        {% if resumes %}
          {% for resume in resumes %}
            <div class="resume-card">
              <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                  <div class="resume-title">{{ resume.full_name }}</div>
                  <div class="resume-meta">
                    <i class="fas fa-briefcase"></i> {{ resume.professional_title }}<br>
                    <i class="fas fa-calendar"></i> Updated {{ resume.updated_at|date:"M d, Y" }}
                  </div>
                  <span class="resume-status {% if resume.is_complete %}status-complete{% else %}status-draft{% endif %}">
                    {% if resume.is_complete %}
                      <i class="fas fa-check"></i> Complete
                    {% else %}
                      <i class="fas fa-pencil"></i> Draft
                    {% endif %}
                  </span>
                </div>
                <div class="d-flex flex-column gap-2">
                  {% if resume.is_complete %}
                    <a href="{% url 'manual_resume_preview' resume.id %}" class="btn btn-primary">
                      <i class="fas fa-eye"></i> Preview
                    </a>
                    <a href="{% url 'convert_manual_to_tailored' resume.id %}" class="btn btn-outline-primary">
                      <i class="fas fa-magic"></i> Generate
                    </a>
                  {% endif %}
                  <a href="{% url 'manual_resume_edit' resume.id %}" class="btn btn-outline-primary">
                    <i class="fas fa-edit"></i> Edit
                  </a>
                  <a href="{% url 'manual_resume_delete' resume.id %}" class="btn btn-outline-danger">
                    <i class="fas fa-trash"></i> Delete
                  </a>
                </div>
              </div>
            </div>
          {% endfor %}
        {% else %}
          <div class="empty-state">
            <i class="fas fa-file-plus"></i>
            <h3>No resumes yet</h3>
            <p>Create your first resume using our guided form</p>
            <a href="{% url 'manual_resume_create' %}" class="btn btn-primary btn-lg">
              <i class="fas fa-plus"></i> Create New Resume
            </a>
          </div>
        {% endif %}

        <div class="text-center mt-4">
          {% if resumes %}
            <a href="{% url 'manual_resume_create' %}" class="btn btn-primary btn-lg">
              <i class="fas fa-plus"></i> Create New Resume
            </a>
          {% endif %}
          <a href="{% url 'dashboard' %}" class="btn btn-outline-primary btn-lg">
            <i class="fas fa-home"></i> Dashboard
          </a>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/manual_entry/create.html =====

<!-- resume/templates/resume/manual_entry/create.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Create Resume | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      min-height: 100vh;
      padding: 20px 0;
      color: #112D4E;
    }
    .container {
      max-width: 800px;
    }
    .main-card {
      background: #F9F7F7;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(17,45,78,.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      color: #F9F7F7;
      padding: 30px;
      text-align: center;
    }
    .form-section {
      padding: 40px;
    }
    .form-group {
      margin-bottom: 20px;
    }
    .form-label {
      font-weight: 600;
      color: #112D4E;
      margin-bottom: 8px;
    }
    .form-control {
      padding: 12px 15px;
      border: 2px solid #DBE2EF;
      border-radius: 8px;
      transition: all 0.3s;
      background: #F9F7F7;
      color: #112D4E;
    }
    .form-control:focus {
      border-color: #3F72AF;
      box-shadow: 0 0 0 3px rgba(63,114,175,.1);
      background: #FFFFFF;
    }
    .btn-primary {
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border: none;
      padding: 12px 30px;
      border-radius: 8px;
      font-weight: 600;
      color: #F9F7F7;
    }
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(63,114,175,.3);
      color: #F9F7F7;
    }
    .btn-secondary {
      background: #DBE2EF;
      color: #112D4E;
      border: 1px solid #3F72AF;
      padding: 12px 30px;
      border-radius: 8px;
      font-weight: 600;
    }
    .btn-secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }
    .alert {
      border-radius: 10px;
      padding: 15px;
      margin-bottom: 20px;
    }
    .alert-success {
      background: #DBE2EF;
      border: 1px solid #3F72AF;
      color: #112D4E;
    }
    .alert-danger {
      background: #112D4E;
      color: #F9F7F7;
    }
    .help-text {
      font-size: 0.9rem;
      color: #3F72AF;
      margin-top: 5px;
    }
    .required {
      color: #112D4E;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="main-card">
      <div class="header">
        <h1><i class="fas fa-plus-circle"></i> Create New Resume</h1>
        <p>Start by entering your basic information</p>
      </div>

      <div class="form-section">
        {% if messages %}
          {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
              <i class="fas fa-info-circle"></i> {{ message }}
            </div>
          {% endfor %}
        {% endif %}

        <form method="post">
          {% csrf_token %}
          
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.full_name.label }} <span class="required">*</span></label>
                {{ form.full_name }}
                {% if form.full_name.errors %}
                  <div class="alert alert-danger mt-2">{{ form.full_name.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.professional_title.label }} <span class="required">*</span></label>
                {{ form.professional_title }}
                {% if form.professional_title.errors %}
                  <div class="alert alert-danger mt-2">{{ form.professional_title.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.email.label }} <span class="required">*</span></label>
                {{ form.email }}
                {% if form.email.errors %}
                  <div class="alert alert-danger mt-2">{{ form.email.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.phone.label }} <span class="required">*</span></label>
                {{ form.phone }}
                {% if form.phone.errors %}
                  <div class="alert alert-danger mt-2">{{ form.phone.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-4">
              <div class="form-group">
                <label class="form-label">{{ form.city.label }} <span class="required">*</span></label>
                {{ form.city }}
                {% if form.city.errors %}
                  <div class="alert alert-danger mt-2">{{ form.city.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-4">
              <div class="form-group">
                <label class="form-label">{{ form.state_province.label }}</label>
                {{ form.state_province }}
                {% if form.state_province.errors %}
                  <div class="alert alert-danger mt-2">{{ form.state_province.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-4">
              <div class="form-group">
                <label class="form-label">{{ form.country.label }} <span class="required">*</span></label>
                {{ form.country }}
                {% if form.country.errors %}
                  <div class="alert alert-danger mt-2">{{ form.country.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.linkedin_url.label }}</label>
                {{ form.linkedin_url }}
                {% if form.linkedin_url.errors %}
                  <div class="alert alert-danger mt-2">{{ form.linkedin_url.errors }}</div>
                {% endif %}
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label class="form-label">{{ form.portfolio_url.label }}</label>
                {{ form.portfolio_url }}
                {% if form.portfolio_url.errors %}
                  <div class="alert alert-danger mt-2">{{ form.portfolio_url.errors }}</div>
                {% endif %}
              </div>
            </div>
          </div>

          <div class="form-group">
            <label class="form-label">{{ form.professional_summary.label }} <span class="required">*</span></label>
            {{ form.professional_summary }}
            <div class="help-text">Write 2-3 sentences summarizing your career goals, core strengths, and key achievements</div>
            {% if form.professional_summary.errors %}
              <div class="alert alert-danger mt-2">{{ form.professional_summary.errors }}</div>
            {% endif %}
          </div>

          <div class="d-flex justify-content-between mt-4">
            <a href="{% url 'dashboard' %}" class="btn btn-secondary">
              <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-arrow-right"></i> Continue to Full Form
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/manual_entry/confirm_delete.html =====

<!-- resume/templates/resume/manual_entry/confirm_delete.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Delete Resume | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
      min-height: 100vh;
      padding: 20px 0;
      color: #112D4E;
    }
    .container {
      max-width: 600px;
    }
    .main-card {
      background: #F9F7F7;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(17,45,78,.1);
      overflow: hidden;
    }
    .header {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: #F9F7F7;
      padding: 30px;
      text-align: center;
    }
    .content-section {
      padding: 40px;
      text-align: center;
    }
    .warning-icon {
      font-size: 4rem;
      color: #112D4E;
      margin-bottom: 20px;
    }
    .resume-info {
      background: #DBE2EF;
      border: 1px solid #3F72AF;
      border-radius: 10px;
      padding: 20px;
      margin: 20px 0;
    }
    .btn {
      padding: 12px 25px;
      border-radius: 8px;
      font-weight: 600;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s;
      margin: 0 10px;
    }
    .btn-danger {
      background: #112D4E;
      color: #F9F7F7;
      border: none;
    }
    .btn-secondary {
      background: #DBE2EF;
      color: #112D4E;
      border: 1px solid #3F72AF;
    }
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17,45,78,0.2);
    }
    .btn-danger:hover {
      color: #F9F7F7;
    }
    .btn-secondary:hover {
      background: #3F72AF;
      color: #F9F7F7;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="main-card">
      <div class="header">
        <h1><i class="fas fa-exclamation-triangle"></i> Delete Resume</h1>
        <p>This action cannot be undone</p>
      </div>

      <div class="content-section">
        <div class="warning-icon">
          <i class="fas fa-trash-alt"></i>
        </div>
        
        <h3>Are you sure you want to delete this resume?</h3>
        
        <div class="resume-info">
          <h5>{{ resume.full_name }}</h5>
          <p class="mb-1"><strong>Title:</strong> {{ resume.professional_title }}</p>
          <p class="mb-1"><strong>Last Updated:</strong> {{ resume.updated_at|date:"M d, Y" }}</p>
          <p class="mb-0">
            <strong>Status:</strong> 
            {% if resume.is_complete %}
              <span class="text-success">Complete</span>
            {% else %}
              <span class="text-warning">Draft</span>
            {% endif %}
          </p>
        </div>

        <p class="text-muted mb-4">
          Once deleted, this resume and all its data will be permanently removed from your account.
        </p>

        <form method="post" style="display: inline;">
          {% csrf_token %}
          <button type="submit" class="btn btn-danger">
            <i class="fas fa-trash"></i> Yes, Delete Resume
          </button>
        </form>
        
        <a href="{% url 'manual_resume_list' %}" class="btn btn-secondary">
          <i class="fas fa-arrow-left"></i> Cancel
        </a>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template5.html =====

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Wharton Executive</title>
<style>
 /* Wharton MBA CDC tips: narrow 0.7 in, Arial Narrow 10-11 pt */
 @page{margin:0.7in}
 body{font-family:"Arial Narrow",Arial,sans-serif;font-size:10.5pt;margin:0.7in;color:#111}
 h1{text-align:center;font-size:20pt;margin:0 0 6pt}
 h2{font-size:11pt;margin:18pt 0 4pt;text-transform:uppercase;border-bottom:1px solid #666}
 h3{font-size:10.5pt;margin:2pt 0;font-weight:bold}
 p,li{margin:0 0 3pt}
 ul{margin-left:18px}
</style>
</head>
<body>
<h1>{{NAME}}</h1>
<p style="text-align:center">{{EMAIL}} · {{PHONE}} · {{LOCATION}}</p>

<h2>Executive Summary</h2>
<p>{{SUMMARY}}</p>

<h2>Experience</h2>
{{WORK_EXPERIENCE}}

<h2>Projects</h2>
{{PROJECTS}}

<h2>Education</h2>
<p><strong>{{DEGREE}}</strong>, {{UNIVERSITY}}, {{GRADUATION_YEAR}}</p>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template4.html =====

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Stanford Professional</title>
<style>
 /* Stanford BEAM style: 0.7 in margins, Georgia 11 pt */
 @page{margin:0.7in}
 body{font-family:Georgia,serif;font-size:11pt;margin:0.7in;color:#000}
 h1{text-align:center;font-size:22pt;margin:0 0 8pt}
 h2{font-size:12pt;margin:14pt 0 5pt;border-bottom:1px solid #444;text-transform:uppercase}
 h3{font-size:11pt;margin:3pt 0;font-weight:bold}
 p,li{margin:0 0 3pt}
 ul{margin-left:16px}
 .job{margin-bottom:10pt}
</style>
</head>
<body>
<h1>{{NAME}}</h1>
<p style="text-align:center">{{EMAIL}} · {{PHONE}} · {{LINKEDIN}}</p>

<h2>Professional Summary</h2>
<p>{{SUMMARY}}</p>

<h2>Work Experience</h2>
<div class="job">
 <h3>{{JOB_TITLE_1}} — {{COMPANY_NAME_1}}</h3><em>{{JOB_DATES_1}}</em>
 <ul>
  <li>{{ACHIEVEMENT_1_1}}</li><li>{{ACHIEVEMENT_1_2}}</li><li>{{ACHIEVEMENT_1_3}}</li>
 </ul>
</div>
{{WORK_EXPERIENCE}}

<h2>Projects</h2>
{{PROJECTS}}

<h2>Education</h2>
<p><strong>{{DEGREE}}</strong>, {{UNIVERSITY}}</p>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template3.html =====

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Cambridge Global Graduate</title>
<style>
 /* Cambridge Careers Service leaflet: 2 cm margins, Calibri 11 pt */
 @page{margin:2cm}
 body{font-family:Calibri,Arial,sans-serif;font-size:11pt;margin:2cm;color:#222}
 h1{font-size:24pt;text-align:center;margin:0 0 8pt}
 h2{font-size:12pt;margin:16pt 0 6pt;border-bottom:1px solid #bbb}
 h3{font-size:11pt;margin:3pt 0;font-weight:bold}
 p,li{margin:0 0 4pt}
 ul{margin-left:18px}
</style>
</head>
<body>
<h1>{{NAME}}</h1>
<p style="text-align:center">{{EMAIL}} · {{PHONE}} · {{LOCATION}}</p>

<h2>Profile</h2>
<p>{{SUMMARY}}</p>

<h2>Education</h2>
<p><strong>{{DEGREE}}</strong>, {{UNIVERSITY}} — {{GRADUATION_YEAR}}</p>

<h2>Work Experience</h2>
<div>
 <h3>{{JOB_TITLE_1}} — {{COMPANY_NAME_1}}</h3><em>{{JOB_DATES_1}}</em>
 <ul><li>{{ACHIEVEMENT_1_1}}</li></ul>
</div>
{{WORK_EXPERIENCE}}

<h2>Projects</h2>
{{PROJECTS}}

<h2>Skills & Languages</h2>
<p>{{SKILLS}}</p>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template2.html =====

<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>MIT Technical</title>
  <style>
    /* MIT CAPD: 0.5–0.75 in margins, clear sans-serif font, 10–11 pt */
    @page { margin: 0.5in; }
    body { font-family: Arial, Helvetica, sans-serif; font-size: 10.5pt; margin: 0.5in; color: #333; }
    h1   { text-align: center; font-size: 18pt; margin: 0 0 10pt; }
    h2   { font-size: 11pt; text-transform: uppercase; margin: 14pt 0 6pt; padding-bottom: 3px; border-bottom: 1px solid #888; color: #111; }
    h3   { font-size: 10.5pt; margin: 2pt 0; font-weight: bold; }
    p, li { margin: 0 0 3pt; }
    ul  { margin-left: 16px; }
    .two-col { display: flex; justify-content: space-between; }
    .two-col > div { width: 49%; }
  </style>
</head>
<body>
  <h1>{{NAME}}</h1>
  <p style="text-align:center">{{EMAIL}} · {{PHONE}} · {{LINKEDIN}}</p>

  <h2>Technical Profile</h2>
  <p>{{SUMMARY}}</p>

  <!-- Two-column section for skills and tools -->
  <div class="two-col">
    <div>
      <h2>Core Skills</h2>
      <p>{{SKILLS}}</p>
    </div>
    <div>
      <h2>Tools &amp; Technologies</h2>
      <p>{{TOOLS}}</p>
    </div>
  </div>

  <h2>Work Experience</h2>
  <div>
    <h3>{{JOB_TITLE_1}} — {{COMPANY_NAME_1}}</h3> <em>{{JOB_DATES_1}}</em>
    <ul><li>{{ACHIEVEMENT_1_1}}</li></ul>
  </div>
  {{WORK_EXPERIENCE}}

  <h2>Projects</h2>
  {{PROJECTS}}

  <h2>Education</h2>
  <p><strong>{{DEGREE}}</strong>, {{UNIVERSITY}}, {{GRADUATION_YEAR}}</p>
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template1.html =====

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Harvard Classic Chronological</title>
<style>
/* Harvard OCS guidelines: 0.6-1 in margins, 11 pt Garamond/Times */
@page { margin: 0.6in; }
body { font-family: "Times New Roman", Times, serif; font-size: 11pt; color: #222; margin: 0.6in; line-height: 1.25; }
h1 { text-align: center; font-size: 20pt; margin: 0 0 6pt; }
h2 { font-size: 12pt; margin: 16pt 0 6pt; border-bottom: 1px solid #666; text-transform: uppercase; }
h3 { font-size: 11pt; margin: 2pt 0; font-weight: bold; }
p, li { margin: 0 0 3pt; }
ul { margin-left: 18px; padding: 0; }
.contact { text-align: center; font-size: 10.5pt; margin-bottom: 12pt; }
.job-entry { margin-bottom: 12pt; }
.job-header { display: flex; justify-content: space-between; align-items: baseline; margin-bottom: 4pt; }
.job-title { font-weight: bold; }
.job-dates { font-style: italic; }
.job-location { color: #555; font-size: 10pt; }
.section-content { margin-bottom: 8pt; }
.project-entry { margin-bottom: 10pt; }
.project-title { font-weight: bold; }
.project-duration { font-style: italic; color: #555; }
/* Hide empty sections */
.section-empty { display: none; }
</style>
</head>
<body>
<h1>{{NAME}}</h1>
<p class="contact">{{EMAIL}} • {{PHONE}} • {{LOCATION}}</p>

<h2>Professional Summary</h2>
<div class="section-content">{{SUMMARY}}</div>

<!-- Work Experience Section - Always show if content exists -->
<h2>Work Experience</h2>
<div class="section-content">
 {{WORK_EXPERIENCE}}
</div>

<!-- Projects Section - Only show if content exists -->
{{#if_projects}}
<h2>Projects</h2>
<div class="section-content">
 {{PROJECTS}}
</div>
{{/if_projects}}

<!-- Education Section - Always show if content exists -->
<h2>Education</h2>
<div class="section-content">
 {{EDUCATION}}
</div>

<!-- Skills Section - Always show -->
<h2>Skills</h2>
<div class="section-content">{{SKILLS}}</div>

<!-- Certifications Section - Only show if content exists -->
{{#if_certifications}}
<h2>Certifications</h2>
<div class="section-content">
 {{CERTIFICATIONS}}
</div>
{{/if_certifications}}

<!-- Languages Section - Only show if content exists -->
{{#if_languages}}
<h2>Languages</h2>
<div class="section-content">
 {{LANGUAGES}}
</div>
{{/if_languages}}

<!-- Volunteer Experience Section - Only show if content exists -->
{{#if_volunteer}}
<h2>Volunteer Experience</h2>
<div class="section-content">
 {{VOLUNTEER_EXPERIENCE}}
</div>
{{/if_volunteer}}

<!-- Awards Section - Only show if content exists -->
{{#if_awards}}
<h2>Awards & Recognition</h2>
<div class="section-content">
 {{AWARDS}}
</div>
{{/if_awards}}

</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/resume/templates_repo/template6.html =====

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Berkeley Modern Hybrid</title>
<style>
 /* UC Berkeley Career Center: 0.6 in, Helvetica 10.5 pt, subtle color */
 @page{margin:0.6in}
 body{font-family:Helvetica,Arial,sans-serif;font-size:10.5pt;margin:0.6in;color:#333}
 h1{text-align:center;font-size:19pt;margin:0 0 8pt;color:#003262}
 h2{font-size:11pt;margin:16pt 0 6pt;border-bottom:1px solid #003262;text-transform:uppercase}
 h3{font-size:10.5pt;margin:2pt 0;font-weight:bold}
 p,li{margin:0 0 3pt}
 ul{margin-left:16px}
 .grid{display:flex;justify-content:space-between;gap:4%}
 .grid>section{width:48%}
</style>
</head>
<body>
<h1>{{NAME}}</h1>
<p style="text-align:center">{{EMAIL}} · {{PHONE}} · {{LINKEDIN}}</p>

<div class="grid">
 <section>
  <h2>Summary</h2>
  <p>{{SUMMARY}}</p>

  <h2>Skills</h2>
  <p>{{SKILLS}}</p>
 </section>

 <section>
  <h2>Education</h2>
  <p><strong>{{DEGREE}}</strong>, {{UNIVERSITY}} — {{GRADUATION_YEAR}}</p>

  <h2>Projects</h2>
  {{PROJECTS}}
 </section>
</div>

<h2>Work Experience</h2>
{{WORK_EXPERIENCE}}
</body>
</html>


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/system_logs.html =====

<!-- resume/templates/admin/system_logs.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>System Logs | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Sidebar styles */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
      text-decoration: none;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17, 45, 78, 0.3);
      color: white;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* System status */
    .status-section {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
    }
    
    .section-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }
    
    .status-item {
      text-align: center;
      padding: 20px;
      background: #f8f9fa;
      border-radius: 8px;
      border: 1px solid #e9ecef;
    }
    
    .status-value {
      font-size: 1.8rem;
      font-weight: 700;
      color: #112D4E;
      margin-bottom: 8px;
    }
    
    .status-label {
      color: #6c757d;
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    /* Logs section */
    .logs-section {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .logs-header {
      padding: 20px 25px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .logs-controls {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .refresh-btn {
      background: #28a745;
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .refresh-btn:hover {
      background: #218838;
    }
    
    .logs-container {
      height: 500px;
      overflow-y: auto;
      background: #1e1e1e;
      color: #f8f9fa;
      font-family: 'Courier New', monospace;
      font-size: 0.8rem;
      line-height: 1.4;
    }
    
    .log-entry {
      padding: 8px 15px;
      border-bottom: 1px solid #333;
      white-space: pre-wrap;
      word-break: break-all;
    }
    
    .log-entry:hover {
      background: #2d2d2d;
    }
    
    .log-entry.error {
      color: #ff6b6b;
      background: rgba(255, 107, 107, 0.1);
    }
    
    .log-entry.warning {
      color: #ffd93d;
      background: rgba(255, 217, 61, 0.1);
    }
    
    .log-entry.info {
      color: #74c0fc;
    }
    
    .log-entry.debug {
      color: #b2bec3;
    }
    
    .no-logs {
      padding: 40px;
      text-align: center;
      color: #6c757d;
    }
    
    .no-logs i {
      font-size: 3rem;
      margin-bottom: 15px;
      opacity: 0.5;
    }
    
    /* Log filters */
    .log-filters {
      display: flex;
      gap: 8px;
      margin-bottom: 10px;
    }
    
    .filter-btn {
      padding: 4px 12px;
      border: 1px solid #dee2e6;
      background: white;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.8rem;
      transition: all 0.3s ease;
    }
    
    .filter-btn.active {
      background: #112D4E;
      color: white;
      border-color: #112D4E;
    }
    
    .filter-btn:hover {
      background: #e9ecef;
    }
    
    .filter-btn.active:hover {
      background: #112D4E;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .status-grid {
        grid-template-columns: 1fr;
      }
      
      .logs-header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
      }
      
      .logs-controls {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link active">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-list-alt"></i>
        System Logs & Monitoring
      </h1>
      <div class="header-actions">
        <button class="btn btn-primary" onclick="refreshLogs()">
          <i class="fas fa-sync-alt"></i>
          Refresh Logs
        </button>
        <a href="{% url 'admin_dashboard' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- System Status -->
      <div class="status-section">
        <h3 class="section-title">
          <i class="fas fa-server"></i>
          System Status Overview
        </h3>
        
        <div class="status-grid">
          <div class="status-item">
            <div class="status-value">{{ system_status.total_users }}</div>
            <div class="status-label">Total Users</div>
          </div>
          
          <div class="status-item">
            <div class="status-value">{{ system_status.active_users_today }}</div>
            <div class="status-label">Active Today</div>
          </div>
          
          <div class="status-item">
            <div class="status-value">{{ system_status.total_resumes }}</div>
            <div class="status-label">Total Resumes</div>
          </div>
          
          <div class="status-item">
            <div class="status-value">{{ system_status.resumes_today }}</div>
            <div class="status-label">Resumes Today</div>
          </div>
          
          <div class="status-item">
            <div class="status-value">{{ system_status.total_downloads }}</div>
            <div class="status-label">Total Downloads</div>
          </div>
          
          <div class="status-item">
            <div class="status-value">{{ system_status.downloads_today }}</div>
            <div class="status-label">Downloads Today</div>
          </div>
        </div>
      </div>

      <!-- System Logs -->
      <div class="logs-section">
        <div class="logs-header">
          <h3 class="section-title">
            <i class="fas fa-terminal"></i>
            Application Logs
          </h3>
          
          <div class="logs-controls">
            <div class="log-filters">
              <button class="filter-btn active" onclick="filterLogs('all')">All</button>
              <button class="filter-btn" onclick="filterLogs('error')">Errors</button>
              <button class="filter-btn" onclick="filterLogs('warning')">Warnings</button>
              <button class="filter-btn" onclick="filterLogs('info')">Info</button>
              <button class="filter-btn" onclick="filterLogs('debug')">Debug</button>
            </div>
            
            <button class="refresh-btn" onclick="refreshLogs()">
              <i class="fas fa-sync-alt"></i>
              Refresh
            </button>
          </div>
        </div>
        
        <div class="logs-container" id="logsContainer">
          {% if log_entries %}
            {% for entry in log_entries %}
              <div class="log-entry {% if 'ERROR' in entry %}error{% elif 'WARNING' in entry %}warning{% elif 'INFO' in entry %}info{% else %}debug{% endif %}">{{ entry }}</div>
            {% endfor %}
          {% else %}
            <div class="no-logs">
              <i class="fas fa-file-alt"></i>
              <h4>No logs available</h4>
              <p>Log files are empty or not configured. Check your logging settings.</p>
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </main>

  <script>
    let currentFilter = 'all';
    
    function filterLogs(type) {
      currentFilter = type;
      
      // Update active button
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      event.target.classList.add('active');
      
      // Filter log entries
      const logEntries = document.querySelectorAll('.log-entry');
      logEntries.forEach(entry => {
        if (type === 'all') {
          entry.style.display = 'block';
        } else {
          if (entry.classList.contains(type)) {
            entry.style.display = 'block';
          } else {
            entry.style.display = 'none';
          }
        }
      });
    }
    
    function refreshLogs() {
      location.reload();
    }
    
    // Auto-refresh logs every 30 seconds
    setInterval(refreshLogs, 30000);
    
    // Auto-scroll to bottom of logs
    const logsContainer = document.getElementById('logsContainer');
    if (logsContainer) {
      logsContainer.scrollTop = logsContainer.scrollHeight;
    }
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/dashboard.html =====

<!-- resume/templates/admin/dashboard.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Admin Dashboard | ATS Resume Optimizer</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
      overflow-x: hidden;
    }
    
    /* Sidebar */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      transition: all 0.3s ease;
      overflow-y: auto;
    }
    
    .sidebar.collapsed {
      width: 80px;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar.collapsed .sidebar-header h3,
    .sidebar.collapsed .sidebar-header p {
      display: none;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    .sidebar.collapsed .nav-link span {
      display: none;
    }
    
    .sidebar.collapsed .nav-link {
      justify-content: center;
      margin: 5px 10px;
    }
    
    .sidebar.collapsed .nav-link i {
      margin: 0;
    }
    
    /* Main Content */
    .main-content {
      margin-left: 250px;
      transition: all 0.3s ease;
      min-height: 100vh;
    }
    
    .main-content.expanded {
      margin-left: 80px;
    }
    
    /* Header */
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .sidebar-toggle {
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      padding: 8px 12px;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .sidebar-toggle:hover {
      background: #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
    }
    
    .header-right {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .user-menu {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 8px 15px;
      background: #f8f9fa;
      border-radius: 25px;
      border: 1px solid #dee2e6;
    }
    
    .user-avatar {
      width: 32px;
      height: 32px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
    }
    
    /* Dashboard Content */
    .dashboard-content {
      padding: 25px;
    }
    
    /* Stats Cards */
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      border-left: 4px solid;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .stat-card::before {
      content: '';
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 100px;
      background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1));
      border-radius: 50%;
      transform: translate(30px, -30px);
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    }
    
    .stat-card.users {
      border-left-color: #28a745;
    }
    
    .stat-card.resumes {
      border-left-color: #007bff;
    }
    
    .stat-card.manual {
      border-left-color: #ffc107;
    }
    
    .stat-card.downloads {
      border-left-color: #dc3545;
    }
    
    .stat-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 15px;
    }
    
    .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.5rem;
    }
    
    .stat-icon.users {
      background: linear-gradient(135deg, #28a745, #20c997);
    }
    
    .stat-icon.resumes {
      background: linear-gradient(135deg, #007bff, #0056b3);
    }
    
    .stat-icon.manual {
      background: linear-gradient(135deg, #ffc107, #e0a800);
    }
    
    .stat-icon.downloads {
      background: linear-gradient(135deg, #dc3545, #c82333);
    }
    
    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      color: #212529;
      margin-bottom: 5px;
    }
    
    .stat-label {
      color: #6c757d;
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    .stat-change {
      font-size: 0.8rem;
      margin-top: 10px;
      padding: 4px 8px;
      border-radius: 4px;
      display: inline-block;
    }
    
    .stat-change.positive {
      color: #28a745;
      background: rgba(40, 167, 69, 0.1);
    }
    
    .stat-change.negative {
      color: #dc3545;
      background: rgba(220, 53, 69, 0.1);
    }
    
    /* Charts Section */
    .charts-section {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 25px;
      margin-bottom: 30px;
    }
    
    .chart-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
    }
    
    .chart-title {
      font-size: 1.1rem;
      font-weight: 600;
      color: #212529;
    }
    
    .chart-controls {
      display: flex;
      gap: 10px;
    }
    
    .chart-btn {
      padding: 6px 12px;
      border: 1px solid #dee2e6;
      background: white;
      border-radius: 4px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .chart-btn.active,
    .chart-btn:hover {
      background: #112D4E;
      color: white;
      border-color: #112D4E;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
    }
    
    /* Quick Actions */
    .quick-actions {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .section-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .action-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
    
    .action-btn {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 15px 20px;
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      text-decoration: none;
      color: #495057;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .action-btn:hover {
      background: #e9ecef;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      color: #212529;
      text-decoration: none;
    }
    
    .action-btn i {
      font-size: 1.2rem;
      color: #112D4E;
    }
    
    /* Recent Activity */
    .recent-activity {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .activity-list {
      list-style: none;
    }
    
    .activity-item {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px 0;
      border-bottom: 1px solid #e9ecef;
    }
    
    .activity-item:last-child {
      border-bottom: none;
    }
    
    .activity-icon {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1rem;
    }
    
    .activity-icon.user {
      background: linear-gradient(135deg, #28a745, #20c997);
    }
    
    .activity-icon.resume {
      background: linear-gradient(135deg, #007bff, #0056b3);
    }
    
    .activity-icon.download {
      background: linear-gradient(135deg, #dc3545, #c82333);
    }
    
    .activity-content {
      flex: 1;
    }
    
    .activity-title {
      font-weight: 600;
      color: #212529;
      margin-bottom: 4px;
    }
    
    .activity-meta {
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .sidebar {
        transform: translateX(-100%);
      }
      
      .sidebar.show {
        transform: translateX(0);
      }
      
      .main-content {
        margin-left: 0;
      }
      
      .charts-section {
        grid-template-columns: 1fr;
      }
      
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      .action-grid {
        grid-template-columns: 1fr;
      }
    }
    
    /* System Settings Display */
    .settings-overview {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .settings-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .setting-item {
      text-align: center;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
      border: 1px solid #dee2e6;
    }
    
    .setting-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #112D4E;
      margin-bottom: 5px;
    }
    
    .setting-label {
      font-size: 0.9rem;
      color: #6c757d;
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar" id="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link active">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
      <div class="header-left">
        <button class="sidebar-toggle" onclick="toggleSidebar()">
          <i class="fas fa-bars"></i>
        </button>
        <h1 class="header-title">
          <i class="fas fa-tachometer-alt"></i>
          Dashboard Overview
        </h1>
      </div>
      <div class="header-right">
        <div class="user-menu">
          <div class="user-avatar">{{ request.user.username.0|upper }}</div>
          <span>{{ request.user.username }}</span>
        </div>
      </div>
    </header>

    <!-- Dashboard Content -->
    <div class="dashboard-content">
      <!-- Stats Cards -->
      <div class="stats-grid">
        <div class="stat-card users">
          <div class="stat-header">
            <div>
              <div class="stat-number">{{ total_users|default:0 }}</div>
              <div class="stat-label">Total Users</div>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> +{{ recent_users }} this month
              </div>
            </div>
            <div class="stat-icon users">
              <i class="fas fa-users"></i>
            </div>
          </div>
        </div>

        <div class="stat-card resumes">
          <div class="stat-header">
            <div>
              <div class="stat-number">{{ total_resumes|default:0 }}</div>
              <div class="stat-label">Total Resumes</div>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> +{{ recent_resumes }} this month
              </div>
            </div>
            <div class="stat-icon resumes">
              <i class="fas fa-file-alt"></i>
            </div>
          </div>
        </div>

        <div class="stat-card manual">
          <div class="stat-header">
            <div>
              <div class="stat-number">{{ total_manual_resumes|default:0 }}</div>
              <div class="stat-label">Manual Resumes</div>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> Growing
              </div>
            </div>
            <div class="stat-icon manual">
              <i class="fas fa-edit"></i>
            </div>
          </div>
        </div>

        <div class="stat-card downloads">
          <div class="stat-header">
            <div>
              <div class="stat-number">{{ total_downloads|default:0 }}</div>
              <div class="stat-label">Total Downloads</div>
              <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i> +{{ recent_downloads }} this month
              </div>
            </div>
            <div class="stat-icon downloads">
              <i class="fas fa-download"></i>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Section -->
      <div class="charts-section">
        <div class="chart-card">
          <div class="chart-header">
            <h3 class="chart-title">Activity Overview (Last 7 Days)</h3>
            <div class="chart-controls">
              <button class="chart-btn active" onclick="switchChart('users')">Users</button>
              <button class="chart-btn" onclick="switchChart('resumes')">Resumes</button>
              <button class="chart-btn" onclick="switchChart('downloads')">Downloads</button>
            </div>
          </div>
          <div class="chart-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>

        <div class="recent-activity">
          <h3 class="section-title">
            <i class="fas fa-clock"></i>
            Recent Activity
          </h3>
          <ul class="activity-list">
            {% for user in top_users|slice:":5" %}
              <li class="activity-item">
                <div class="activity-icon user">
                  <i class="fas fa-user"></i>
                </div>
                <div class="activity-content">
                  <div class="activity-title">{{ user.username }}</div>
                  <div class="activity-meta">{{ user.total_resumes }} resumes, {{ user.total_downloads }} downloads</div>
                </div>
              </li>
            {% empty %}
              <li class="activity-item">
                <div class="activity-content">
                  <div class="activity-title">No recent activity</div>
                  <div class="activity-meta">System ready for users</div>
                </div>
              </li>
            {% endfor %}
          </ul>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="quick-actions">
        <h3 class="section-title">
          <i class="fas fa-bolt"></i>
          Quick Actions
        </h3>
        <div class="action-grid">
          <a href="{% url 'admin_create_user' %}" class="action-btn">
            <i class="fas fa-user-plus"></i>
            Create New User
          </a>
          <a href="{% url 'admin_users' %}" class="action-btn">
            <i class="fas fa-users-cog"></i>
            Manage Users
          </a>
          <a href="{% url 'admin_settings' %}" class="action-btn">
            <i class="fas fa-sliders-h"></i>
            System Settings
          </a>
          <a href="{% url 'admin_analytics' %}" class="action-btn">
            <i class="fas fa-chart-line"></i>
            View Analytics
          </a>
          <a href="{% url 'admin_system_logs' %}" class="action-btn">
            <i class="fas fa-terminal"></i>
            System Logs
          </a>
          <a href="{% url 'dashboard' %}" class="action-btn">
            <i class="fas fa-external-link-alt"></i>
            Main Application
          </a>
        </div>
      </div>

      <!-- Current Settings Overview -->
      <div class="settings-overview">
        <h3 class="section-title">
          <i class="fas fa-cogs"></i>
          Current System Settings
        </h3>
        <div class="settings-grid">
          <div class="setting-item">
            <div class="setting-value">{{ current_settings.TARGET_ATS_SCORE }}%</div>
            <div class="setting-label">Target ATS Score</div>
          </div>
          <div class="setting-item">
            <div class="setting-value">{{ current_settings.TARGET_JOB_SCORE }}%</div>
            <div class="setting-label">Target Job Score</div>
          </div>
          <div class="setting-item">
            <div class="setting-value">{{ current_settings.DOWNLOADS_PER_15_DAYS }}</div>
            <div class="setting-label">Downloads per 15 Days</div>
          </div>
          <div class="setting-item">
            <div class="setting-value">{{ current_settings.DOWNLOADS_PER_MONTH }}</div>
            <div class="setting-label">Downloads per Month</div>
          </div>
          <div class="setting-item">
            <div class="setting-value">{{ current_settings.MAX_FILE_SIZE_MB }}MB</div>
            <div class="setting-label">Max File Size</div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Global variables
    var activityChart;
    var weeklyDataRaw;
    var weeklyData;

    // Sidebar toggle functionality
    function toggleSidebar() {
      var sidebar = document.getElementById('sidebar');
      var mainContent = document.getElementById('mainContent');
      
      if (sidebar && mainContent) {
        sidebar.classList.toggle('collapsed');
        mainContent.classList.toggle('expanded');
      }
    }

    // Parse weekly data safely
    function parseWeeklyData() {
      try {
        weeklyDataRaw = '{{ weekly_stats|safe }}';
        weeklyData = JSON.parse(weeklyDataRaw);
        
        // Validate data structure
        if (!Array.isArray(weeklyData) || weeklyData.length === 0) {
          console.warn('Invalid weekly data, using fallback');
          weeklyData = generateFallbackData();
        }
      } catch (e) {
        console.warn('Failed to parse weekly data:', e);
        weeklyData = generateFallbackData();
      }
    }

    // Generate fallback data
    function generateFallbackData() {
      var fallbackData = [];
      for (var i = 6; i >= 0; i--) {
        var date = new Date();
        date.setDate(date.getDate() - i);
        fallbackData.push({
          date: date.toISOString().split('T')[0],
          users: 0,
          resumes: 0,
          downloads: 0
        });
      }
      return fallbackData;
    }

    // Initialize chart
    function initChart() {
      var ctx = document.getElementById('activityChart');
      if (!ctx) {
        console.error('Chart canvas not found');
        return;
      }
      
      ctx = ctx.getContext('2d');
      
      try {
        activityChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: weeklyData.map(function(d) {
              return new Date(d.date).toLocaleDateString();
            }),
            datasets: [{
              label: 'Users',
              data: weeklyData.map(function(d) {
                return d.users;
              }),
              borderColor: '#28a745',
              backgroundColor: 'rgba(40, 167, 69, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                grid: {
                  color: 'rgba(0,0,0,0.1)'
                }
              },
              x: {
                grid: {
                  display: false
                }
              }
            },
            elements: {
              point: {
                radius: 6,
                hoverRadius: 8
              }
            }
          }
        });
      } catch (error) {
        console.error('Chart initialization failed:', error);
      }
    }

    // Switch chart data
    function switchChart(type) {
      if (!activityChart) {
        console.error('Chart not initialized');
        return;
      }

      // Update button states
      var buttons = document.querySelectorAll('.chart-btn');
      buttons.forEach(function(btn) {
        btn.classList.remove('active');
      });
      
      // Find and activate the clicked button
      var clickedButton = event ? event.target : null;
      if (clickedButton) {
        clickedButton.classList.add('active');
      }

      // Update chart data
      var data, color, bgColor, label;
      
      switch(type) {
        case 'users':
          data = weeklyData.map(function(d) { return d.users; });
          color = '#28a745';
          bgColor = 'rgba(40, 167, 69, 0.1)';
          label = 'Users';
          break;
        case 'resumes':
          data = weeklyData.map(function(d) { return d.resumes; });
          color = '#007bff';
          bgColor = 'rgba(0, 123, 255, 0.1)';
          label = 'Resumes';
          break;
        case 'downloads':
          data = weeklyData.map(function(d) { return d.downloads; });
          color = '#dc3545';
          bgColor = 'rgba(220, 53, 69, 0.1)';
          label = 'Downloads';
          break;
        default:
          data = weeklyData.map(function(d) { return d.users; });
          color = '#28a745';
          bgColor = 'rgba(40, 167, 69, 0.1)';
          label = 'Users';
      }

      activityChart.data.datasets[0].data = data;
      activityChart.data.datasets[0].borderColor = color;
      activityChart.data.datasets[0].backgroundColor = bgColor;
      activityChart.data.datasets[0].label = label;
      activityChart.update();
    }

    // Auto-refresh stats
    function refreshStats() {
      if (typeof fetch === 'undefined') {
        console.warn('Fetch API not available');
        return;
      }

      fetch('{% url "admin_api_stats" %}')
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          // Update stat numbers safely
          var elements = {
            users: document.querySelector('.stat-card.users .stat-number'),
            resumes: document.querySelector('.stat-card.resumes .stat-number'),
            downloads: document.querySelector('.stat-card.downloads .stat-number')
          };
          
          if (elements.users) elements.users.textContent = data.total_users || 0;
          if (elements.resumes) elements.resumes.textContent = data.total_resumes || 0;
          if (elements.downloads) elements.downloads.textContent = data.total_downloads || 0;
        })
        .catch(function(error) {
          console.log('Stats refresh failed:', error);
        });
    }

    // Mobile sidebar toggle
    function setupMobileToggle() {
      if (window.innerWidth <= 768) {
        var toggleButton = document.querySelector('.sidebar-toggle');
        if (toggleButton) {
          toggleButton.onclick = function() {
            var sidebar = document.getElementById('sidebar');
            if (sidebar) {
              sidebar.classList.toggle('show');
            }
          };
        }
      }
    }

    // Responsive handling
    function handleResize() {
      if (window.innerWidth <= 768) {
        var sidebar = document.getElementById('sidebar');
        var mainContent = document.getElementById('mainContent');
        
        if (sidebar) sidebar.classList.remove('collapsed');
        if (mainContent) mainContent.classList.remove('expanded');
      }
    }

    // Initialize everything when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      try {
        // Parse data first
        parseWeeklyData();
        
        // Initialize chart
        initChart();
        
        // Setup mobile toggle
        setupMobileToggle();
        
        // Auto-refresh every 30 seconds
        setInterval(refreshStats, 30000);
        
        // Add resize listener
        window.addEventListener('resize', handleResize);
        
      } catch (error) {
        console.error('Dashboard initialization failed:', error);
      }
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/user_detail.html =====

<!-- resume/templates/admin/user_detail.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>User Details | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Sidebar styles */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17, 45, 78, 0.3);
      color: white;
      text-decoration: none;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
    }
    
    .btn-danger {
      background: #dc3545;
      color: white;
    }
    
    .btn-danger:hover {
      background: #c82333;
      color: white;
    }
    
    .btn-success {
      background: #28a745;
      color: white;
    }
    
    .btn-success:hover {
      background: #218838;
      color: white;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* User profile card */
    .user-profile-card {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
    }
    
    .profile-header {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #e9ecef;
    }
    
    .profile-avatar {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 700;
      font-size: 2rem;
    }
    
    .profile-info {
      flex: 1;
    }
    
    .profile-name {
      font-size: 1.8rem;
      font-weight: 700;
      color: #212529;
      margin-bottom: 5px;
    }
    
    .profile-email {
      color: #6c757d;
      font-size: 1.1rem;
      margin-bottom: 10px;
    }
    
    .profile-badges {
      display: flex;
      gap: 10px;
    }
    
    .badge {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .badge-success {
      background: rgba(40, 167, 69, 0.1);
      color: #28a745;
    }
    
    .badge-danger {
      background: rgba(220, 53, 69, 0.1);
      color: #dc3545;
    }
    
    .badge-warning {
      background: rgba(255, 193, 7, 0.1);
      color: #ffc107;
    }
    
    .profile-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .stat-item {
      text-align: center;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
    }
    
    .stat-number {
      font-size: 1.8rem;
      font-weight: 700;
      color: #112D4E;
      margin-bottom: 5px;
    }
    
    .stat-label {
      font-size: 0.9rem;
      color: #6c757d;
    }
    
    /* Action sections */
    .action-section {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
    }
    
    .section-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .action-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
    }
    
    .action-card {
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
    }
    
    .action-icon {
      font-size: 2rem;
      margin-bottom: 15px;
      color: #112D4E;
    }
    
    .action-title {
      font-weight: 600;
      margin-bottom: 10px;
      color: #212529;
    }
    
    .action-description {
      font-size: 0.9rem;
      color: #6c757d;
      margin-bottom: 15px;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      margin-bottom: 5px;
      color: #212529;
    }
    
    .form-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      font-size: 0.9rem;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #112D4E;
      box-shadow: 0 0 0 2px rgba(17, 45, 78, 0.1);
    }
    
    /* Recent activity */
    .activity-list {
      list-style: none;
    }
    
    .activity-item {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 15px 0;
      border-bottom: 1px solid #e9ecef;
    }
    
    .activity-item:last-child {
      border-bottom: none;
    }
    
    .activity-icon {
      width: 40px;
      height: 40px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1rem;
    }
    
    .activity-icon.resume {
      background: linear-gradient(135deg, #007bff, #0056b3);
    }
    
    .activity-icon.download {
      background: linear-gradient(135deg, #dc3545, #c82333);
    }
    
    .activity-content {
      flex: 1;
    }
    
    .activity-title {
      font-weight: 600;
      color: #212529;
      margin-bottom: 4px;
    }
    
    .activity-meta {
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    /* Messages */
    .alert {
      padding: 12px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid transparent;
    }
    
    .alert-success {
      background: rgba(40, 167, 69, 0.1);
      border-color: #28a745;
      color: #155724;
    }
    
    .alert-danger {
      background: rgba(220, 53, 69, 0.1);
      border-color: #dc3545;
      color: #721c24;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .profile-header {
        flex-direction: column;
        text-align: center;
      }
      
      .action-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link active">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-user-edit"></i>
        User Details: {{ user_obj.username }}
      </h1>
      <div class="header-actions">
        <a href="{% url 'admin_users' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Users
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- Messages -->
      {% if messages %}
        {% for message in messages %}
          <div class="alert alert-{{ message.tags }}">
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}

      <!-- User Profile Card -->
      <div class="user-profile-card">
        <div class="profile-header">
          <div class="profile-avatar">
            {{ user_obj.username.0|upper }}
          </div>
          <div class="profile-info">
            <div class="profile-name">{{ user_obj.username }}</div>
            <div class="profile-email">{{ user_obj.email }}</div>
            <div class="profile-badges">
              {% if user_obj.is_active %}
                <span class="badge badge-success">Active</span>
              {% else %}
                <span class="badge badge-danger">Inactive</span>
              {% endif %}
              {% if user_obj.is_staff %}
                <span class="badge badge-warning">Staff</span>
              {% endif %}
              {% if user_obj.is_superuser %}
                <span class="badge badge-primary">Superuser</span>
              {% endif %}
            </div>
          </div>
        </div>
        
        <div class="profile-stats">
          <div class="stat-item">
            <div class="stat-number">{{ total_resumes }}</div>
            <div class="stat-label">Total Resumes</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">{{ total_downloads }}</div>
            <div class="stat-label">Downloads</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">{{ total_manual_resumes }}</div>
            <div class="stat-label">Manual Resumes</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">
              {% if user_obj.last_login %}
                {{ user_obj.last_login|date:"M j, Y" }}
              {% else %}
                Never
              {% endif %}
            </div>
            <div class="stat-label">Last Login</div>
          </div>
        </div>
      </div>

      <!-- User Actions -->
      <div class="action-section">
        <h3 class="section-title">
          <i class="fas fa-tools"></i>
          User Management Actions
        </h3>
        
        <div class="action-grid">
          <!-- Update Download Limits -->
          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-download"></i>
            </div>
            <div class="action-title">Download Limits</div>
            <div class="action-description">Adjust download limits for this user</div>
            
            <form method="post">
              {% csrf_token %}
              <input type="hidden" name="action" value="update_limits">
              
              <div class="form-group">
                <label class="form-label">Downloads per 15 days</label>
                <input type="number" 
                       name="downloads_15_days" 
                       class="form-control" 
                       value="{{ custom_limits.per_15_days }}" 
                       min="0" max="100">
              </div>
              
              <div class="form-group">
                <label class="form-label">Downloads per month</label>
                <input type="number" 
                       name="downloads_month" 
                       class="form-control" 
                       value="{{ custom_limits.per_month }}" 
                       min="0" max="100">
              </div>
              
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Update Limits
              </button>
            </form>
          </div>

          <!-- Account Status -->
          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-user-check"></i>
            </div>
            <div class="action-title">Account Status</div>
            <div class="action-description">Enable/disable user account</div>
            
            <form method="post" style="margin-bottom: 10px;">
              {% csrf_token %}
              <input type="hidden" name="action" value="toggle_active">
              {% if user_obj.is_active %}
                <button type="submit" class="btn btn-danger">
                  <i class="fas fa-user-slash"></i> Deactivate Account
                </button>
              {% else %}
                <button type="submit" class="btn btn-success">
                  <i class="fas fa-user-check"></i> Activate Account
                </button>
              {% endif %}
            </form>
          </div>

          <!-- Staff Access -->
          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-user-cog"></i>
            </div>
            <div class="action-title">Staff Access</div>
            <div class="action-description">Grant/revoke admin access</div>
            
            <form method="post" style="margin-bottom: 10px;">
              {% csrf_token %}
              <input type="hidden" name="action" value="toggle_staff">
              {% if user_obj.is_staff %}
                <button type="submit" class="btn btn-danger">
                  <i class="fas fa-user-minus"></i> Remove Staff Access
                </button>
              {% else %}
                <button type="submit" class="btn btn-success">
                  <i class="fas fa-user-plus"></i> Grant Staff Access
                </button>
              {% endif %}
            </form>
          </div>

          <!-- Delete User -->
          {% if user_obj != request.user %}
          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-user-times"></i>
            </div>
            <div class="action-title">Delete User</div>
            <div class="action-description">Permanently delete this user account</div>
            
            <form method="post" onsubmit="return confirm('Are you sure you want to delete this user? This action cannot be undone!');">
              {% csrf_token %}
              <input type="hidden" name="action" value="delete_user">
              <button type="submit" class="btn btn-danger">
                <i class="fas fa-trash"></i> Delete User
              </button>
            </form>
          </div>
          {% endif %}
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="action-section">
        <h3 class="section-title">
          <i class="fas fa-history"></i>
          Recent Activity
        </h3>
        
        <ul class="activity-list">
          {% for download in user_downloads %}
            <li class="activity-item">
              <div class="activity-icon download">
                <i class="fas fa-download"></i>
              </div>
              <div class="activity-content">
                <div class="activity-title">Downloaded Resume</div>
                <div class="activity-meta">{{ download.downloaded|date:"M j, Y H:i" }}</div>
              </div>
            </li>
          {% endfor %}
          
          {% for resume in user_resumes %}
            <li class="activity-item">
              <div class="activity-icon resume">
                <i class="fas fa-file-alt"></i>
              </div>
              <div class="activity-content">
                <div class="activity-title">Uploaded Resume: {{ resume.file.name }}</div>
                <div class="activity-meta">{{ resume.created_at|date:"M j, Y H:i" }}</div>
              </div>
            </li>
          {% endfor %}
          
          {% if not user_downloads and not user_resumes %}
            <li class="activity-item">
              <div class="activity-content">
                <div class="activity-title">No recent activity</div>
                <div class="activity-meta">This user hasn't performed any actions yet</div>
              </div>
            </li>
          {% endif %}
        </ul>
      </div>
    </div>
  </main>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/users.html =====

<!-- resume/templates/admin/users.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>User Management | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Include the same sidebar styles from dashboard */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17, 45, 78, 0.3);
      color: white;
      text-decoration: none;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* Search and filters */
    .filters-section {
      background: white;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
    }
    
    .filters-row {
      display: flex;
      gap: 20px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .search-box {
      flex: 1;
      min-width: 300px;
      position: relative;
    }
    
    .search-input {
      width: 100%;
      padding: 12px 20px 12px 45px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    
    .search-input:focus {
      outline: none;
      border-color: #112D4E;
      box-shadow: 0 0 0 3px rgba(17, 45, 78, 0.1);
    }
    
    .search-icon {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #6c757d;
    }
    
    .filter-select {
      padding: 12px 15px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      background: white;
      cursor: pointer;
    }
    
    .filter-select:focus {
      outline: none;
      border-color: #112D4E;
    }
    
    .stats-bar {
      background: #f8f9fa;
      padding: 15px 20px;
      border-radius: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .stats-text {
      color: #6c757d;
      font-size: 0.9rem;
    }
    
    /* Users table */
    .users-table {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .table {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
    }
    
    .table th {
      background: #f8f9fa;
      padding: 15px 20px;
      text-align: left;
      font-weight: 600;
      color: #495057;
      border-bottom: 1px solid #e9ecef;
      font-size: 0.9rem;
    }
    
    .table td {
      padding: 15px 20px;
      border-bottom: 1px solid #f1f3f4;
      vertical-align: middle;
    }
    
    .table tbody tr:hover {
      background: #f8f9fa;
    }
    
    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .user-avatar-small {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      font-size: 0.9rem;
    }
    
    .user-details {
      flex: 1;
    }
    
    .user-name {
      font-weight: 600;
      color: #212529;
      margin-bottom: 2px;
    }
    
    .user-email {
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    .status-badge {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .status-active {
      background: rgba(40, 167, 69, 0.1);
      color: #28a745;
    }
    
    .status-inactive {
      background: rgba(220, 53, 69, 0.1);
      color: #dc3545;
    }
    
    .status-staff {
      background: rgba(255, 193, 7, 0.1);
      color: #ffc107;
    }
    
    .user-stats {
      text-align: center;
    }
    
    .stat-number {
      font-weight: 600;
      color: #212529;
      font-size: 1.1rem;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: #6c757d;
      margin-top: 2px;
    }
    
    .actions-cell {
      text-align: right;
    }
    
    .btn-sm {
      padding: 6px 12px;
      font-size: 0.8rem;
    }
    
    .btn-view {
      background: #17a2b8;
      color: white;
    }
    
    .btn-view:hover {
      background: #138496;
      color: white;
      text-decoration: none;
    }
    
    /* Pagination */
    .pagination-section {
      background: white;
      padding: 20px;
      border-top: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .pagination-info {
      color: #6c757d;
      font-size: 0.9rem;
    }
    
    .pagination {
      display: flex;
      gap: 5px;
      list-style: none;
      margin: 0;
    }
    
    .page-link {
      padding: 8px 12px;
      border: 1px solid #dee2e6;
      color: #112D4E;
      text-decoration: none;
      border-radius: 4px;
      transition: all 0.3s ease;
    }
    
    .page-link:hover {
      background: #e9ecef;
      text-decoration: none;
    }
    
    .page-link.active {
      background: #112D4E;
      color: white;
      border-color: #112D4E;
    }
    
    .page-link.disabled {
      color: #6c757d;
      pointer-events: none;
      background: #f8f9fa;
    }
    
    /* Empty state */
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #6c757d;
    }
    
    .empty-state i {
      font-size: 4rem;
      margin-bottom: 20px;
      color: #dee2e6;
    }
    
    .empty-state h3 {
      margin-bottom: 10px;
      color: #495057;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .filters-row {
        flex-direction: column;
        align-items: stretch;
      }
      
      .search-box {
        min-width: auto;
      }
      
      .table-responsive {
        overflow-x: auto;
      }
      
      .table th,
      .table td {
        padding: 10px 15px;
        font-size: 0.8rem;
      }
      
      .user-info {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }
      
      .pagination-section {
        flex-direction: column;
        gap: 15px;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link active">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-users"></i>
        User Management
      </h1>
      <div class="header-actions">
        <a href="{% url 'admin_create_user' %}" class="btn btn-primary">
          <i class="fas fa-user-plus"></i>
          Create User
        </a>
        <a href="{% url 'admin_dashboard' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- Search and Filters -->
      <div class="filters-section">
        <form method="get" class="filters-row">
          <div class="search-box">
            <i class="fas fa-search search-icon"></i>
            <input type="text" 
                   name="search" 
                   class="search-input" 
                   placeholder="Search users by username, email, or name..."
                   value="{{ search_query }}">
          </div>
          
          <select name="filter" class="filter-select" onchange="this.form.submit()">
            <option value="all" {% if filter_type == 'all' %}selected{% endif %}>All Users</option>
            <option value="active" {% if filter_type == 'active' %}selected{% endif %}>Active Users</option>
            <option value="inactive" {% if filter_type == 'inactive' %}selected{% endif %}>Inactive Users</option>
            <option value="staff" {% if filter_type == 'staff' %}selected{% endif %}>Staff Users</option>
          </select>
          
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-search"></i>
            Search
          </button>
        </form>
      </div>

      <!-- Stats Bar -->
      <div class="stats-bar">
        <div class="stats-text">
          <strong>{{ total_users }}</strong> total users found
          {% if search_query %}
            for "{{ search_query }}"
          {% endif %}
        </div>
        <div class="stats-text">
          <i class="fas fa-filter"></i>
          Filter: {{ filter_type|title }}
        </div>
      </div>

      <!-- Users Table -->
      <div class="users-table">
        {% if page_obj %}
          <div class="table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>User</th>
                  <th>Status</th>
                  <th>Join Date</th>
                  <th>Resumes</th>
                  <th>Downloads</th>
                  <th>Last Login</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for user in page_obj %}
                  <tr>
                    <td>
                      <div class="user-info">
                        <div class="user-avatar-small">
                          {{ user.username.0|upper }}
                        </div>
                        <div class="user-details">
                          <div class="user-name">{{ user.username }}</div>
                          <div class="user-email">{{ user.email }}</div>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div style="display: flex; flex-direction: column; gap: 4px;">
                        {% if user.is_active %}
                          <span class="status-badge status-active">Active</span>
                        {% else %}
                          <span class="status-badge status-inactive">Inactive</span>
                        {% endif %}
                        {% if user.is_staff %}
                          <span class="status-badge status-staff">Staff</span>
                        {% endif %}
                      </div>
                    </td>
                    <td>
                      <div style="font-size: 0.9rem;">
                        {{ user.date_joined|date:"M j, Y" }}
                      </div>
                    </td>
                    <td>
                      <div class="user-stats">
                        <div class="stat-number">{{ user.resume_count|default:0 }}</div>
                        <div class="stat-label">resumes</div>
                      </div>
                    </td>
                    <td>
                      <div class="user-stats">
                        <div class="stat-number">{{ user.download_count|default:0 }}</div>
                        <div class="stat-label">downloads</div>
                      </div>
                    </td>
                    <td>
                      <div style="font-size: 0.9rem;">
                        {% if user.last_login %}
                          {{ user.last_login|date:"M j, Y" }}
                        {% else %}
                          <span style="color: #6c757d;">Never</span>
                        {% endif %}
                      </div>
                    </td>
                    <td class="actions-cell">
                      <a href="{% url 'admin_user_detail' user.id %}" 
                         class="btn btn-sm btn-view">
                        <i class="fas fa-eye"></i>
                        View
                      </a>
                    </td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>

          <!-- Pagination -->
          {% if page_obj.has_other_pages %}
            <div class="pagination-section">
              <div class="pagination-info">
                Showing {{ page_obj.start_index }} to {{ page_obj.end_index }} 
                of {{ page_obj.paginator.count }} users
              </div>
              
              <ul class="pagination">
                {% if page_obj.has_previous %}
                  <li>
                    <a href="?{% if search_query %}search={{ search_query }}&{% endif %}{% if filter_type != 'all' %}filter={{ filter_type }}&{% endif %}page=1" 
                       class="page-link">
                      <i class="fas fa-angle-double-left"></i>
                    </a>
                  </li>
                  <li>
                    <a href="?{% if search_query %}search={{ search_query }}&{% endif %}{% if filter_type != 'all' %}filter={{ filter_type }}&{% endif %}page={{ page_obj.previous_page_number }}" 
                       class="page-link">
                      <i class="fas fa-angle-left"></i>
                    </a>
                  </li>
                {% endif %}

                {% for num in page_obj.paginator.page_range %}
                  {% if page_obj.number == num %}
                    <li>
                      <span class="page-link active">{{ num }}</span>
                    </li>
                  {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                    <li>
                      <a href="?{% if search_query %}search={{ search_query }}&{% endif %}{% if filter_type != 'all' %}filter={{ filter_type }}&{% endif %}page={{ num }}" 
                         class="page-link">{{ num }}</a>
                    </li>
                  {% endif %}
                {% endfor %}

                {% if page_obj.has_next %}
                  <li>
                    <a href="?{% if search_query %}search={{ search_query }}&{% endif %}{% if filter_type != 'all' %}filter={{ filter_type }}&{% endif %}page={{ page_obj.next_page_number }}" 
                       class="page-link">
                      <i class="fas fa-angle-right"></i>
                    </a>
                  </li>
                  <li>
                    <a href="?{% if search_query %}search={{ search_query }}&{% endif %}{% if filter_type != 'all' %}filter={{ filter_type }}&{% endif %}page={{ page_obj.paginator.num_pages }}" 
                       class="page-link">
                      <i class="fas fa-angle-double-right"></i>
                    </a>
                  </li>
                {% endif %}
              </ul>
            </div>
          {% endif %}

        {% else %}
          <div class="empty-state">
            <i class="fas fa-users"></i>
            <h3>No Users Found</h3>
            <p>
              {% if search_query %}
                No users match your search criteria.
              {% else %}
                There are no users in the system yet.
              {% endif %}
            </p>
            <a href="{% url 'admin_create_user' %}" class="btn btn-primary" style="margin-top: 20px;">
              <i class="fas fa-user-plus"></i>
              Create First User
            </a>
          </div>
        {% endif %}
      </div>
    </div>
  </main>

  <script>
    // Auto-submit search on Enter
    document.querySelector('.search-input').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        this.form.submit();
      }
    });

    // Clear search functionality
    if (document.querySelector('.search-input').value) {
      const clearBtn = document.createElement('button');
      clearBtn.innerHTML = '<i class="fas fa-times"></i>';
      clearBtn.className = 'btn btn-outline btn-sm';
      clearBtn.style.marginLeft = '10px';
      clearBtn.onclick = function() {
        document.querySelector('.search-input').value = '';
        this.form.submit();
      };
      document.querySelector('.filters-row').appendChild(clearBtn);
    }
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/create_user.html =====

<!-- resume/templates/admin/create_user.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Create User | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Sidebar styles */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17, 45, 78, 0.3);
      color: white;
      text-decoration: none;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
      text-decoration: none;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* Form styling */
    .form-section {
      background: white;
      padding: 40px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      max-width: 600px;
      margin: 0 auto;
    }
    
    .form-header {
      text-align: center;
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid #e9ecef;
    }
    
    .form-icon {
      width: 60px;
      height: 60px;
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      color: white;
      font-size: 1.5rem;
    }
    
    .form-title {
      font-size: 1.5rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 8px;
    }
    
    .form-subtitle {
      color: #6c757d;
      font-size: 1rem;
    }
    
    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 20px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group.full-width {
      grid-column: span 2;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
      color: #212529;
    }
    
    .required {
      color: #dc3545;
    }
    
    .form-control {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: #f8f9fa;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #112D4E;
      box-shadow: 0 0 0 3px rgba(17, 45, 78, 0.1);
      background: white;
    }
    
    .form-control.is-valid {
      border-color: #28a745;
      background: rgba(40, 167, 69, 0.1);
    }
    
    .form-control.is-invalid {
      border-color: #dc3545;
      background: rgba(220, 53, 69, 0.1);
    }
    
    .form-text {
      font-size: 0.8rem;
      color: #6c757d;
      margin-top: 5px;
    }
    
    .invalid-feedback {
      color: #dc3545;
      font-size: 0.8rem;
      margin-top: 5px;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    .valid-feedback {
      color: #28a745;
      font-size: 0.8rem;
      margin-top: 5px;
      display: flex;
      align-items: center;
      gap: 5px;
    }
    
    /* Checkbox styling */
    .form-check {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-top: 15px;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
      border: 1px solid #e9ecef;
    }
    
    .form-check-input {
      width: 18px;
      height: 18px;
      margin: 0;
    }
    
    .form-check-label {
      margin: 0;
      font-weight: 500;
      color: #495057;
    }
    
    /* Submit section */
    .submit-section {
      text-align: center;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #e9ecef;
    }
    
    .btn-create {
      background: linear-gradient(135deg, #28a745, #20c997);
      color: white;
      padding: 15px 40px;
      border: none;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-create:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(40, 167, 69, 0.3);
    }
    
    .btn-create:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    /* Messages */
    .alert {
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid transparent;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .alert-success {
      background: rgba(40, 167, 69, 0.1);
      border-color: #28a745;
      color: #155724;
    }
    
    .alert-danger {
      background: rgba(220, 53, 69, 0.1);
      border-color: #dc3545;
      color: #721c24;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .form-section {
        margin: 10px;
        padding: 30px 20px;
      }
      
      .form-row {
        grid-template-columns: 1fr;
      }
      
      .form-group.full-width {
        grid-column: span 1;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link active">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-user-plus"></i>
        Create New User
      </h1>
      <div class="header-actions">
        <a href="{% url 'admin_users' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Users
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- Messages -->
      {% if messages %}
        {% for message in messages %}
          <div class="alert alert-{{ message.tags }}">
            <i class="fas fa-{% if message.tags == 'success' %}check-circle{% elif message.tags == 'error' %}exclamation-triangle{% else %}info-circle{% endif %}"></i>
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}

      <!-- Create User Form -->
      <div class="form-section">
        <div class="form-header">
          <div class="form-icon">
            <i class="fas fa-user-plus"></i>
          </div>
          <h2 class="form-title">Create New User Account</h2>
          <p class="form-subtitle">Add a new user to the ATS Resume Optimizer system</p>
        </div>

        <form method="post" id="createUserForm">
          {% csrf_token %}
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Username <span class="required">*</span></label>
              {{ form.username }}
              <div class="form-text">Unique username for login (3+ characters)</div>
              {% if form.username.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.username.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label class="form-label">Email Address <span class="required">*</span></label>
              {{ form.email }}
              <div class="form-text">Valid email address for notifications</div>
              {% if form.email.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.email.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="form-label">Country Code <span class="required">*</span></label>
              {{ form.country_code }}
              <div class="form-text">Select the user's country dialing code</div>
              {% if form.country_code.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.country_code.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label class="form-label">Phone Number <span class="required">*</span></label>
              {{ form.phone_number }}
              <div class="form-text">Phone number without country code</div>
              {% if form.phone_number.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.phone_number.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="form-label">City <span class="required">*</span></label>
              {{ form.city }}
              <div class="form-text">User's city of residence</div>
              {% if form.city.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.city.errors.0 }}
                </div>
              {% endif %}
            </div>

            <div class="form-group">
              <label class="form-label">Country <span class="required">*</span></label>
              {{ form.country }}
              <div class="form-text">Select the user's country</div>
              {% if form.country.errors %}
                <div class="invalid-feedback">
                  <i class="fas fa-exclamation-circle"></i>
                  {{ form.country.errors.0 }}
                </div>
              {% endif %}
            </div>
          </div>

          <div class="form-group full-width">
            <label class="form-label">Password <span class="required">*</span></label>
            {{ form.password1 }}
            <div class="form-text">Strong password (minimum 8 characters)</div>
            {% if form.password1.errors %}
              <div class="invalid-feedback">
                <i class="fas fa-exclamation-circle"></i>
                {{ form.password1.errors.0 }}
              </div>
            {% endif %}
          </div>

          <div class="form-group full-width">
            <label class="form-label">Confirm Password <span class="required">*</span></label>
            {{ form.password2 }}
            <div class="form-text">Re-enter the password to confirm</div>
            {% if form.password2.errors %}
              <div class="invalid-feedback">
                <i class="fas fa-exclamation-circle"></i>
                {{ form.password2.errors.0 }}
              </div>
            {% endif %}
          </div>

          <!-- Admin Options -->
          <div class="form-group full-width">
            <div class="form-check">
              <input type="checkbox" name="is_staff" id="is_staff" class="form-check-input">
              <label class="form-check-label" for="is_staff">
                <strong>Grant Staff Access</strong> - Allow this user to access admin features
              </label>
            </div>
          </div>

          <!-- Submit Section -->
          <div class="submit-section">
            <button type="submit" class="btn-create">
              <i class="fas fa-user-plus"></i>
              Create User Account
            </button>
            
            <div style="margin-top: 15px;">
              <a href="{% url 'admin_users' %}" class="btn btn-outline">
                <i class="fas fa-times"></i>
                Cancel
              </a>
            </div>
          </div>
        </form>
      </div>
    </div>
  </main>

  <script>
    // Form validation and enhancement
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('createUserForm');
      const inputs = document.querySelectorAll('.form-control');
      
      // Real-time validation
      inputs.forEach(input => {
        input.addEventListener('blur', validateField);
        input.addEventListener('input', clearErrors);
      });
      
      // Form submission
      form.addEventListener('submit', function(e) {
        let isValid = true;
        
        inputs.forEach(input => {
          if (!validateField.call(input)) {
            isValid = false;
          }
        });
        
        if (isValid) {
          const submitBtn = document.querySelector('.btn-create');
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating User...';
        } else {
          e.preventDefault();
        }
      });
      
      function validateField() {
        const value = this.value.trim();
        const wrapper = this.closest('.form-group');
        let isValid = true;
        
        // Clear previous validation
        this.classList.remove('is-valid', 'is-invalid');
        const feedback = wrapper.querySelector('.invalid-feedback:not([data-server])');
        if (feedback) feedback.remove();
        
        // Validation rules
        if (this.hasAttribute('required') && !value) {
          showError(this, 'This field is required');
          isValid = false;
        } else if (this.type === 'email' && value && !isValidEmail(value)) {
          showError(this, 'Please enter a valid email address');
          isValid = false;
        } else if (this.name === 'username' && value && value.length < 3) {
          showError(this, 'Username must be at least 3 characters');
          isValid = false;
        } else if (this.name === 'password1' && value && value.length < 8) {
          showError(this, 'Password must be at least 8 characters');
          isValid = false;
        } else if (this.name === 'password2' && value) {
          const password1 = document.querySelector('[name="password1"]').value;
          if (value !== password1) {
            showError(this, 'Passwords do not match');
            isValid = false;
          }
        }
        
        if (isValid && value) {
          this.classList.add('is-valid');
        }
        
        return isValid;
      }
      
      function clearErrors() {
        this.classList.remove('is-invalid');
        const wrapper = this.closest('.form-group');
        const feedback = wrapper.querySelector('.invalid-feedback:not([data-server])');
        if (feedback) feedback.remove();
      }
      
      function showError(input, message) {
        input.classList.add('is-invalid');
        const wrapper = input.closest('.form-group');
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'invalid-feedback';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${message}`;
        wrapper.appendChild(errorDiv);
      }
      
      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/analytics.html =====

<!-- resume/templates/admin/analytics.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Analytics | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Sidebar styles - same as other admin pages */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
      text-decoration: none;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* Time filter */
    .filter-section {
      background: white;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .filter-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #212529;
    }
    
    .filter-controls {
      display: flex;
      gap: 10px;
    }
    
    .filter-btn {
      padding: 8px 16px;
      border: 1px solid #dee2e6;
      background: white;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      color: #495057;
    }
    
    .filter-btn.active,
    .filter-btn:hover {
      background: #112D4E;
      color: white;
      border-color: #112D4E;
      text-decoration: none;
    }
    
    /* Charts grid */
    .charts-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 25px;
      margin-bottom: 30px;
    }
    
    .chart-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
    }
    
    .chart-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #212529;
    }
    
    .chart-container {
      position: relative;
      height: 300px;
    }
    
    /* Stats cards */
    .stats-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
      border-left: 4px solid;
    }
    
    .stat-card.users { border-left-color: #28a745; }
    .stat-card.resumes { border-left-color: #007bff; }
    .stat-card.downloads { border-left-color: #dc3545; }
    .stat-card.conversion { border-left-color: #ffc107; }
    
    .stat-number {
      font-size: 2rem;
      font-weight: 700;
      color: #212529;
      margin-bottom: 5px;
    }
    
    .stat-label {
      color: #6c757d;
      font-size: 0.9rem;
      font-weight: 500;
    }
    
    .stat-change {
      font-size: 0.8rem;
      margin-top: 8px;
      padding: 2px 8px;
      border-radius: 4px;
    }
    
    .stat-change.positive {
      color: #28a745;
      background: rgba(40, 167, 69, 0.1);
    }
    
    .stat-change.negative {
      color: #dc3545;
      background: rgba(220, 53, 69, 0.1);
    }
    
    /* Top users */
    .top-users {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .section-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .user-list {
      list-style: none;
    }
    
    .user-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 0;
      border-bottom: 1px solid #f1f3f4;
    }
    
    .user-item:last-child {
      border-bottom: none;
    }
    
    .user-info {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .user-avatar-small {
      width: 35px;
      height: 35px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      font-size: 0.8rem;
    }
    
    .user-details {
      flex: 1;
    }
    
    .user-name {
      font-weight: 600;
      color: #212529;
      margin-bottom: 2px;
    }
    
    .user-stats {
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    /* Geographic data */
    .geo-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 25px;
      margin-bottom: 30px;
    }
    
    .geo-card {
      background: white;
      padding: 25px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .geo-list {
      list-style: none;
    }
    
    .geo-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #f1f3f4;
    }
    
    .geo-item:last-child {
      border-bottom: none;
    }
    
    .geo-name {
      font-weight: 500;
      color: #212529;
    }
    
    .geo-count {
      font-weight: 600;
      color: #112D4E;
      background: #f8f9fa;
      padding: 4px 8px;
      border-radius: 4px;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .charts-grid {
        grid-template-columns: 1fr;
      }
      
      .geo-section {
        grid-template-columns: 1fr;
      }
      
      .filter-section {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
      }
      
      .filter-controls {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link active">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-chart-bar"></i>
        Analytics & Reports
      </h1>
      <div class="header-actions">
        <a href="{% url 'admin_dashboard' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- Time Filter -->
      <div class="filter-section">
        <div class="filter-title">
          <i class="fas fa-calendar-alt"></i>
          Time Period Analysis
        </div>
        <div class="filter-controls">
          <a href="?days=7" class="filter-btn {% if days == 7 %}active{% endif %}">Last 7 Days</a>
          <a href="?days=30" class="filter-btn {% if days == 30 %}active{% endif %}">Last 30 Days</a>
          <a href="?days=90" class="filter-btn {% if days == 90 %}active{% endif %}">Last 90 Days</a>
        </div>
      </div>

      <!-- Key Metrics -->
      <div class="stats-row">
        <div class="stat-card users">
          <div class="stat-number">{{ total_users|default:0 }}</div>
          <div class="stat-label">Total Users</div>
          <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i> +{{ new_users|default:0 }} new
          </div>
        </div>
        
        <div class="stat-card resumes">
          <div class="stat-number">{{ total_resumes|default:0 }}</div>
          <div class="stat-label">Resumes Created</div>
          <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i> +{{ new_resumes|default:0 }} this period
          </div>
        </div>
        
        <div class="stat-card downloads">
          <div class="stat-number">{{ total_downloads|default:0 }}</div>
          <div class="stat-label">Downloads</div>
          <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i> +{{ new_downloads|default:0 }} this period
          </div>
        </div>
        
        <div class="stat-card conversion">
          <div class="stat-number">{% widthratio total_downloads total_resumes 100|default:0 %}%</div>
          <div class="stat-label">Conversion Rate</div>
          <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i> Resume to Download
          </div>
        </div>
      </div>

      <!-- Charts Section -->
      <div class="charts-grid">
        <div class="chart-card">
          <div class="chart-header">
            <h3 class="chart-title">User Registration Trends</h3>
          </div>
          <div class="chart-container">
            <canvas id="registrationChart"></canvas>
          </div>
        </div>

        <div class="top-users">
          <h3 class="section-title">
            <i class="fas fa-star"></i>
            Top Active Users
          </h3>
          <ul class="user-list">
            {% for user in top_users|slice:":8" %}
              <li class="user-item">
                <div class="user-info">
                  <div class="user-avatar-small">
                    {{ user.username.0|upper }}
                  </div>
                  <div class="user-details">
                    <div class="user-name">{{ user.username }}</div>
                    <div class="user-stats">{{ user.total_resumes }} resumes</div>
                  </div>
                </div>
                <div style="font-weight: 600; color: #112D4E;">
                  {{ user.total_downloads }} downloads
                </div>
              </li>
            {% empty %}
              <li class="user-item">
                <div class="user-info">
                  <div class="user-details">
                    <div class="user-name">No users yet</div>
                    <div class="user-stats">System ready for users</div>
                  </div>
                </div>
              </li>
            {% endfor %}
          </ul>
        </div>
      </div>

      <!-- Geographic Distribution -->
      <div class="geo-section">
        <div class="geo-card">
          <h3 class="section-title">
            <i class="fas fa-globe"></i>
            Geographic Distribution
          </h3>
          <ul class="geo-list">
            {% for country in country_stats %}
              <li class="geo-item">
                <span class="geo-name">{{ country.country|default:"Unknown" }}</span>
                <span class="geo-count">{{ country.count }}</span>
              </li>
            {% empty %}
              <li class="geo-item">
                <span class="geo-name">No geographic data available</span>
                <span class="geo-count">0</span>
              </li>
            {% endfor %}
          </ul>
        </div>

        <div class="chart-card">
          <div class="chart-header">
            <h3 class="chart-title">Activity Distribution</h3>
          </div>
          <div class="chart-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Ensure DOM is loaded before running chart code
    document.addEventListener('DOMContentLoaded', function() {
      try {
        // Parse registration data safely
        var registrationDataRaw = '{{ registration_data|safe }}';
        var registrationData = [];
        
        try {
          registrationData = JSON.parse(registrationDataRaw);
        } catch (e) {
          console.warn('Failed to parse registration data, using fallback');
          registrationData = [
            {date: new Date().toISOString().split('T')[0], count: 0}
          ];
        }
        
        // Ensure we have valid data
        if (!Array.isArray(registrationData) || registrationData.length === 0) {
          registrationData = [
            {date: new Date().toISOString().split('T')[0], count: 0}
          ];
        }

        // Registration trends chart
        var regCtx = document.getElementById('registrationChart');
        if (regCtx) {
          regCtx = regCtx.getContext('2d');
          
          new Chart(regCtx, {
            type: 'line',
            data: {
              labels: registrationData.map(function(d) {
                return new Date(d.date).toLocaleDateString();
              }),
              datasets: [{
                label: 'New Users',
                data: registrationData.map(function(d) {
                  return d.count;
                }),
                borderColor: '#112D4E',
                backgroundColor: 'rgba(17, 45, 78, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: false
                }
              },
              scales: {
                y: {
                  beginAtZero: true,
                  grid: {
                    color: 'rgba(0,0,0,0.1)'
                  }
                },
                x: {
                  grid: {
                    display: false
                  }
                }
              }
            }
          });
        }

        // Activity distribution chart
        var actCtx = document.getElementById('activityChart');
        if (actCtx) {
          actCtx = actCtx.getContext('2d');
          
          // Get data values safely
          var totalResumes = parseInt('{{ total_resumes|default:1 }}') || 1;
          var totalDownloads = parseInt('{{ total_downloads|default:1 }}') || 1;
          var totalUsers = parseInt('{{ total_users|default:1 }}') || 1;
          
          new Chart(actCtx, {
            type: 'doughnut',
            data: {
              labels: ['Resumes', 'Downloads', 'Active Users'],
              datasets: [{
                data: [totalResumes, totalDownloads, totalUsers],
                backgroundColor: [
                  '#112D4E',
                  '#3F72AF',
                  '#DBE2EF'
                ],
                borderWidth: 0
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom'
                }
              }
            }
          });
        }
        
      } catch (error) {
        console.error('Chart initialization error:', error);
      }
    });
  </script>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/admin/settings.html =====

<!-- resume/templates/admin/settings.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>System Settings | Admin Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js" defer></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: #212529;
    }
    
    /* Sidebar styles */
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      height: 100vh;
      width: 250px;
      background: linear-gradient(180deg, #112D4E 0%, #3F72AF 100%);
      color: white;
      z-index: 1000;
      overflow-y: auto;
    }
    
    .sidebar-header {
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }
    
    .user-avatar {
      width: 40px;
      height: 40px;
      background: linear-gradient(135deg, #3F72AF, #112D4E);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      margin: 0 auto 10px;
    }
    
    .sidebar-header h3 {
      margin: 10px 0 5px;
      font-size: 1.2rem;
    }
    
    .sidebar-header p {
      font-size: 0.8rem;
      opacity: 0.8;
    }
    
    .sidebar-nav {
      padding: 20px 0;
    }
    
    .nav-item {
      margin: 5px 15px;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      color: rgba(255,255,255,0.8);
      text-decoration: none;
      border-radius: 8px;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .nav-link:hover,
    .nav-link.active {
      background: rgba(255,255,255,0.1);
      color: white;
      transform: translateX(5px);
    }
    
    .nav-link i {
      width: 20px;
      margin-right: 15px;
      text-align: center;
    }
    
    /* Main content */
    .main-content {
      margin-left: 250px;
      min-height: 100vh;
    }
    
    .header {
      background: white;
      padding: 15px 25px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e9ecef;
    }
    
    .header-title {
      font-size: 1.5rem;
      color: #112D4E;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .header-actions {
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    .btn {
      padding: 8px 16px;
      border-radius: 6px;
      border: none;
      font-weight: 500;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #112D4E, #3F72AF);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(17, 45, 78, 0.3);
      color: white;
      text-decoration: none;
    }
    
    .btn-outline {
      background: white;
      color: #112D4E;
      border: 1px solid #112D4E;
    }
    
    .btn-outline:hover {
      background: #112D4E;
      color: white;
    }
    
    /* Content area */
    .content {
      padding: 25px;
    }
    
    /* Settings sections */
    .settings-section {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 25px;
    }
    
    .section-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: #212529;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
      padding-bottom: 15px;
      border-bottom: 1px solid #e9ecef;
    }
    
    .settings-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 25px;
    }
    
    .setting-group {
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 20px;
    }
    
    .setting-group h4 {
      color: #112D4E;
      margin-bottom: 15px;
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-label {
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
      color: #212529;
    }
    
    .form-control {
      width: 100%;
      padding: 12px 15px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #112D4E;
      box-shadow: 0 0 0 3px rgba(17, 45, 78, 0.1);
    }
    
    .form-text {
      font-size: 0.8rem;
      color: #6c757d;
      margin-top: 5px;
    }
    
    .current-value {
      background: #f8f9fa;
      padding: 8px 12px;
      border-radius: 6px;
      font-weight: 600;
      color: #112D4E;
      display: inline-block;
      margin-bottom: 10px;
    }
    
    /* Alert messages */
    .alert {
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid transparent;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .alert-success {
      background: rgba(40, 167, 69, 0.1);
      border-color: #28a745;
      color: #155724;
    }
    
    .alert-danger {
      background: rgba(220, 53, 69, 0.1);
      border-color: #dc3545;
      color: #721c24;
    }
    
    .alert-warning {
      background: rgba(255, 193, 7, 0.1);
      border-color: #ffc107;
      color: #856404;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .main-content {
        margin-left: 0;
      }
      
      .sidebar {
        transform: translateX(-100%);
      }
      
      .settings-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <nav class="sidebar">
    <div class="sidebar-header">
      <div class="user-avatar">{{ request.user.username.0|upper }}</div>
      <h3>Admin Panel</h3>
      <p>{{ request.user.username }}</p>
    </div>
    
    <div class="sidebar-nav">
      <div class="nav-item">
        <a href="{% url 'admin_dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i>
          <span>Dashboard</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_users' %}" class="nav-link">
          <i class="fas fa-users"></i>
          <span>Users</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_settings' %}" class="nav-link active">
          <i class="fas fa-cogs"></i>
          <span>Settings</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_analytics' %}" class="nav-link">
          <i class="fas fa-chart-bar"></i>
          <span>Analytics</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_system_logs' %}" class="nav-link">
          <i class="fas fa-list-alt"></i>
          <span>System Logs</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'admin_create_user' %}" class="nav-link">
          <i class="fas fa-user-plus"></i>
          <span>Create User</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-home"></i>
          <span>Main App</span>
        </a>
      </div>
      <div class="nav-item">
        <a href="{% url 'logout' %}" class="nav-link">
          <i class="fas fa-sign-out-alt"></i>
          <span>Logout</span>
        </a>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="main-content">
    <!-- Header -->
    <header class="header">
      <h1 class="header-title">
        <i class="fas fa-cogs"></i>
        System Settings
      </h1>
      <div class="header-actions">
        <a href="{% url 'admin_dashboard' %}" class="btn btn-outline">
          <i class="fas fa-arrow-left"></i>
          Back to Dashboard
        </a>
      </div>
    </header>

    <!-- Content -->
    <div class="content">
      <!-- Messages -->
      {% if messages %}
        {% for message in messages %}
          <div class="alert alert-{{ message.tags }}">
            <i class="fas fa-{% if message.tags == 'success' %}check-circle{% elif message.tags == 'error' %}exclamation-triangle{% else %}info-circle{% endif %}"></i>
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}

      <!-- Resume & LLM Settings -->
      <div class="settings-section">
        <h3 class="section-title">
          <i class="fas fa-brain"></i>
          AI Resume Generation Settings
        </h3>
        
        <form method="post">
          {% csrf_token %}
          <div class="settings-grid">
            <div class="setting-group">
              <h4><i class="fas fa-target"></i> Target Scores</h4>
              
              <div class="form-group">
                <label class="form-label">Target ATS Score (%)</label>
                <div class="current-value">Current: {{ settings.TARGET_ATS_SCORE }}%</div>
                <input type="number" 
                       name="target_ats_score" 
                       class="form-control" 
                       value="{{ settings.TARGET_ATS_SCORE }}" 
                       min="70" max="100" required>
                <div class="form-text">Minimum ATS compatibility score the system should achieve</div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Target Job Score (%)</label>
                <div class="current-value">Current: {{ settings.TARGET_JOB_SCORE }}%</div>
                <input type="number" 
                       name="target_job_score" 
                       class="form-control" 
                       value="{{ settings.TARGET_JOB_SCORE }}" 
                       min="70" max="100" required>
                <div class="form-text">Minimum job match score the system should achieve</div>
              </div>
            </div>

            <div class="setting-group">
              <h4><i class="fas fa-download"></i> Download Limits</h4>
              
              <div class="form-group">
                <label class="form-label">Downloads per 15 Days</label>
                <div class="current-value">Current: {{ settings.DOWNLOADS_PER_15_DAYS }}</div>
                <input type="number" 
                       name="downloads_15_days" 
                       class="form-control" 
                       value="{{ settings.DOWNLOADS_PER_15_DAYS }}" 
                       min="1" max="50" required>
                <div class="form-text">Maximum downloads allowed per user in 15 days</div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Downloads per Month</label>
                <div class="current-value">Current: {{ settings.DOWNLOADS_PER_MONTH }}</div>
                <input type="number" 
                       name="downloads_month" 
                       class="form-control" 
                       value="{{ settings.DOWNLOADS_PER_MONTH }}" 
                       min="1" max="100" required>
                <div class="form-text">Maximum downloads allowed per user per month</div>
              </div>
            </div>

            <div class="setting-group">
              <h4><i class="fas fa-file-upload"></i> File Upload Settings</h4>
              
              <div class="form-group">
                <label class="form-label">Max File Size (MB)</label>
                <div class="current-value">Current: {{ settings.MAX_FILE_SIZE_MB }}MB</div>
                <input type="number" 
                       name="max_file_size" 
                       class="form-control" 
                       value="{{ settings.MAX_FILE_SIZE_MB }}" 
                       min="1" max="50" required>
                <div class="form-text">Maximum file size for resume uploads</div>
              </div>
            </div>

            <div class="setting-group">
              <h4><i class="fas fa-robot"></i> LLM Configuration</h4>
              
              <div class="form-group">
                <label class="form-label">Max Tokens</label>
                <div class="current-value">Current: {{ settings.LLM_MAX_TOKENS }}</div>
                <input type="number" 
                       name="llm_max_tokens" 
                       class="form-control" 
                       value="{{ settings.LLM_MAX_TOKENS }}" 
                       min="1000" max="8000" required>
                <div class="form-text">Maximum tokens for LLM responses</div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Temperature</label>
                <div class="current-value">Current: {{ settings.LLM_TEMPERATURE }}</div>
                <input type="number" 
                       name="llm_temperature" 
                       class="form-control" 
                       value="{{ settings.LLM_TEMPERATURE }}" 
                       min="0" max="1" step="0.1" required>
                <div class="form-text">LLM temperature for response creativity (0.0-1.0)</div>
              </div>
              
              <div class="form-group">
                <label class="form-label">Max Iterations</label>
                <div class="current-value">Current: {{ settings.LLM_MAX_ITERATIONS }}</div>
                <input type="number" 
                       name="llm_max_iterations" 
                       class="form-control" 
                       value="{{ settings.LLM_MAX_ITERATIONS }}" 
                       min="1" max="10" required>
                <div class="form-text">Maximum optimization iterations per resume</div>
              </div>
            </div>
          </div>
          
          <div style="text-align: center; margin-top: 30px;">
            <button type="submit" class="btn btn-primary">
              <i class="fas fa-save"></i>
              Save All Settings
            </button>
          </div>
        </form>
      </div>

      <!-- System Information -->
      <div class="settings-section">
        <h3 class="section-title">
          <i class="fas fa-info-circle"></i>
          System Information
        </h3>
        
        <div class="settings-grid">
          <div class="setting-group">
            <h4><i class="fas fa-server"></i> Application Info</h4>
            <p><strong>Environment:</strong> {% if debug %}Development{% else %}Production{% endif %}</p>
            <p><strong>Debug Mode:</strong> {{ debug|yesno:"Enabled,Disabled" }}</p>
            <p><strong>Database:</strong> SQLite</p>
            <p><strong>Cache Backend:</strong> Default</p>
          </div>
          
          <div class="setting-group">
            <h4><i class="fas fa-key"></i> API Status</h4>
            <p><strong>OpenAI API:</strong> {% if openai_configured %}✅ Configured{% else %}❌ Not Configured{% endif %}</p>
            <p><strong>DeepSeek API:</strong> {% if deepseek_configured %}✅ Configured{% else %}❌ Not Configured{% endif %}</p>
            <p><strong>Email Service:</strong> {% if email_configured %}✅ Configured{% else %}❌ Not Configured{% endif %}</p>
          </div>
        </div>
      </div>

      <!-- Warning Notice -->
      <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle"></i>
        <div>
          <strong>Important:</strong> Changes to system settings will take effect immediately. 
          Some settings may require application restart for full implementation.
        </div>
      </div>
    </div>
  </main>
</body>
</html>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/resume/templates/components/navigation.html =====

<!-- templates/components/navigation.html -->
<nav class="main-navigation">
  <div class="nav-container">
    <!-- Logo/Brand -->
    <div class="nav-brand">
      <a href="{% url 'landing' %}" class="brand-link">
        <i class="fas fa-rocket"></i>
        <span>ATS Resume Optimizer</span>
      </a>
    </div>

    <!-- Main Navigation Links -->
    <div class="nav-links">
      <a href="{% url 'landing' %}" class="nav-link">
        <i class="fas fa-home"></i> Home
      </a>
      
      {% if user.is_authenticated %}
        <a href="{% url 'dashboard' %}" class="nav-link">
          <i class="fas fa-tachometer-alt"></i> Dashboard
        </a>
      {% endif %}
      
      <!-- Task 13: ATS Details Page -->
      <a href="{% url 'ats_details' %}" class="nav-link nav-highlight">
        <i class="fas fa-robot"></i> About ATS
      </a>
      
      <!-- Task 13: Our Services Page -->
      <a href="{% url 'our_services' %}" class="nav-link nav-highlight">
        <i class="fas fa-star"></i> Our Services
      </a>
      
      {% if user.is_authenticated %}
        {% if user.is_staff or user.is_superuser %}
          <a href="{% url 'admin_dashboard' %}" class="nav-link admin-link">
            <i class="fas fa-cog"></i> Admin Panel
          </a>
        {% endif %}
      {% endif %}
    </div>

    <!-- User Authentication Area -->
    <div class="nav-auth">
      {% if user.is_authenticated %}
        <div class="user-menu">
          <span class="user-greeting">
            <i class="fas fa-user-circle"></i>
            Hi, {{ user.username }}
          </span>
          <div class="user-dropdown">
            {% if not user.is_staff %}
              <a href="{% url 'dashboard' %}" class="dropdown-item">
                <i class="fas fa-file-alt"></i> My Resumes
              </a>
            {% endif %}
            <a href="{% url 'logout' %}" class="dropdown-item logout">
              <i class="fas fa-sign-out-alt"></i> Logout
            </a>
          </div>
        </div>
      {% else %}
        <div class="auth-buttons">
          <a href="{% url 'login' %}" class="nav-btn btn-login">
            <i class="fas fa-sign-in-alt"></i> Login
          </a>
          <a href="{% url 'signup' %}" class="nav-btn btn-signup">
            <i class="fas fa-user-plus"></i> Sign Up
          </a>
        </div>
      {% endif %}
    </div>

    <!-- Mobile Menu Toggle -->
    <div class="mobile-menu-toggle" onclick="toggleMobileMenu()">
      <span></span>
      <span></span>
      <span></span>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div class="mobile-menu" id="mobileMenu">
    <a href="{% url 'landing' %}" class="mobile-nav-link">
      <i class="fas fa-home"></i> Home
    </a>
    
    {% if user.is_authenticated %}
      <a href="{% url 'dashboard' %}" class="mobile-nav-link">
        <i class="fas fa-tachometer-alt"></i> Dashboard
      </a>
    {% endif %}
    
    <a href="{% url 'ats_details' %}" class="mobile-nav-link">
      <i class="fas fa-robot"></i> About ATS
    </a>
    
    <a href="{% url 'our_services' %}" class="mobile-nav-link">
      <i class="fas fa-star"></i> Our Services
    </a>
    
    {% if user.is_authenticated %}
      {% if user.is_staff or user.is_superuser %}
        <a href="{% url 'admin_dashboard' %}" class="mobile-nav-link">
          <i class="fas fa-cog"></i> Admin Panel
        </a>
      {% endif %}
      <a href="{% url 'logout' %}" class="mobile-nav-link">
        <i class="fas fa-sign-out-alt"></i> Logout
      </a>
    {% else %}
      <a href="{% url 'login' %}" class="mobile-nav-link">
        <i class="fas fa-sign-in-alt"></i> Login
      </a>
      <a href="{% url 'signup' %}" class="mobile-nav-link">
        <i class="fas fa-user-plus"></i> Sign Up
      </a>
    {% endif %}
  </div>
</nav>

<style>
/* Navigation Styles */
.main-navigation {
  background: linear-gradient(135deg, #F9F7F7, #DBE2EF);
  box-shadow: 0 2px 10px rgba(17, 45, 78, 0.1);
  border-bottom: 1px solid #DBE2EF;
  position: sticky;
  top: 0;
  z-index: 999;
  backdrop-filter: blur(10px);
}

.nav-container {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px 20px;
}

/* Brand */
.nav-brand .brand-link {
  display: flex;
  align-items: center;
  gap: 10px;
  text-decoration: none;
  color: #112D4E;
  font-weight: 700;
  font-size: 1.3rem;
  transition: all 0.3s ease;
}

.nav-brand .brand-link:hover {
  color: #3F72AF;
  transform: translateY(-1px);
}

.nav-brand i {
  font-size: 1.5rem;
  color: #3F72AF;
}

/* Navigation Links */
.nav-links {
  display: flex;
  align-items: center;
  gap: 25px;
}

.nav-link {
  display: flex;
  align-items: center;
  gap: 8px;
  text-decoration: none;
  color: #112D4E;
  font-weight: 500;
  padding: 8px 15px;
  border-radius: 10px;
  transition: all 0.3s ease;
  position: relative;
}

.nav-link:hover {
  color: #3F72AF;
  background: rgba(63, 114, 175, 0.1);
  transform: translateY(-1px);
}

/* Task 13: Highlight important navigation items */
.nav-highlight {
  background: linear-gradient(135deg, #3F72AF, #112D4E);
  color: #F9F7F7 !important;
  font-weight: 600;
  box-shadow: 0 4px 12px rgba(63, 114, 175, 0.3);
}

.nav-highlight:hover {
  background: linear-gradient(135deg, #112D4E, #3F72AF);
  color: #F9F7F7 !important;
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(63, 114, 175, 0.4);
}

.admin-link {
  background: linear-gradient(135deg, #28a745, #20c997);
  color: white !important;
}

.admin-link:hover {
  background: linear-gradient(135deg, #20c997, #28a745);
  color: white !important;
}

/* User Authentication Area */
.nav-auth {
  display: flex;
  align-items: center;
  gap: 15px;
}

.user-menu {
  position: relative;
}

.user-greeting {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #112D4E;
  font-weight: 600;
  padding: 8px 15px;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.user-greeting:hover {
  background: rgba(63, 114, 175, 0.1);
  color: #3F72AF;
}

.user-greeting i {
  font-size: 1.2rem;
  color: #3F72AF;
}

.user-dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  background: #F9F7F7;
  border: 1px solid #DBE2EF;
  border-radius: 10px;
  box-shadow: 0 8px 25px rgba(17, 45, 78, 0.15);
  opacity: 0;
  visibility: hidden;
  transform: translateY(-10px);
  transition: all 0.3s ease;
  min-width: 180px;
  margin-top: 10px;
}

.user-menu:hover .user-dropdown {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.dropdown-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 15px;
  text-decoration: none;
  color: #112D4E;
  transition: all 0.3s ease;
  border-radius: 8px;
  margin: 5px;
}

.dropdown-item:hover {
  background: #3F72AF;
  color: #F9F7F7;
}

.dropdown-item.logout {
  color: #dc3545;
}

.dropdown-item.logout:hover {
  background: #dc3545;
  color: white;
}

/* Auth Buttons */
.auth-buttons {
  display: flex;
  align-items: center;
  gap: 10px;
}

.nav-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  text-decoration: none;
  padding: 10px 20px;
  border-radius: 10px;
  font-weight: 600;
  transition: all 0.3s ease;
  font-size: 0.95rem;
}

.btn-login {
  color: #3F72AF;
  border: 2px solid #3F72AF;
  background: transparent;
}

.btn-login:hover {
  background: #3F72AF;
  color: #F9F7F7;
  transform: translateY(-1px);
}

.btn-signup {
  background: linear-gradient(135deg, #3F72AF, #112D4E);
  color: #F9F7F7;
  border: 2px solid transparent;
}

.btn-signup:hover {
  background: linear-gradient(135deg, #112D4E, #3F72AF);
  color: #F9F7F7;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(63, 114, 175, 0.3);
}

/* Mobile Menu */
.mobile-menu-toggle {
  display: none;
  flex-direction: column;
  cursor: pointer;
  padding: 5px;
}

.mobile-menu-toggle span {
  width: 25px;
  height: 3px;
  background: #112D4E;
  margin: 3px 0;
  transition: 0.3s;
  border-radius: 2px;
}

.mobile-menu {
  display: none;
  flex-direction: column;
  background: #F9F7F7;
  border-top: 1px solid #DBE2EF;
  padding: 20px;
  gap: 15px;
}

.mobile-nav-link {
  display: flex;
  align-items: center;
  gap: 10px;
  text-decoration: none;
  color: #112D4E;
  font-weight: 500;
  padding: 12px 15px;
  border-radius: 10px;
  transition: all 0.3s ease;
}

.mobile-nav-link:hover {
  background: #3F72AF;
  color: #F9F7F7;
}

/* Responsive Design */
@media (max-width: 768px) {
  .nav-links,
  .nav-auth {
    display: none;
  }

  .mobile-menu-toggle {
    display: flex;
  }

  .mobile-menu.active {
    display: flex;
  }

  .nav-container {
    padding: 10px 15px;
  }

  .brand-link span {
    display: none;
  }

  .nav-brand i {
    font-size: 1.8rem;
  }
}

@media (max-width: 480px) {
  .nav-container {
    padding: 8px 10px;
  }
}

/* Animation for mobile menu toggle */
.mobile-menu-toggle.active span:nth-child(1) {
  transform: rotate(-45deg) translate(-5px, 6px);
}

.mobile-menu-toggle.active span:nth-child(2) {
  opacity: 0;
}

.mobile-menu-toggle.active span:nth-child(3) {
  transform: rotate(45deg) translate(-5px, -6px);
}
</style>

<script>
function toggleMobileMenu() {
  const mobileMenu = document.getElementById('mobileMenu');
  const toggle = document.querySelector('.mobile-menu-toggle');
  
  mobileMenu.classList.toggle('active');
  toggle.classList.toggle('active');
}

// Close mobile menu when clicking outside
document.addEventListener('click', function(event) {
  const mobileMenu = document.getElementById('mobileMenu');
  const toggle = document.querySelector('.mobile-menu-toggle');
  const navContainer = document.querySelector('.nav-container');
  
  if (!navContainer.contains(event.target)) {
    mobileMenu.classList.remove('active');
    toggle.classList.remove('active');
  }
});

// Close mobile menu when window is resized to desktop
window.addEventListener('resize', function() {
  if (window.innerWidth > 768) {
    const mobileMenu = document.getElementById('mobileMenu');
    const toggle = document.querySelector('.mobile-menu-toggle');
    
    mobileMenu.classList.remove('active');
    toggle.classList.remove('active');
  }
});
</script>

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/staticfiles/.gitkeep =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/logs/.gitkeep =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/logs/django.log =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/.gitkeep =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/css/main.css =====

/* static/css/main.css */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #DBE2EF, #F9F7F7);
  color: #112D4E;
  min-height: 100vh;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.card {
  background: #F9F7F7;
  padding: 40px;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(17,45,78,0.1);
  width: 100%;
  max-width: 400px;
  margin: 20px auto;
  border: 1px solid #DBE2EF;
}

h1 {
  text-align: center;
  margin-bottom: 20px;
  color: #112D4E;
}

form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

label {
  font-weight: 600;
  color: #112D4E;
}

input {
  padding: 12px;
  border: 2px solid #DBE2EF;
  border-radius: 8px;
  transition: 0.3s;
  background: #F9F7F7;
  color: #112D4E;
}

input:focus {
  border-color: #3F72AF;
  outline: none;
  box-shadow: 0 0 0 3px rgba(63,114,175,0.2);
  background: #FFFFFF;
}

.btn {
  background: linear-gradient(135deg, #3F72AF, #112D4E);
  color: #F9F7F7;
  padding: 12px;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: 0.3s;
  text-align: center;
  text-decoration: none;
}

.btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(63,114,175,0.3);
}

.alt {
  margin-top: 20px;
  text-align: center;
}

.alt a {
  color: #3F72AF;
  text-decoration: none;
  font-weight: 600;
}

.alt a:hover {
  color: #112D4E;
}

@media (max-width: 600px) {
  .container { 
    padding: 15px; 
  }
  h1 { 
    font-size: 2rem; 
  }
}

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Cambridge.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Cambridge.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Harvard.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Harvard.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/.DS_Store =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/.DS_Store


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Berkeley.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Berkeley.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Wharton.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Wharton.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Stanford.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/Stanford.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/MIT.png =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/static/resume/logos/MIT.png


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/asgi.py =====

"""
ASGI config for ats_resume_app project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ats_resume_app.settings")

application = get_asgi_application()


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__init__.py =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/settings.py =====

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ====== SECURITY CONFIGURATION ======
SECRET_KEY = config('SECRET_KEY', default="django-insecure-km%bn!syf*%57e!qzy-h%6bdz^tdutr31w&-l=6ezjl#d6_ib)")
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0').split(',')

# ====== APPLICATION DEFINITION ======
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    "django_countries",
    "phonenumber_field",
    'resume',  # Your app
]

# ====== MIDDLEWARE CONFIGURATION - Updated for Task 14 ======
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'resume.middleware.SPAAuthenticationMiddleware',  # Task 14: Login protection
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ats_resume_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Global templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ats_resume_app.wsgi.application'

# ====== DATABASE CONFIGURATION ======
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ====== PASSWORD VALIDATION ======
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ====== INTERNATIONALIZATION ======
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ====== STATIC FILES CONFIGURATION ======
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# ====== MEDIA FILES CONFIGURATION ======
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ====== DEFAULT FIELD TYPE ======
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ====== API CONFIGURATION ======
OPENAI_API_KEY = config('OPENAI_API_KEY', default='')
DEEPSEEK_API_KEY = config("DEEPSEEK_API_KEY", default="")

# ====== FILE UPLOAD SETTINGS ======
FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_FILE_SIZE_MB', default=10, cast=int) * 1024 * 1024
DATA_UPLOAD_MAX_MEMORY_SIZE = config('MAX_FILE_SIZE_MB', default=10, cast=int) * 1024 * 1024

# ====== SESSION CONFIGURATION ======
SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = config('SESSION_EXPIRE_AT_BROWSER_CLOSE', default=True, cast=bool)

# ====== CORS SETTINGS ======
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# ====== EMAIL CONFIGURATION - Task 10 & 11 ======
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@atsresume.com')

# Development email backend (console output)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ====== AUTHENTICATION CONFIGURATION - Task 11 ======
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'landing'

# Custom authentication settings
AUTH_USER_MODEL = 'auth.User'  # Using default User model

# ====== ADMIN CONFIGURATION - Task 10 ======
ADMIN_CONFIG = {
    'EMAIL': config('ADMIN_EMAIL', default='admin@atsresume.com'),
    'USERNAME': config('ADMIN_USERNAME', default='admin'),
    'PASSWORD': config('ADMIN_PASSWORD', default='admin123'),
}

# ====== LOGGING CONFIGURATION ======
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': config('LOG_LEVEL', default='INFO'),
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'] + (['file'] if config('LOG_TO_FILE', default=True, cast=bool) else []),
        'level': config('LOG_LEVEL', default='INFO'),
    },
    'loggers': {
        'django': {
            'handlers': ['console'] + (['file'] if config('LOG_TO_FILE', default=True, cast=bool) else []),
            'level': config('LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
        'resume': {
            'handlers': ['console'] + (['file'] if config('LOG_TO_FILE', default=True, cast=bool) else []),
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

# ====== SECURITY SETTINGS ======
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# ====== RESUME PROCESSING CONFIGURATION ======
RESUME_PROCESSING = {
    'MAX_FILE_SIZE': config('MAX_FILE_SIZE_MB', default=10, cast=int) * 1024 * 1024,
    'ALLOWED_EXTENSIONS': config('ALLOWED_FILE_EXTENSIONS', default='.pdf,.doc,.docx').split(','),
    'MAX_PAGES': 10,
    'PROCESSING_TIMEOUT': 300,  # 5 minutes
}

# ====== LLM CONFIGURATION ======
LLM_CONFIG = {
    'OPENAI_MODEL': config('LLM_MODEL', default='gpt-3.5-turbo'),
    'MAX_TOKENS': config('LLM_MAX_TOKENS', default=4096, cast=int),
    'TEMPERATURE': config('LLM_TEMPERATURE', default=0.2, cast=float),
    'MAX_RETRIES': config('LLM_MAX_RETRIES', default=3, cast=int),
    'TIMEOUT': config('LLM_TIMEOUT', default=60, cast=int),
    'MIN_ATS_SCORE': config('TARGET_ATS_SCORE', default=85, cast=int),
    'MIN_JOB_SCORE': config('TARGET_JOB_SCORE', default=85, cast=int),
    'MAX_ITERATIONS': config('LLM_MAX_ITERATIONS', default=3, cast=int),
}

# ====== PDF CONFIGURATION ======
PDF_CONFIG = {
    'PAGE_SIZE': config('PDF_PAGE_SIZE', default='A4'),
    'MARGIN': config('PDF_MARGIN', default='0.5in'),
    'DPI': config('PDF_DPI', default=300, cast=int),
    'QUALITY': config('PDF_QUALITY', default='high'),
}

# ====== DEEPSEEK LLM INTEGRATION ======
LLM_CONFIG.update({
    "MODEL": "deepseek-chat",
    "BASE_URL": "https://api.deepseek.com",
    "TEMPERATURE": config('LLM_TEMPERATURE', default=0.2, cast=float),
    "MAX_TOKENS": config('LLM_MAX_TOKENS', default=4096, cast=int),
    "TIMEOUT": config('LLM_TIMEOUT', default=60, cast=int),
    "MIN_ATS_SCORE": config('TARGET_ATS_SCORE', default=85, cast=int),
    "MIN_JOB_SCORE": config('TARGET_JOB_SCORE', default=85, cast=int),
    "MAX_ITERATIONS": config('LLM_MAX_ITERATIONS', default=3, cast=int),
})

# ====== DOWNLOAD LIMITS CONFIGURATION ======
DOWNLOAD_LIMITS = {
    'PER_15_DAYS': config('DOWNLOADS_PER_15_DAYS', default=3, cast=int),
    'PER_MONTH': config('DOWNLOADS_PER_MONTH', default=6, cast=int),
}

# ====== WHATSAPP CONFIGURATION - Task 12 ======
WHATSAPP_CONFIG = {
    'PHONE_NUMBER': config('WHATSAPP_PHONE_NUMBER', default='916303858671'),
    'DEFAULT_MESSAGE': config('WHATSAPP_DEFAULT_MESSAGE', 
                             default='Hi! I\'m interested in your job application service. Can you provide more details about pricing and process?'),
    'POSITION': 'right',  # Task 12: WhatsApp button on right side
}

# ====== NOTIFICATION SETTINGS - Task 10 ======
NOTIFICATIONS = {
    'SEND_WELCOME_EMAIL': config('SEND_WELCOME_EMAIL', default=True, cast=bool),
    'SEND_RESUME_NOTIFICATION': config('SEND_RESUME_NOTIFICATION', default=True, cast=bool),
    'NOTIFY_ADMIN_NEW_USER': config('NOTIFY_ADMIN_NEW_USER', default=True, cast=bool),
    'FIRST_RESUME_EMAIL_ENABLED': True,  # Task 10 specific
}

# ====== NAVIGATION SETTINGS - Task 13 ======
NAVIGATION_CONFIG = {
    'SHOW_ATS_DETAILS': True,
    'SHOW_SERVICES_PAGE': True,
    'HIGHLIGHT_IMPORTANT_LINKS': True,
    'MOBILE_MENU_ENABLED': True,
}

# ====== SPA PROTECTION SETTINGS - Task 14 ======
SPA_PROTECTION = {
    'ENABLED': True,
    'PROTECTED_PATHS': ['/app/', '/api/', '/templates/', '/manual-resume/', '/admin-panel/'],
    'PUBLIC_PATHS': ['/', '/login/', '/signup/', '/password-reset/', '/ats-details/', '/our-services/', '/static/', '/media/', '/admin/'],
    'LOGIN_MESSAGE': '🔒 Please log in to access the resume optimizer dashboard. Create a free account if you don\'t have one yet!',
}

# ====== CACHE CONFIGURATION ======
# Use Redis if available, otherwise fall back to local memory cache
if config('REDIS_URL', default=''):
    # Production Redis cache
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:
    # Development local memory cache (no external dependencies)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
            'TIMEOUT': 300,  # 5 minutes default timeout
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 3,
            }
        }
    }

# ====== MESSAGE TAGS FOR BOOTSTRAP STYLING ======
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# ====== AWS CONFIGURATION (For Production) ======
if config('AWS_ACCESS_KEY_ID', default=''):
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    
    # Use S3 for media files in production
    if not DEBUG:
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# ====== SENTRY CONFIGURATION ======
SENTRY_DSN = config('SENTRY_DSN', default='')
if SENTRY_DSN and not DEBUG:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True
    )

# ====== DEBUG TOOLBAR (Development Only) ======
if DEBUG and config('USE_DEBUG_TOOLBAR', default=False, cast=bool):
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = ['127.0.0.1']

# ====== DEVELOPMENT vs PRODUCTION SETTINGS ======
if DEBUG:
    # Development settings
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    
    # Allow all origins in development
    CORS_ALLOW_ALL_ORIGINS = True
    
else:
    # Production settings
    DEBUG = False
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',')
    
    # Force HTTPS in production
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Security headers
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# ====== CUSTOM SETTINGS VALIDATION ======
def validate_settings():
    """Validate critical settings for all tasks"""
    errors = []
    
    # Task 10: Email configuration
    if NOTIFICATIONS['SEND_RESUME_NOTIFICATION'] and not EMAIL_HOST_USER:
        errors.append("Task 10: EMAIL_HOST_USER must be set for resume notifications")
    
    # Task 11: Password reset requires email
    if not EMAIL_HOST_USER and not DEBUG:
        errors.append("Task 11: Email configuration required for password reset")
    
    # Task 14: Middleware check
    if 'resume.middleware.SPAAuthenticationMiddleware' not in MIDDLEWARE:
        errors.append("Task 14: SPAAuthenticationMiddleware not in MIDDLEWARE")
    
    if errors:
        import sys
        print("⚠️  Configuration Errors:")
        for error in errors:
            print(f"   - {error}")
        if not DEBUG:
            print("Exiting due to configuration errors in production.")
            sys.exit(1)

# Run validation
validate_settings()

# ====== TASK COMPLETION STATUS ======
TASKS_COMPLETED = {
    'task_10_email_notifications': True,
    'task_11_password_reset': True, 
    'task_12_whatsapp_right_position': True,
    'task_13_navigation_and_pages': True,
    'task_14_login_protection': True,
}

print("✅ All Tasks (10-14) Configuration Loaded Successfully!")
if DEBUG:
    print("🔧 Running in Development Mode")
    print("📧 Email Backend: Console (check terminal for emails)")
else:
    print("🚀 Running in Production Mode")
    print("📧 Email Backend: SMTP")

print(f"📊 Tasks Completed: {sum(TASKS_COMPLETED.values())}/5")

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/urls.py =====

# ats_resume_app/urls.py - Main project URLs configuration
# Updated for Tasks 10-14

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import RedirectView
from django.http import HttpResponse

def health_check(request):
    """Simple health check endpoint"""
    return HttpResponse("OK - All systems operational!", content_type="text/plain")

def robots_txt(request):
    """Robots.txt for SEO"""
    lines = [
        "User-agent: *",
        "Disallow: /admin/",
        "Disallow: /api/",
        "Disallow: /admin-panel/",
        "Allow: /",
        "Allow: /ats-details/",
        "Allow: /our-services/",
        "",
        f"Sitemap: {request.build_absolute_uri('/sitemap.xml')}"
    ]
    return HttpResponse("\n".join(lines), content_type="text/plain")

urlpatterns = [
    # ====== ADMIN INTERFACE ======
    path('admin/', admin.site.urls),
    
    # ====== MAIN APPLICATION ROUTES ======
    path('', include('resume.urls')),
    
    # ====== HEALTH CHECK & MONITORING ======
    path('health/', health_check, name='health_check'),
    path('robots.txt', robots_txt, name='robots_txt'),
    
    # ====== FAVICON HANDLING ======
    path('favicon.ico', RedirectView.as_view(url='/static/favicon.ico', permanent=True)),
]

# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/wsgi.py =====

"""
WSGI config for ats_resume_app project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ats_resume_app.settings")

application = get_wsgi_application()


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/settings.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/settings.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/urls.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/urls.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/wsgi.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/wsgi.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/__init__.cpython-311.pyc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/ats_resume_app/__pycache__/__init__.cpython-311.pyc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/config =====

[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/Syed-qn/ats-resume-app.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/HEAD =====

ref: refs/heads/main


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/description =====

Unnamed repository; edit this file 'description' to name the repository.


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/index =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/index


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/packed-refs =====

# pack-refs with: peeled fully-peeled sorted 
18c642e552acac6b5634d5133e088f46d87d7976 refs/heads/main
1904460e45cc53e42db85f9ce869701a93c5dd26 refs/remotes/origin/main


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/COMMIT_EDITMSG =====

Login, admin and all tasks-1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0d/84287d8e8a67d4b1fe581bb315172cd01881fc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0d/84287d8e8a67d4b1fe581bb315172cd01881fc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/95/24bc036a858bdfc081e17cbe76e30340023d6f =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/95/24bc036a858bdfc081e17cbe76e30340023d6f


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6f/119e3ad0fe5242e55c67d5739aad6fb98d119f =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6f/119e3ad0fe5242e55c67d5739aad6fb98d119f


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/9b/6fa262c4b9026ea409ad38ed9cb46b70c8d514 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/9b/6fa262c4b9026ea409ad38ed9cb46b70c8d514


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/35/75fdbfdc11ba90eabd370bef08fbc8eaf7094e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/35/75fdbfdc11ba90eabd370bef08fbc8eaf7094e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/56/f1be8b29d0ceb0407457e5abb8edad098c7179 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/56/f1be8b29d0ceb0407457e5abb8edad098c7179


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0b/1dd0f61954ca3778f7a2c93322eccc7bc8f938 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0b/1dd0f61954ca3778f7a2c93322eccc7bc8f938


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/93/9a7bcd02bd351785f4b04b0037ba05542506c9 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/93/9a7bcd02bd351785f4b04b0037ba05542506c9


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/60/031fc838b2a3375c4c28fcfcae5e3a029db395 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/60/031fc838b2a3375c4c28fcfcae5e3a029db395


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/60/6ff2a3c0188075c0a478fbc156e727f051269a =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/60/6ff2a3c0188075c0a478fbc156e727f051269a


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/5a/8a5d6eb8deccdfc6622f9e9574bf29dbd26934 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/5a/8a5d6eb8deccdfc6622f9e9574bf29dbd26934


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b5/fbcd1aa536030be0fef1827dfce63a89c6a9ca =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b5/fbcd1aa536030be0fef1827dfce63a89c6a9ca


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b5/ec5646f4b75d1c3a4b50057137e352509bc613 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b5/ec5646f4b75d1c3a4b50057137e352509bc613


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/bb/4d56566af915e161dfc27a8cd6701cea2bf834 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/bb/4d56566af915e161dfc27a8cd6701cea2bf834


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/da/7975672866100e273ab826840db449169e5cd9 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/da/7975672866100e273ab826840db449169e5cd9


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/a2/22a4bc238191ce2e80cc47e56b3953c107e6fb =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/a2/22a4bc238191ce2e80cc47e56b3953c107e6fb


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d1/6a318ca510ae45a945df6bc662082c63f0a6f1 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d1/6a318ca510ae45a945df6bc662082c63f0a6f1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ae/fdc8d3ddb8cae9bf676727af36c1b7f56faf62 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ae/fdc8d3ddb8cae9bf676727af36c1b7f56faf62


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e5/2e7a3baf75bce0fb7552a9a4f81acedcb6ac51 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e5/2e7a3baf75bce0fb7552a9a4f81acedcb6ac51


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e2/714846edce11f490af75418e638c9b168dd61f =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e2/714846edce11f490af75418e638c9b168dd61f


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f4/ab955b6134fa623980cb0a9f6b673d2a8f9f81 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f4/ab955b6134fa623980cb0a9f6b673d2a8f9f81


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/eb/4741790f503d626675133c23e8af8f7a5250af =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/eb/4741790f503d626675133c23e8af8f7a5250af


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ee/508ad6435245bad68f418e83f1fcd3b5aa1860 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ee/508ad6435245bad68f418e83f1fcd3b5aa1860


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f2/e8684f80d73888b64932e773d9885602e2f1e1 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f2/e8684f80d73888b64932e773d9885602e2f1e1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f2/0f2845162bb9f90338ddf910dbff17e649fb67 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f2/0f2845162bb9f90338ddf910dbff17e649fb67


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f5/14c58769ea0945cb47fa60c1190bfe241ae85d =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f5/14c58769ea0945cb47fa60c1190bfe241ae85d


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f5/c17c0d4d248373e9da3b577e0464dd191953fa =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f5/c17c0d4d248373e9da3b577e0464dd191953fa


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/cf/3960c6f59bc77540c94459e996e20765d93189 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/cf/3960c6f59bc77540c94459e996e20765d93189


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e4/aab38f75d42d61a30c9c5dfca74c36189c6ed3 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e4/aab38f75d42d61a30c9c5dfca74c36189c6ed3


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fe/677f87f14b2b5d69c4f610949b42e9aca33dc3 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fe/677f87f14b2b5d69c4f610949b42e9aca33dc3


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/c8/4e27d13e6c90713154bccbac2c1cf4f6f1a0ae =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/c8/4e27d13e6c90713154bccbac2c1cf4f6f1a0ae


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/20/0c502f7f61e7bf5ce1839a346127a6b1ccfd45 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/20/0c502f7f61e7bf5ce1839a346127a6b1ccfd45


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/18/3e032f2ebaedfba786be7379b5e290c1d97bc9 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/18/3e032f2ebaedfba786be7379b5e290c1d97bc9


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.idx =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.idx


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.rev =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.rev


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.pack =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/pack/pack-7118053abd3e77d618f080441b62aaad024b4ca6.pack


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/42/a90c60d956a2caa799b7e3997a5dc694c4d894 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/42/a90c60d956a2caa799b7e3997a5dc694c4d894


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/42/3bbfcef916414e4ebf6211b416da47f9c2d576 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/42/3bbfcef916414e4ebf6211b416da47f9c2d576


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/45/de5c460d8f222c856d61eaf822a80303138543 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/45/de5c460d8f222c856d61eaf822a80303138543


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/1f/c2d1b19e6da05c7c8e4ebbbd749cfa16281a10 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/1f/c2d1b19e6da05c7c8e4ebbbd749cfa16281a10


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/80/00c86c2d97bd4707a7c30c7d4056f1020f1bb5 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/80/00c86c2d97bd4707a7c30c7d4056f1020f1bb5


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/74/e87b7dc559734d86c8badcf71c887226eb5653 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/74/e87b7dc559734d86c8badcf71c887226eb5653


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/74/2c3b746339ab4f4b0b671b9b870c5f3ec4b6bc =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/74/2c3b746339ab4f4b0b671b9b870c5f3ec4b6bc


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/7b/dd2c2a2bac5967419c42c612878c7304a7bc4b =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/7b/dd2c2a2bac5967419c42c612878c7304a7bc4b


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8f/5e4888f541f0899e22e2a2c0c2c4c5a21b976a =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8f/5e4888f541f0899e22e2a2c0c2c4c5a21b976a


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8f/2ea1794fc089aa069ef6d4852338ccaa60b1a2 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8f/2ea1794fc089aa069ef6d4852338ccaa60b1a2


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/10/24c6246706c689d8bbeb2e9981dba7ffc91105 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/10/24c6246706c689d8bbeb2e9981dba7ffc91105


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4c/716bb2363f8d90e1fae9f058481fb24e4a040e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4c/716bb2363f8d90e1fae9f058481fb24e4a040e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/21/ea4f51b1be6d987bc839933e560815f38fb996 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/21/ea4f51b1be6d987bc839933e560815f38fb996


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4d/0b2a034b162490318018cb45fe0c05bc6e465b =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4d/0b2a034b162490318018cb45fe0c05bc6e465b


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2f/044714a84d65cb8ffbbdeda813ad651419333b =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2f/044714a84d65cb8ffbbdeda813ad651419333b


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6b/2410e683d710b8c21a5b6e39acde1a6ad30d4d =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6b/2410e683d710b8c21a5b6e39acde1a6ad30d4d


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/38/4b630a42c04aa83815aecc484a06876103d712 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/38/4b630a42c04aa83815aecc484a06876103d712


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/38/9314b35bf4ed801a8e3e4543aa3f4ba2c32c70 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/38/9314b35bf4ed801a8e3e4543aa3f4ba2c32c70


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/9a/06261faa6b0163b4e9b32bdd29cdc59203201f =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/9a/06261faa6b0163b4e9b32bdd29cdc59203201f


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/5d/89c40e146933b984e812bce4b9221a51ac4151 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/5d/89c40e146933b984e812bce4b9221a51ac4151


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/info/commit-graph =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/info/commit-graph


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/info/packs =====

P pack-7118053abd3e77d618f080441b62aaad024b4ca6.pack



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/62/4d36fbe15f8f54670a250e97df69f806156d4d =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/62/4d36fbe15f8f54670a250e97df69f806156d4d


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/53/0e0569f5f9741edc41e734c166fd5157ea9b6e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/53/0e0569f5f9741edc41e734c166fd5157ea9b6e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/53/384c4e009e0b42b9c70a3bbad120bf4ae66e94 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/53/384c4e009e0b42b9c70a3bbad120bf4ae66e94


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6d/587cc260e23569d007a52e64e5f70541a3efee =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/6d/587cc260e23569d007a52e64e5f70541a3efee


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/39/c0cc092b7dce6659e880f0a8337d985240bb0a =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/39/c0cc092b7dce6659e880f0a8337d985240bb0a


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/99/5c16c696f32e2bba634ad6801b73a4fa76a34e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/99/5c16c696f32e2bba634ad6801b73a4fa76a34e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/99/2e58555b1160172938860484f7b39b30144341 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/99/2e58555b1160172938860484f7b39b30144341


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0a/375fd57a2ef298b5b23209476e3585dd3ee2a0 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/0a/375fd57a2ef298b5b23209476e3585dd3ee2a0


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/64/2dd3504866e371434eb87eb0bdfa66677aee4e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/64/2dd3504866e371434eb87eb0bdfa66677aee4e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d3/a55c8bf67276e94996b23774691e940412abaf =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d3/a55c8bf67276e94996b23774691e940412abaf


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b8/e38795109a4441d4b796d2a4908c0ee63bf138 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b8/e38795109a4441d4b796d2a4908c0ee63bf138


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b6/2ff26df79e87405d901ddd6f31ea4d2f5054ab =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/b6/2ff26df79e87405d901ddd6f31ea4d2f5054ab


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d2/d8c05b36ec10776549dedb1d1247048da664b4 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/d2/d8c05b36ec10776549dedb1d1247048da664b4


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/db/3fec1a2c570403a5d14b20475e3f519f87b108 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/db/3fec1a2c570403a5d14b20475e3f519f87b108


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/a8/c789e96c348a1745cf7ddf73278cb6cb61b318 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/a8/c789e96c348a1745cf7ddf73278cb6cb61b318


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/de/af5583268accbb75ff76addb663b976c958e2e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/de/af5583268accbb75ff76addb663b976c958e2e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/de/d30c5f5c264caaea681a6d5ee884021c5431b1 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/de/d30c5f5c264caaea681a6d5ee884021c5431b1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ef/f71c207d81a1328fb248e60429ceb3282d5131 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ef/f71c207d81a1328fb248e60429ceb3282d5131


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f9/76e09a5defde43ed123b528e43c996adf7808a =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f9/76e09a5defde43ed123b528e43c996adf7808a


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f0/474c9a6e839fee4087248521020fb0d60cab4d =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f0/474c9a6e839fee4087248521020fb0d60cab4d


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f7/8534072bbe65638fcc8d74f287d71efb2a4c1f =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f7/8534072bbe65638fcc8d74f287d71efb2a4c1f


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fa/f01e2c576d422ba045b28fa04c108fc0787f1b =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fa/f01e2c576d422ba045b28fa04c108fc0787f1b


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fa/3189a459cf8848927cd61d0540492687729dbe =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/fa/3189a459cf8848927cd61d0540492687729dbe


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ff/49db72d8006544cfadcaedf39e7add8f21aee0 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/ff/49db72d8006544cfadcaedf39e7add8f21aee0


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/c5/e6193a6db0399ec84a7166f103649dc46e4a47 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/c5/e6193a6db0399ec84a7166f103649dc46e4a47


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f6/c802e9cdd297d3c8ec235b7e561f06132c19e5 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f6/c802e9cdd297d3c8ec235b7e561f06132c19e5


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f1/f6fe7d31af57466c67fa14eb5470499514bf35 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/f1/f6fe7d31af57466c67fa14eb5470499514bf35


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e7/fe396ab49a4ddf4e0a567e92b38de5503ca283 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/e7/fe396ab49a4ddf4e0a567e92b38de5503ca283


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2d/3c7b05d37ec5c73dd68e7adf693082ffc54fc7 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2d/3c7b05d37ec5c73dd68e7adf693082ffc54fc7


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2d/27d0d2c1d22afd46c922bc9036542025fb3612 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2d/27d0d2c1d22afd46c922bc9036542025fb3612


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/41/42a2cd33140d4b085a4cdda37be76d4ac30100 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/41/42a2cd33140d4b085a4cdda37be76d4ac30100


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/77/32c6fc572927fa0d74d074fa48165c8422f850 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/77/32c6fc572927fa0d74d074fa48165c8422f850


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/77/5f5edf9fa1742600214065ccd4f1b4116cd691 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/77/5f5edf9fa1742600214065ccd4f1b4116cd691


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/70/9e1ad7f7d08322b4342d77644a2c4907dee54e =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/70/9e1ad7f7d08322b4342d77644a2c4907dee54e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4a/604ee7efb14a90fd0ec85b15ae5f2c6b6d9c98 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4a/604ee7efb14a90fd0ec85b15ae5f2c6b6d9c98


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/24/da661f69438df1da3b491e39da7f476bf52528 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/24/da661f69438df1da3b491e39da7f476bf52528


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4f/422bf09b065a7eb168b8c2c0eebbdcd5c75205 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/4f/422bf09b065a7eb168b8c2c0eebbdcd5c75205


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8d/2fb3822a496f33e7133e338b588eb2f3f6d3d2 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/8d/2fb3822a496f33e7133e338b588eb2f3f6d3d2


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/1d/1a2254cd83d07a86dc9e34d3dbbe56608c44b9 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/1d/1a2254cd83d07a86dc9e34d3dbbe56608c44b9


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/82/157234ea53a6b9f74e79e7c3e140a3feb01299 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/82/157234ea53a6b9f74e79e7c3e140a3feb01299


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/40/5285b07bdbb6e876fa399f8212565ded9da519 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/40/5285b07bdbb6e876fa399f8212565ded9da519


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2e/86e0782f7172c5adc8c1398325e99a2164ed44 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/2e/86e0782f7172c5adc8c1398325e99a2164ed44


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/47/46bd490e49d0e2828fd2fc5e97acb37140afad =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/47/46bd490e49d0e2828fd2fc5e97acb37140afad


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/78/9ebb04d87ac7996e315c53a68ab3749a4733f8 =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/.git/objects/78/9ebb04d87ac7996e315c53a68ab3749a4733f8


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/info/exclude =====

# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/info/refs =====

18c642e552acac6b5634d5133e088f46d87d7976	refs/heads/main
1904460e45cc53e42db85f9ce869701a93c5dd26	refs/remotes/origin/main


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/logs/HEAD =====

18c642e552acac6b5634d5133e088f46d87d7976 f1f6fe7d31af57466c67fa14eb5470499514bf35 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045153 +0400	commit (amend): Re-add clean render.yaml without secrets
f1f6fe7d31af57466c67fa14eb5470499514bf35 183e032f2ebaedfba786be7379b5e290c1d97bc9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045634 +0400	commit: Fix shell CMD and correct render.yaml envVars for Render
183e032f2ebaedfba786be7379b5e290c1d97bc9 8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045872 +0400	commit: Fix module path to ats_resume_app.wsgi
8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 ded30c5f5c264caaea681a6d5ee884021c5431b1 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046190 +0400	commit: Install system dependencies for WeasyPrint
ded30c5f5c264caaea681a6d5ee884021c5431b1 56f1be8b29d0ceb0407457e5abb8edad098c7179 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046345 +0400	commit: Fix system dependencies for WeasyPrint on Render
56f1be8b29d0ceb0407457e5abb8edad098c7179 ff49db72d8006544cfadcaedf39e7add8f21aee0 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046606 +0400	commit: Fix Dockerfile: use python:3.11-bullseye and add WeasyPrint dependencies
ff49db72d8006544cfadcaedf39e7add8f21aee0 1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748047150 +0400	commit: Run migrations before starting app
1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 384b630a42c04aa83815aecc484a06876103d712 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748048196 +0400	commit: Fix Dockerfile for WeasyPrint deployment and add static/migrate support
384b630a42c04aa83815aecc484a06876103d712 39c0cc092b7dce6659e880f0a8337d985240bb0a Syed-qn <snassirodinquadri@gmail.com> 1748868387 +0400	commit: Login, admin and all tasks
39c0cc092b7dce6659e880f0a8337d985240bb0a 530e0569f5f9741edc41e734c166fd5157ea9b6e Syed-qn <snassirodinquadri@gmail.com> 1748869393 +0400	commit: Login, admin and all tasks-1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/logs/refs/heads/main =====

18c642e552acac6b5634d5133e088f46d87d7976 f1f6fe7d31af57466c67fa14eb5470499514bf35 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045153 +0400	commit (amend): Re-add clean render.yaml without secrets
f1f6fe7d31af57466c67fa14eb5470499514bf35 183e032f2ebaedfba786be7379b5e290c1d97bc9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045634 +0400	commit: Fix shell CMD and correct render.yaml envVars for Render
183e032f2ebaedfba786be7379b5e290c1d97bc9 8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045872 +0400	commit: Fix module path to ats_resume_app.wsgi
8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 ded30c5f5c264caaea681a6d5ee884021c5431b1 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046190 +0400	commit: Install system dependencies for WeasyPrint
ded30c5f5c264caaea681a6d5ee884021c5431b1 56f1be8b29d0ceb0407457e5abb8edad098c7179 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046345 +0400	commit: Fix system dependencies for WeasyPrint on Render
56f1be8b29d0ceb0407457e5abb8edad098c7179 ff49db72d8006544cfadcaedf39e7add8f21aee0 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046606 +0400	commit: Fix Dockerfile: use python:3.11-bullseye and add WeasyPrint dependencies
ff49db72d8006544cfadcaedf39e7add8f21aee0 1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748047150 +0400	commit: Run migrations before starting app
1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 384b630a42c04aa83815aecc484a06876103d712 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748048196 +0400	commit: Fix Dockerfile for WeasyPrint deployment and add static/migrate support
384b630a42c04aa83815aecc484a06876103d712 39c0cc092b7dce6659e880f0a8337d985240bb0a Syed-qn <snassirodinquadri@gmail.com> 1748868387 +0400	commit: Login, admin and all tasks
39c0cc092b7dce6659e880f0a8337d985240bb0a 530e0569f5f9741edc41e734c166fd5157ea9b6e Syed-qn <snassirodinquadri@gmail.com> 1748869393 +0400	commit: Login, admin and all tasks-1


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/logs/refs/remotes/origin/main =====

1904460e45cc53e42db85f9ce869701a93c5dd26 18c642e552acac6b5634d5133e088f46d87d7976 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748044998 +0400	update by push
18c642e552acac6b5634d5133e088f46d87d7976 f1f6fe7d31af57466c67fa14eb5470499514bf35 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045154 +0400	update by push
f1f6fe7d31af57466c67fa14eb5470499514bf35 183e032f2ebaedfba786be7379b5e290c1d97bc9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045635 +0400	update by push
183e032f2ebaedfba786be7379b5e290c1d97bc9 8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748045873 +0400	update by push
8f2ea1794fc089aa069ef6d4852338ccaa60b1a2 ded30c5f5c264caaea681a6d5ee884021c5431b1 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046191 +0400	update by push
ded30c5f5c264caaea681a6d5ee884021c5431b1 56f1be8b29d0ceb0407457e5abb8edad098c7179 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046346 +0400	update by push
56f1be8b29d0ceb0407457e5abb8edad098c7179 ff49db72d8006544cfadcaedf39e7add8f21aee0 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748046612 +0400	update by push
ff49db72d8006544cfadcaedf39e7add8f21aee0 1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748047152 +0400	update by push
1d1a2254cd83d07a86dc9e34d3dbbe56608c44b9 384b630a42c04aa83815aecc484a06876103d712 Syed Khaja <syed@Syeds-MacBook-Air-2.local> 1748048198 +0400	update by push
384b630a42c04aa83815aecc484a06876103d712 39c0cc092b7dce6659e880f0a8337d985240bb0a Syed-qn <snassirodinquadri@gmail.com> 1748868391 +0400	update by push
39c0cc092b7dce6659e880f0a8337d985240bb0a 530e0569f5f9741edc41e734c166fd5157ea9b6e Syed-qn <snassirodinquadri@gmail.com> 1748869395 +0400	update by push


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/commit-msg.sample =====

#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-rebase.sample =====

#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/sendemail-validate.sample =====

#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-commit.sample =====

#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/applypatch-msg.sample =====

#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/fsmonitor-watchman.sample =====

#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-receive.sample =====

#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/prepare-commit-msg.sample =====

#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/post-update.sample =====

#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-merge-commit.sample =====

#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-applypatch.sample =====

#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/pre-push.sample =====

#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/update.sample =====

#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/hooks/push-to-checkout.sample =====

#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/refs/heads/main =====

530e0569f5f9741edc41e734c166fd5157ea9b6e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/.git/refs/remotes/origin/main =====

530e0569f5f9741edc41e734c166fd5157ea9b6e


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/AI_-_Syed_Nasirodin_Quadri_Resume.pdf =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/AI_-_Syed_Nasirodin_Quadri_Resume.pdf


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/.gitkeep =====



# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/applicant_-_stanford_style-3.pdf =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/applicant_-_stanford_style-3.pdf


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV_MJl01I1.docx =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV_MJl01I1.docx


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV_FUyiTUT.docx =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV_FUyiTUT.docx


# ===== FILE: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV.docx =====

# Skipped binary/unreadable file: /Users/syed/Files/Host/ATS_RESUME_APP/media/resumes/nwf_Syed_Nasirodin_Quadri_CV.docx
